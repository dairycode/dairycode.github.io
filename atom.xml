<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>dairycode的博客</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-02-22T16:20:00.652Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>dairycode</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>深入理解Java虚拟机学习笔记</title>
    <link href="http://example.com/2020/09/01/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2020/09/01/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-09-01T04:10:26.000Z</published>
    <updated>2021-02-22T16:20:00.652Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>虚拟机是一种抽象化的计算机，通过在实际的计算机上仿真模拟各种计算机功能来实现的。Java虚拟机有自己完善的硬体架构，如处理器、堆栈、寄存器等，还具有相应的指令系统。Java虚拟机屏蔽了与具体操作系统平台相关的信息，使得Java程序只需生成在Java虚拟机上运行的目标代码（字节码），就可以在多种平台上不加修改地运行。</p><a id="more"></a><h2 id="1、双亲委派机制"><a href="#1、双亲委派机制" class="headerlink" title="1、双亲委派机制"></a>1、双亲委派机制</h2><ul><li><p>顺序：APP –&gt; EXC –&gt; BOOT (最终执行)</p><p>1、类加载器收到类加载的请求</p><p>2、将这个请求向上委托给父类加载器去完成，直向上委托，直到启动类加载器</p><p>3、启动加载器检查是否能够家在当前这个类，能加载就结束，使用当前的加载器，否则，抛出异常，通知子加载器进行加载</p><p>4、重复步骤 3</p><p>Class Not Found ~</p><p>null：java调用不到 C、C++</p><p>Java = C++– (去掉繁琐的东西)</p></li></ul><h2 id="2、沙箱安全机制"><a href="#2、沙箱安全机制" class="headerlink" title="2、沙箱安全机制"></a>2、沙箱安全机制</h2><p>​    组成沙箱的基本组件：</p><ul><li>字节码校验器（bytecode verifier）：确保Java类文件遵循Java语言规范。这样可以帮助Java程序实现内存保护，但并不是所有的类文件都会经过字节码校验，比如核心类</li><li>类加载器（class loader）：其中类加载器在3个方面对Java沙箱起作用<ul><li>它防止恶意代码去干涉善意的代码；    // 双亲委派机制</li><li>他守护了被信任的类库边界；</li><li>它将代码归入保护域，确定了代码可以进行哪些操作。</li></ul></li></ul><h2 id="3、Native方法"><a href="#3、Native方法" class="headerlink" title="3、Native方法"></a>3、Native方法</h2><p>​    凡是带了native关键字的，说明java的作用范围达不到了，会去调用底层C语言的库</p><p>​    会进入本地方法栈</p><p>​    调用本地方法本地接口    JNI</p><p>​    JNI作用：扩展Java的使用，融合不同的编程语言为Java所用</p><p>​    Java诞生的时候，C、C++横行，想要立足，必须要有调用C、C++的程序</p><p>​    它在内存区域中专门开辟了一块标记区域：Native Method Stack，登记native方法</p><p>​    在最终执行的时候，加载本地方法库中的方法，通过JNI</p><p>​    Java程序驱动打印机，管理系统，掌握即可，在企业级应用中较为少见</p><h2 id="4、垃圾收集方法"><a href="#4、垃圾收集方法" class="headerlink" title="4、垃圾收集方法"></a>4、垃圾收集方法</h2><ul><li><p>标记-清除算法</p><p>不足：1、效率问题，标记和清除两个过程的效率都不高</p><p>​            2、空间问题，标记清楚之后会产生大量不连续的内存碎片</p></li><li><p>复制算法</p><p>现在商业虚拟机都采用这种收集算法来回收新生代（一块Eden两块Survivor，8:1:1）</p><p>不足：1、将内存缩小为了原来的一半，未免太高了一点</p></li><li><p>标记-整理算法</p><p>老年代适用，让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存</p></li><li><p>分代收集算法</p><p>当前商业虚拟机的垃圾收集都采用”分代收集“算法，将Java堆分成新生代和老年代，新生代选用复制算法，老年代采用”标记-清理“或者”标记-整理“算法来进行回收</p></li></ul><h3 id="5、JMM"><a href="#5、JMM" class="headerlink" title="5、JMM"></a>5、JMM</h3><ul><li><p>什么是JMM（Java Memory Model的缩写）</p></li><li><p>它是干嘛的？</p><p>作用：缓存一致性协议，用于定义数据读写的规则（遵守，找到这个规则）</p><p>JMM定义了线程和主内存之间的抽象关系：线程之间的共享变量存储在主内存（Main Memory）中，每个线程都有一个线程私有的本地内存（Local Memory）</p><p>解决共享对象可见性这个问题：voliate</p></li><li><p>它该如何学习？</p><p>JMM：抽象的概念，理论</p></li><li><p>并发编程三大特性：可见性、原子性、有序性</p><p>Volatile保证可见性与有序性，但是不保证原子性，保证原子性需要借助synchronized这样的锁机制</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;虚拟机是一种抽象化的计算机，通过在实际的计算机上仿真模拟各种计算机功能来实现的。Java虚拟机有自己完善的硬体架构，如处理器、堆栈、寄存器等，还具有相应的指令系统。Java虚拟机屏蔽了与具体操作系统平台相关的信息，使得Java程序只需生成在Java虚拟机上运行的目标代码（字节码），就可以在多种平台上不加修改地运行。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java技术栈" scheme="http://example.com/tags/Java%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    <category term="Java虚拟机" scheme="http://example.com/tags/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Linux上安装Docker问题</title>
    <link href="http://example.com/2020/03/07/Linux%E4%B8%8A%E5%AE%89%E8%A3%85Docker%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2020/03/07/Linux%E4%B8%8A%E5%AE%89%E8%A3%85Docker%E9%97%AE%E9%A2%98/</id>
    <published>2020-03-06T16:10:45.000Z</published>
    <updated>2021-02-22T16:13:15.324Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。</p><a id="more"></a><h2 id="1-卸载旧版本Docker"><a href="#1-卸载旧版本Docker" class="headerlink" title="1 卸载旧版本Docker"></a>1 卸载旧版本Docker</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum remove docker \</span></span><br><span class="line"><span class="bash">                  docker-client \</span></span><br><span class="line"><span class="bash">                  docker-client-latest \</span></span><br><span class="line"><span class="bash">                  docker-common \</span></span><br><span class="line"><span class="bash">                  docker-latest \</span></span><br><span class="line"><span class="bash">                  docker-latest-logrotate \</span></span><br><span class="line"><span class="bash">                  docker-logrotate \</span></span><br><span class="line"><span class="bash">                  docker-engine</span></span><br></pre></td></tr></table></figure><h2 id="2-需要的安装包"><a href="#2-需要的安装包" class="headerlink" title="2 需要的安装包"></a>2 需要的安装包</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils</span><br></pre></td></tr></table></figure><h2 id="3-设置镜像的仓库"><a href="#3-设置镜像的仓库" class="headerlink" title="3 设置镜像的仓库"></a>3 设置镜像的仓库</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum-config-manager \</span></span><br><span class="line"><span class="bash">    --add-repo \</span></span><br><span class="line"><span class="bash">    https://download.docker.com/linux/centos/docker-ce.repo <span class="comment"># 默认是国外的</span></span></span><br></pre></td></tr></table></figure><p>改成阿里云镜像的仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum-config-manager \</span></span><br><span class="line"><span class="bash">    --add-repo \</span></span><br><span class="line"><span class="bash">    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span></span><br></pre></td></tr></table></figure><h2 id="4-更新yum软件包索引"><a href="#4-更新yum软件包索引" class="headerlink" title="4 更新yum软件包索引"></a>4 更新yum软件包索引</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum makecache fast</span></span><br></pre></td></tr></table></figure><h2 id="5-安装Docker"><a href="#5-安装Docker" class="headerlink" title="5 安装Docker"></a>5 安装Docker</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker-ce 社区版 docker-ee 企业版</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install docker-ce docker-ce-cli containerd.io</span></span><br></pre></td></tr></table></figure><h2 id="6-启动Docker"><a href="#6-启动Docker" class="headerlink" title="6 启动Docker"></a>6 启动Docker</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl start docker</span></span><br></pre></td></tr></table></figure><h2 id="7-hello-world"><a href="#7-hello-world" class="headerlink" title="7 hello-world"></a>7 hello-world</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker run hello-world</span></span><br></pre></td></tr></table></figure><h2 id="8-查看一下下载的这个hello-world镜像"><a href="#8-查看一下下载的这个hello-world镜像" class="headerlink" title="8 查看一下下载的这个hello-world镜像"></a>8 查看一下下载的这个hello-world镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">hello-world         latest              bf756fb1ae65        4 months ago        13.3kB</span><br></pre></td></tr></table></figure><h2 id="9-了解：卸载Docker"><a href="#9-了解：卸载Docker" class="headerlink" title="9 了解：卸载Docker"></a>9 了解：卸载Docker</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.卸载依赖</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo yum remove docker-ce docker-ce-cli containerd.io</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.删除资源</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo rm -rf /var/lib/docker</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> /var/lib/docker : docker的默认工作路径</span></span><br></pre></td></tr></table></figure><h2 id="10-启动并映射Docker容器"><a href="#10-启动并映射Docker容器" class="headerlink" title="10 启动并映射Docker容器"></a>10 启动并映射Docker容器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker run -d -p 3355:8080 --name tomcat01 tomcat</span></span><br></pre></td></tr></table></figure><h2 id="11-进入容器"><a href="#11-进入容器" class="headerlink" title="11 进入容器"></a>11 进入容器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker <span class="built_in">exec</span> -it tomcat01 /bin/bash</span></span><br></pre></td></tr></table></figure><h2 id="12-提交镜像"><a href="#12-提交镜像" class="headerlink" title="12 提交镜像"></a>12 提交镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker commit -m=<span class="string">&quot;提交的描述信息&quot;</span> -a=<span class="string">&quot;作者&quot;</span> 容器id 目标镜像名:[TAG]</span></span><br></pre></td></tr></table></figure><h2 id="13-使用数据卷"><a href="#13-使用数据卷" class="headerlink" title="13 使用数据卷"></a>13 使用数据卷</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker run -it -v 主机目录:容器内目录</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
    <category term="问题" scheme="http://example.com/tags/%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>解决HttpServletRequest inputStream只能读取一次问题</title>
    <link href="http://example.com/2020/03/06/%E8%A7%A3%E5%86%B3HttpServletRequest-inputStream%E5%8F%AA%E8%83%BD%E8%AF%BB%E5%8F%96%E4%B8%80%E6%AC%A1%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2020/03/06/%E8%A7%A3%E5%86%B3HttpServletRequest-inputStream%E5%8F%AA%E8%83%BD%E8%AF%BB%E5%8F%96%E4%B8%80%E6%AC%A1%E9%97%AE%E9%A2%98/</id>
    <published>2020-03-06T15:58:29.000Z</published>
    <updated>2021-02-22T16:07:45.340Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>通常对安全性有要求的接口都会对请求参数做一些签名验证，而我们一般会把验签的逻辑统一放到过滤器或拦截器里，这样就不用每个接口都去重复编写验签的逻辑。</p><p>在一个项目中会有很多的接口，而不同的接口可能接收不同类型的数据，例如表单数据和json数据，表单数据还好说，调用request的getParameterMap就能全部取出来。而json数据就有些麻烦了，因为json数据放在body中，我们需要通过request的输入流去读取。</p><p>但问题在于request的输入流只能读取一次不能重复读取，所以我们在过滤器或拦截器里读取了request的输入流之后，请求走到controller层时就会报错。而本文的目的就是介绍如何解决在这种场景下遇到HttpServletRequest的输入流只能读取一次的问题。</p><a id="more"></a><p>注：本文代码基于SpringBoot框架</p><h2 id="1-原因"><a href="#1-原因" class="headerlink" title="1.原因"></a>1.原因</h2><blockquote><p>我们先来看看为什么HttpServletRequest的输入流只能读一次，当我们调用<code>getInputStream()</code>方法获取输入流时得到的是一个InputStream对象，而实际类型是ServletInputStream，它继承于InputStream。</p><p>InputStream的<code>read()</code>方法内部有一个postion，标志当前流被读取到的位置，每读取一次，该标志就会移动一次，如果读到最后，<code>read()</code>会返回-1，表示已经读取完了。如果想要重新读取则需要调用<code>reset()</code>方法，position就会移动到上次调用mark的位置，mark默认是0，所以就能从头再读了。调用<code>reset()</code>方法的前提是已经重写了<code>reset()</code>方法，当然能否reset也是有条件的，它取决于<code>markSupported()</code>方法是否返回true。</p><p>InputStream默认不实现<code>reset()</code>，并且<code>markSupported()</code>默认也是返回false，我们再来看看ServletInputStream，可以看到该类没有重写<code>mark()</code>，<code>reset()</code>以及<code>markSupported()</code>方法。</p><p>综上，InputStream默认不实现reset的相关方法，而ServletInputStream也没有重写reset的相关方法，这样就无法重复读取流，这就是我们从request对象中获取的输入流就只能读取一次的原因。</p></blockquote><h2 id="2-使用HttpServletRequestWrapper-Filter解决输入流不能重复读取问题"><a href="#2-使用HttpServletRequestWrapper-Filter解决输入流不能重复读取问题" class="headerlink" title="2.使用HttpServletRequestWrapper + Filter解决输入流不能重复读取问题"></a>2.使用HttpServletRequestWrapper + Filter解决输入流不能重复读取问题</h2><blockquote><p>JavaEE提供了一个 HttpServletRequestWrapper类，从类名也可以知道它是一个http请求包装器，其基于装饰者模式实现了HttpServletRequest界面。该类并没有真正去实现HttpServletRequest的方法，而只是在方法内又去调用HttpServletRequest的方法，所以我们可以通过继承该类并实现想要重新定义的方法以达到包装原生HttpServletRequest对象的目的。</p><p>首先我们要定义一个容器，将输入流里面的数据存储到这个容器里，这个容器可以是数组或集合。然后我们重写getInputStream方法，每次都从这个容器里读数据，这样我们的输入流就可以读取任意次了。</p></blockquote><h2 id="3-具体操作"><a href="#3-具体操作" class="headerlink" title="3.具体操作"></a>3.具体操作</h2><p><strong>1.编写wrapper装饰器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestWrapper</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存储body数据的容器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] body;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RequestWrapper</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(request);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将body数据存储起来</span></span><br><span class="line">        String bodyStr = getBodyString(request);</span><br><span class="line">        body = bodyStr.getBytes(Charset.defaultCharset());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取请求Body</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBodyString</span><span class="params">(<span class="keyword">final</span> ServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> inputStream2String(request.getInputStream());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取请求Body</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBodyString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> InputStream inputStream = <span class="keyword">new</span> ByteArrayInputStream(body);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> inputStream2String(inputStream);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将inputStream里的数据读取出来并转换成字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream inputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">inputStream2String</span><span class="params">(InputStream inputStream)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(inputStream, Charset.defaultCharset()))) &#123;</span><br><span class="line">            String line;</span><br><span class="line">            <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                sb.append(line);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BufferedReader <span class="title">getReader</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(getInputStream()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletInputStream <span class="title">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> ByteArrayInputStream inputStream = <span class="keyword">new</span> ByteArrayInputStream(body);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServletInputStream() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> inputStream.read();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFinished</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isReady</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setReadListener</span><span class="params">(ReadListener readListener)</span> </span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.编写一个过滤器将原生的HttpServletRequest对象替换成我们的RequestWrapper对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter(filterName = &quot;replaceStreamFilter&quot;, urlPatterns = &quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReplaceStreamFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将原生的HttpServletRequest对象替换成我们的RequestWrapper对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> chain chain</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException ServletException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        request = <span class="keyword">new</span> RequestWrapper((HttpServletRequest) request);</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-检验问题是否解决"><a href="#4-检验问题是否解决" class="headerlink" title="4.检验问题是否解决"></a>4.检验问题是否解决</h2><p><strong>1.编写Spring拦截器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthenticationInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String jsonStr = <span class="keyword">new</span> RequestWrapper(request).getBodyString();</span><br><span class="line">        System.out.println(jsonStr);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.注册拦截器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationInterceptor authenticationInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 注册AuthenticationInterceptor拦截器</span></span><br><span class="line">        registry.addInterceptor(authenticationInterceptor)</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/*&quot;</span>)</span><br><span class="line">                .excludePathPatterns(</span><br><span class="line">                        <span class="string">&quot;/**/*.html&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/**/*/js&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/**/*.css&quot;</span></span><br><span class="line">                );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.编写测试接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(<span class="meta">@RequestBody</span> JSONObject jsonObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jsonObject.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>经检验，问题得到解决！</strong></p><h2 id="5-转载网址"><a href="#5-转载网址" class="headerlink" title="5.转载网址"></a>5.转载网址</h2><blockquote><p> <a href="https://blog.51cto.com/zero01/2334836">https://blog.51cto.com/zero01/2334836</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;通常对安全性有要求的接口都会对请求参数做一些签名验证，而我们一般会把验签的逻辑统一放到过滤器或拦截器里，这样就不用每个接口都去重复编写验签的逻辑。&lt;/p&gt;
&lt;p&gt;在一个项目中会有很多的接口，而不同的接口可能接收不同类型的数据，例如表单数据和json数据，表单数据还好说，调用request的getParameterMap就能全部取出来。而json数据就有些麻烦了，因为json数据放在body中，我们需要通过request的输入流去读取。&lt;/p&gt;
&lt;p&gt;但问题在于request的输入流只能读取一次不能重复读取，所以我们在过滤器或拦截器里读取了request的输入流之后，请求走到controller层时就会报错。而本文的目的就是介绍如何解决在这种场景下遇到HttpServletRequest的输入流只能读取一次的问题。&lt;/p&gt;</summary>
    
    
    
    
    <category term="问题" scheme="http://example.com/tags/%E9%97%AE%E9%A2%98/"/>
    
    <category term="HttpServletRequest inputStream" scheme="http://example.com/tags/HttpServletRequest-inputStream/"/>
    
  </entry>
  
  <entry>
    <title>Servlet过滤器配置问题</title>
    <link href="http://example.com/2020/03/06/Servlet%E8%BF%87%E6%BB%A4%E5%99%A8%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2020/03/06/Servlet%E8%BF%87%E6%BB%A4%E5%99%A8%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/</id>
    <published>2020-03-06T15:58:07.000Z</published>
    <updated>2021-02-22T16:07:30.158Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>过滤器，顾名思义就是起到过滤筛选作用的一种事物，只不过相较于现实生活中的过滤器，这里的过滤器过滤的对象是客户端访问的web资源，也可以理解为一种预处理手段，对资源进行拦截后，将其中我们认为的杂质（用户自己定义的）过滤，符合条件的放行，不符合的则拦截下来。</p><p>当然，过滤器既可以拦截request，也可以拦截返回的response。</p><a id="more"></a><h2 id="1-过滤器类"><a href="#1-过滤器类" class="headerlink" title="1.过滤器类"></a>1.过滤器类</h2><blockquote><p>过滤器的本质就是一个实现了Filter接口的Java类。</p><p>我们先自己创建一个类，实现Filter接口（javax.servlet）。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterDemo</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="comment">// 放行代码</span></span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-配置过滤器"><a href="#2-配置过滤器" class="headerlink" title="2.配置过滤器"></a>2.配置过滤器</h2><p><strong>第一种：web.xml配置</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filterDemo<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.github.dairycode.web.filter.FilterDemo<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filterDemo<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 拦截路径 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>第二种：使用注解配置</strong></p><p>与servlet相似的配置，我们可以指定它的名字和拦截路径。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter(&quot;filterName=&quot;filterDemo&quot;, urlPatters=&quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterDemo</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：其中filterName可省略。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;过滤器，顾名思义就是起到过滤筛选作用的一种事物，只不过相较于现实生活中的过滤器，这里的过滤器过滤的对象是客户端访问的web资源，也可以理解为一种预处理手段，对资源进行拦截后，将其中我们认为的杂质（用户自己定义的）过滤，符合条件的放行，不符合的则拦截下来。&lt;/p&gt;
&lt;p&gt;当然，过滤器既可以拦截request，也可以拦截返回的response。&lt;/p&gt;</summary>
    
    
    
    
    <category term="问题" scheme="http://example.com/tags/%E9%97%AE%E9%A2%98/"/>
    
    <category term="Servlet" scheme="http://example.com/tags/Servlet/"/>
    
    <category term="过滤器" scheme="http://example.com/tags/%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot外置Tomcat问题</title>
    <link href="http://example.com/2020/03/06/SpringBoot%E5%A4%96%E7%BD%AETomcat%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2020/03/06/SpringBoot%E5%A4%96%E7%BD%AETomcat%E9%97%AE%E9%A2%98/</id>
    <published>2020-03-06T12:57:46.000Z</published>
    <updated>2021-02-22T16:02:04.407Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>SpringBoot作为一个快速应用开发框架，已经内置了Tomcat服务器，我们可以把服务打包成一个jar包来进行部署，但当我们有需求需要把服务打包成war包并且放置到第三方Tomcat服务器来提供服务器时，需要对SpringBoot进行外置Tomcat配置。</p><a id="more"></a><h2 id="1-排除内置tomcat"><a href="#1-排除内置tomcat" class="headerlink" title="1 排除内置tomcat"></a>1 排除内置tomcat</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-将打包方式更改为war"><a href="#2-将打包方式更改为war" class="headerlink" title="2 将打包方式更改为war"></a>2 将打包方式更改为war</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-修改启动类"><a href="#3-修改启动类" class="headerlink" title="3 修改启动类"></a>3 修改启动类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.继承SpringBootServletInitializer类</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 2.重写configure方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 3.返回</span></span><br><span class="line">        <span class="keyword">return</span> builder.sources(DemoApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-添加依赖"><a href="#4-添加依赖" class="headerlink" title="4 添加依赖"></a>4 添加依赖</h2><p>由于SpringBootServletInitializer类需要servlet-api相关jar包,所以需要添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 外置tomcat所需依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-配置外置Tomcat"><a href="#5-配置外置Tomcat" class="headerlink" title="5 配置外置Tomcat"></a>5 配置外置Tomcat</h2><p>过程省略,写一个控制器,通过外置tomcat访问看是否配置成功</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;SpringBoot作为一个快速应用开发框架，已经内置了Tomcat服务器，我们可以把服务打包成一个jar包来进行部署，但当我们有需求需要把服务打包成war包并且放置到第三方Tomcat服务器来提供服务器时，需要对SpringBoot进行外置Tomcat配置。&lt;/p&gt;</summary>
    
    
    
    
    <category term="问题" scheme="http://example.com/tags/%E9%97%AE%E9%A2%98/"/>
    
    <category term="SpringBoot" scheme="http://example.com/tags/SpringBoot/"/>
    
    <category term="Tomcat" scheme="http://example.com/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot框架学习笔记</title>
    <link href="http://example.com/2020/03/06/SpringBoot%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2020/03/06/SpringBoot%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-03-06T12:12:49.000Z</published>
    <updated>2021-02-22T16:26:05.449Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，Spring Boot致力于在蓬勃发展的快速应用开发领域(rapid application development)成为领导者。</p><a id="more"></a><h2 id="1-微服务阶段"><a href="#1-微服务阶段" class="headerlink" title="1 微服务阶段"></a>1 微服务阶段</h2><p>javase: OOP</p><p>mysql: 持久化</p><p>html+css+js+jquery+框架: 视图,框架不熟练,css不好</p><p>javaweb: 独立开发MVC三层架构的网站,原始</p><p>ssm: 框架,简化了我们的开发流程,配置也开始较为复杂</p><p>war: tomcat运行</p><p>spring再简化: SpringBoot-jar,内嵌tomcat,微服务架构!</p><p>服务越来越多: SpringCloud</p><h2 id="2-第一个SpringBoot程序"><a href="#2-第一个SpringBoot程序" class="headerlink" title="2 第一个SpringBoot程序"></a>2 第一个SpringBoot程序</h2><p>到底多么简单:</p><ul><li>Jdk 1.8</li><li>maven 3.6.1</li><li>Springboot 最新版</li><li>IDEA</li></ul><p>官方:提供了一个快速生成的网站!IDEA集成了这个网站!</p><ul><li>可以在官网下载后,导入IDEA开发</li><li>直接使用IDEA创建一个springboot项目(推荐)</li></ul><h2 id="3-原理初探"><a href="#3-原理初探" class="headerlink" title="3 原理初探"></a>3 原理初探</h2><p>自动配置:</p><p>pom.xml</p><ul><li>Spring-boot-dependencies: 核心依赖在父工程中!</li><li>我们在写或者引入一些springboot以来的时候,不需要指定版本,就因为有这些版本仓库</li></ul><p>2 启动器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>说白了就是springboot的启动场景</p></li><li><p>比如spring-boot-starter-web,他就会帮我们自动导入web环境所有的依赖!</p></li><li><p>springboot会将所有的功能场景,都变成一个个的启动器</p></li><li><p>我们要使用什么功能,就只需要找到对应的启动器就可以了</p></li></ul><p>3 主程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 程序的主入口</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span>  <span class="comment">// 标注这个类是一个SpringBoot的应用</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// SpringApplication</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 将SpringBoot应用启动</span></span><br><span class="line">        SpringApplication.run(SpringbootApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>注解</p><ul><li><p>@SpringBootConfiguration: springboot的配置</p><ul><li>@Configuration: spring配置类</li><li>@Component: 说明这也是一个spring的组件</li></ul></li><li><p>EnableAutoConfiguration: 自动配置</p><ul><li>@AutoConfigurationPackage: 自动配置包<ul><li>Import(AutoConfigurationPackages.Registrar.class): 自动配置包注册</li></ul></li><li>@Import(AutoConfigurationImportSelector.class): 自动配置导入选择</li></ul></li><li><p>获取所有的配置:</p><p>List<String> configurations = getCandidateConfigurations(annotationMetadata,attributes);</p></li><li><p>获取候选的配置:</p><p>protected List<String> getCandidateConfigurations(AnnotationMetadata metadata,AnnotationAttributes attributes) {</p><p>​    List<String> configurations = SpringFactoriesLoader.loadFactoryName(getSpringFactoriesLoaderFactoryClass(),getBeanClassLoader());</p><p>​    Assert.notEmpty(configurations, “No auto configuration classes found in META-INF/spring.factories. If you” + “are using a custom packaging, make sure that file is correct.”);</p><p>​    return configurations;</p><p>}</p></li><li><p>META-INF/spring.factories: 自动配置的核心文件</p></li><li><p>Properties properties = PropertiesLoaderUtils.loadProperties(resource);</p><p>所有资源加载到配置类中</p></li></ul></li><li><p>结论: springboot所有自动配置都是在启动的时候扫描并加载: spring.factories所有的自动配置类都在这里面,但是不一定生效,要判断条件是否成立,只要导入了对应的start,就有对应的启动器了,有了启动器,我们自动装配就会生效,然后就配置成功!</p></li></ul><p>1 springboot在启动的时候,从类路径下/META-INF/spring.factories获取指定的值</p><p>2 将这些自动配置的类导入容器,自动配置就会生效,帮我们进行自动配置!</p><p>3 以前我们需要自动配置的东西,现在springboot帮我们做了!</p><p>4 整合javaEE,解决方案和自动配置的东西都在spring-boot-autoconfigure-2.2.5.RELEASE.jar这个包下</p><p>5 他会把所有需要导入的组件,以类名的方式返回,这些组件就会被添加到容器</p><p>6 容器中也会存在非常多的xxxAutoConfiguration的文件(@Bean),就是这些类给容器中导入了这个场景需要的所有组件,并自动配置,@Configuration,javaConfig!</p><p>7 有了自动配置类,免去了我们手动编写配置文件的工作</p><p>JavaConfig    @Configuration    @Bean</p><p>关注SpringBoot,谈谈你的理解:</p><ul><li>自动装配</li><li>run()</li></ul><p>全面接管SpringMVC的配置!实操!</p><p>自动装配的原理:</p><p>1 SpringBoot启动会加载大量的自动配置类</p><p>2 我们看我们需要的功能有没有在SpringBoot默认写好的自动配置类当中</p><p>3 我们再来看这个自动配置类中到底配置了哪些组件(只要我们要用的组件存在其中,我们就不需要再手动配置了)</p><p>4 给容器中自动配置类添加组件的时候,会从properties类中获取某些属性,我们只需要在配置文件中指定这些属性的值即可</p><p>xxxxAutoConfiguration: 自动配置类,给容器中添加组件</p><p>xxxxProperties: 封装配置文件中相关属性</p><h2 id="4-SpringBoot-Web开发"><a href="#4-SpringBoot-Web开发" class="headerlink" title="4 SpringBoot Web开发"></a>4 SpringBoot Web开发</h2><p>jar: webapp</p><p>自动装配:</p><p>springboot到底帮我们配置了什么?我们能不能进行修改?能修改哪些东西?能不能拓展?</p><ul><li>xxxxAutoConfiguration: 向容器中自动配置组件</li><li>xxxxProperties: 自动配置类,装配配置文件中自定义的一些内容</li></ul><p>要解决的问题:</p><ul><li>导入静态资源</li><li>首页</li><li>Jsp, 模板引擎 ThyMeleaf</li><li>装配扩展SpringMVC</li><li>增删改查</li><li>拦截器</li><li>国际化!</li></ul><h3 id="4-1-静态资源"><a href="#4-1-静态资源" class="headerlink" title="4.1 静态资源"></a>4.1 静态资源</h3><p>1 在springboot中,我们可以使用以下方式处理静态资源</p><ul><li>webjars    <code>localhost://8080/wabjars/</code></li><li>public, static, /**, resources    <code>localhost:8080/</code></li></ul><p>2 优先级: resources &gt; static(默认) &gt; public</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，Spring Boot致力于在蓬勃发展的快速应用开发领域(rapid application development)成为领导者。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java技术栈" scheme="http://example.com/tags/Java%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    <category term="SpringBoot" scheme="http://example.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SSM框架整合学习笔记</title>
    <link href="http://example.com/2020/03/05/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2020/03/05/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-03-05T15:12:23.000Z</published>
    <updated>2021-02-22T15:54:21.827Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>什么是SSM框架?</p><ul><li>SpringMVC</li><li>Spring</li><li>Mybatis</li></ul><a id="more"></a><h2 id="1-环境配置"><a href="#1-环境配置" class="headerlink" title="1 环境配置"></a>1 环境配置</h2><p>1 使用IDEA集成开发软件新建Maven项目</p><p>2 导入SSM框架依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- SSM依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- junit单元测试 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据库驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.19<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Servlet库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- JSP库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- JSTL库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Mybatis框架 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring框架 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 偷懒: Lombok插件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3 配置静态资源导出</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 静态资源导出问题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4 在源文件目录下新建controller,service,pojo,mapper分层文件夹</p><h2 id="2-Mybatis层"><a href="#2-Mybatis层" class="headerlink" title="2 Mybatis层"></a>2 Mybatis层</h2><p>1 在resources目录下新建<code>mybatis-config.xml</code>配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Mybatis核心配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源,交给Spring去做 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.github.dairycode.ssm.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2 在resources目录下新建<code>database.properties</code>数据库配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="comment"># 如果使用的事Mysql8.0+,增加一个时区设置 &amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&amp;useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string"></span></span><br></pre></td></tr></table></figure><h2 id="3-Spring层"><a href="#3-Spring层" class="headerlink" title="3 Spring层"></a>3 Spring层</h2><p>1 在resources目录下新建<code>spring-mapper.xml</code>配置文件,通过Spring整合mapper层</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 1.关联数据库配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:database.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2.连接池</span></span><br><span class="line"><span class="comment">         dbcp: 半自动化操作,不能自动连接</span></span><br><span class="line"><span class="comment">         c3p0: 自动化操作 (自动化的加载配置文件,并且可以自动设置到对象中!)</span></span><br><span class="line"><span class="comment">         druid</span></span><br><span class="line"><span class="comment">         hikari</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- c3p0连接池的私有属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;30&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 关闭连接后不自动commit --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;autoCommitOnClose&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 获取连接超时时间 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;checkoutTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10000&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 当获取连接失败重试次数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;acquireRetryAttempts&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3.sqlSessionFactory --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置mapper接口扫描包,动态的实现了mapper接口可以注入到Spring容器中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入sqlSessionFactory --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 要扫描的mapper包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.github.dairycode.ssm.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2 在resources目录下新建<code>spring-service.xml</code>配置文件,通过Spring整合service层</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 1.扫描service下的包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.github.dairycode.ssm.service&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2.将我们的所有业务类,注入到Spring,可以通过配置,或者注解实现 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;BookServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.github.dairycode.ssm.service.impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookMapper&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3.声明式事务配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入数据源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 4.事务支持 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-SpringMVC层"><a href="#4-SpringMVC层" class="headerlink" title="4 SpringMVC层"></a>4 SpringMVC层</h2><p>1 在项目中增加web框架支持</p><p>2 在web文件夹中的WEB-INF文件夹下的<code>web.xml</code>文件中增加配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- DispatcherServlet --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 乱码过滤 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodeFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodeFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Session --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>15<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3 在resources目录下新建<code>spring-mvc.xml</code>配置文件,通过Spring整合controller层</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 1.注解驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2.静态资源过滤 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 3.扫描包: controller --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.github.dairycode.ssm.controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 4.视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4 在resources目录下新建<code>applicationContext.xml</code>配置文件,加入项目配置文件,把各层的Spring配置文件整合在一起</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;classpath:spring-mapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;classpath:spring-service.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;classpath:spring-mvc.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;什么是SSM框架?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SpringMVC&lt;/li&gt;
&lt;li&gt;Spring&lt;/li&gt;
&lt;li&gt;Mybatis&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="SSM" scheme="http://example.com/tags/SSM/"/>
    
    <category term="Java技术栈" scheme="http://example.com/tags/Java%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis框架学习笔记</title>
    <link href="http://example.com/2020/03/05/MyBatis%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2020/03/05/MyBatis%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-03-05T15:12:03.000Z</published>
    <updated>2021-02-22T15:52:39.287Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>MyBatis 本是apache的一个开源项目iBatis, 2010年这个项目由apache software foundation 迁移到了google code，并且改名为MyBatis 。2013年11月迁移到Github。</p><p>iBATIS一词来源于“internet”和“abatis”的组合，是一个基于Java的持久层框架。iBATIS提供的持久层框架包括SQL Maps和Data Access Objects（DAOs）</p><a id="more"></a><p>环境:</p><ul><li>JDK 1.8</li><li>Mysql 5.7</li><li>maven 3.6.1</li><li>IDEA</li></ul><p>回顾:</p><ul><li>JDBC</li><li>Mysql</li><li>Java基础</li><li>maven</li><li>junit</li></ul><p>SSM框架: 配置文件(看官网)</p><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h2><h3 id="1-1-什么是Mybatis"><a href="#1-1-什么是Mybatis" class="headerlink" title="1.1 什么是Mybatis"></a>1.1 什么是Mybatis</h3><ul><li>Mybatis是一款优秀的持久层框架</li><li>它支持定制化SQL,存储过程以及高级映射</li><li>Mybatis避免了几乎所有的JDBC代码和手动设置参数以及获取结果集</li><li>MyBatis可以使用简单的XML或注解来配置和映射原生类型,接口和Java的POJO(Plain Old Java Objects, 普通老式Java对象)为数据库中的记录</li><li>2013年11月迁移到Github</li></ul><p>如何获取Mybatis?</p><ul><li>maven仓库</li><li>Github仓库</li></ul><h3 id="1-2-持久化"><a href="#1-2-持久化" class="headerlink" title="1.2 持久化"></a>1.2 持久化</h3><p>数据持久化</p><ul><li>持久化就是将程序的数据在持久状态和瞬时状态转化的过程</li><li>内存: 断点即失</li><li>数据库(jdbc),io文件持久化</li></ul><p>为什么需要持久化?</p><ul><li><p>有一些对象,不能让他丢掉</p></li><li><p>内存太贵了</p></li></ul><h3 id="1-3-持久层"><a href="#1-3-持久层" class="headerlink" title="1.3 持久层"></a>1.3 持久层</h3><p>Dao层, Service层, Controller层…</p><ul><li>完成持久化工作的代码块</li><li>层界限十分明显</li></ul><h3 id="1-4-为什么需要Mybatis"><a href="#1-4-为什么需要Mybatis" class="headerlink" title="1.4 为什么需要Mybatis"></a>1.4 为什么需要Mybatis</h3><ul><li>方便</li><li>帮助程序员将数据存入到数据库中</li><li>传统的JDBC代码太复杂了,简化,框架,自动化</li><li>不用Mybatis也可以,更容易上手</li><li>优点:<ul><li>简单易学</li><li>灵活</li><li>sql和代码的分离,提高了可维护性</li><li>提供映射标签,支持对象与数据库的ORM字段关系映射</li><li>提供对象关系映射标签,支持对象关系组建维护</li><li>提供xml标签,支持编写动态sql</li></ul></li></ul><h2 id="2-第一个Mybatis程序"><a href="#2-第一个Mybatis程序" class="headerlink" title="2 第一个Mybatis程序"></a>2 第一个Mybatis程序</h2><p>思路: 搭建环境 –&gt; 导入Mybatis –&gt; 编写代码 –&gt; 测试</p><h3 id="2-1-搭建环境"><a href="#2-1-搭建环境" class="headerlink" title="2.1 搭建环境"></a>2.1 搭建环境</h3><p>搭建数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">create database mybatis;</span><br><span class="line"></span><br><span class="line">use mybatis;</span><br><span class="line"></span><br><span class="line">create table user(</span><br><span class="line">id int(20) not null primary key,</span><br><span class="line">name varchar(30) default null,</span><br><span class="line">pwd varchar(30) default null</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">insert into user(id,name,pwd)values</span><br><span class="line">(1,&#39;张三&#39;,&#39;123&#39;),</span><br><span class="line">(2,&#39;李四&#39;,&#39;456&#39;),</span><br><span class="line">(3,&#39;赵五&#39;,&#39;789&#39;);</span><br></pre></td></tr></table></figure><p>新建项目</p><p>1 新建一个普通的maven项目</p><p>2 删除src目录</p><p>3 导入maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- jdbc连接mysql驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- mybatis框架 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- junit单元测试 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-创建一个模块"><a href="#2-2-创建一个模块" class="headerlink" title="2.2 创建一个模块"></a>2.2 创建一个模块</h3><ul><li><p>编写mybatis的核心配置文件mybatis-config.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- configuration核心配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 每一个Mapper.xml都需要在Mybatis核心配置文件中注册! --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/github/dairycode/mybatis/dao/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写Mybatis工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SqlSessionFactory --&gt; SqlSession</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 使用Mybatis第一步: 获取SqlSessionFactory对象</span></span><br><span class="line">            String resource = <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// SqlSession完全包含了面向数据库执行SQL命令所需的所有方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-编写代码"><a href="#2-3-编写代码" class="headerlink" title="2.3 编写代码"></a>2.3 编写代码</h3></li><li><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> id, String name, String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPwd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPwd</span><span class="params">(String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, pwd=&#x27;&quot;</span> + pwd + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Dao接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>接口实现类由原来的UserDaoImpl转变为一个Mapper配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- namespace=绑定一个对应的Dao/Mapper接口 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.github.dairycode.mybatis.dao.UserDao&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- select --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.github.dairycode.mybatis.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-测试"><a href="#2-4-测试" class="headerlink" title="2.4 测试"></a>2.4 测试</h3></li></ul><p>注意点: </p><p>org.apache.ibatis.binding.BindingException: Type interface com.github.dairycode.mybatis.dao.UserDao is not known to the MapperRegistry.</p><p>MapperRegistry是什么?</p><p>核心配置文件中注册mappers</p><ul><li><p>junit测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第一步: 获取SqlSession对象</span></span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方式一: getMapper</span></span><br><span class="line">        UserDao userDao = sqlSession.getMapper(UserDao.class);</span><br><span class="line">        List&lt;User&gt; userList = userDao.getUserList();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭SqlSession</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可能会遇到的错误:</p></li><li><p>配置文件没有注册</p></li><li><p>绑定接口错误</p></li><li><p>方法名不对</p></li><li><p>返回类型不对</p></li><li><p>maven导出资源问题</p></li></ul><h2 id="3-CRUD"><a href="#3-CRUD" class="headerlink" title="3 CRUD"></a>3 CRUD</h2><h3 id="3-1-namespace"><a href="#3-1-namespace" class="headerlink" title="3.1 namespace"></a>3.1 namespace</h3><p>namespace中的包名要和Dao/Mapper接口的包名一致!</p><h3 id="3-2-select"><a href="#3-2-select" class="headerlink" title="3.2 select"></a>3.2 select</h3><p>选择,查询语句</p><ul><li>id: 就是对应的namespace中的方法名</li><li>resultType: sql语句执行的返回值</li><li>parameterType: 参数类型!</li></ul><p>1 编写接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 根据ID查询用户</span></span><br><span class="line">    <span class="function">User <span class="title">getUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2 编写对应的mapper中的sql语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.github.dairycode.mybatis.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3 测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">    User user = mapper.getUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-insert"><a href="#3-3-insert" class="headerlink" title="3.3 insert"></a>3.3 insert</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.github.dairycode.mybatis.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    insert into mybatis.user (id, name, pwd) values (#&#123;id&#125;, #&#123;name&#125;, #&#123;pwd&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-4-update"><a href="#3-4-update" class="headerlink" title="3.4 update"></a>3.4 update</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.github.dairycode.mybatis.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    update mybatis.user set name = #&#123;name&#125;, pwd = #&#123;pwd&#125; where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-5-delete"><a href="#3-5-delete" class="headerlink" title="3.5 delete"></a>3.5 delete</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">    delete from mybatis.user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意点:</p><ul><li>增删改需要提交事务</li></ul><h3 id="3-6-万能Map"><a href="#3-6-万能Map" class="headerlink" title="3.6 万能Map"></a>3.6 万能Map</h3><p>假设我们的实体类或者数据库中的表,字段或者参数过多,我们应当考虑使用Map!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 万能的Map</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(Map&lt;String, Object&gt; map)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 对象中的属性,可以直接读取出来,传递map的key --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    insert into mybatis.user (id, pwd) values (#&#123;userId&#125;, #&#123;password&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">    Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">    </span><br><span class="line">    map.put(<span class="string">&quot;userId&quot;</span>, <span class="number">5</span>);</span><br><span class="line">    map.put(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;233&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    mapper.addUser(map);</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Map传递参数,直接在sql中取出key即可!        [parameterType=”map”]</p><p>对象传递参数,直接在sql中取对象的属性即可!    [parameterType=”Object”]</p><p>只有一个基本类型参数的情况下,可以直接在sql取到!</p><p>多个参数用Map,或者注解!</p><h3 id="3-7-模糊查询"><a href="#3-7-模糊查询" class="headerlink" title="3.7 模糊查询"></a>3.7 模糊查询</h3><p>1 Java代码执行的时候,传递通配符% %</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; userList = mapper.getUserLike(%李%);</span><br></pre></td></tr></table></figure><p>2 在sql拼接中使用通配符!</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from mybatis.user where name like &quot;%&quot;#&#123;value&#125;&quot;%&quot;</span><br></pre></td></tr></table></figure><h2 id="4-配置解析"><a href="#4-配置解析" class="headerlink" title="4 配置解析"></a>4 配置解析</h2><h3 id="4-1-核心配置文件"><a href="#4-1-核心配置文件" class="headerlink" title="4.1 核心配置文件"></a>4.1 核心配置文件</h3><ul><li><p>Mybatis-config.xml</p></li><li><p>MyBatis的配置文件包含了会深深影响MyBatis行为的设置和属性信息,配置文档的顶层结构如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">configuration(配置)</span><br><span class="line">properties(属性)</span><br><span class="line">settings(设置)</span><br><span class="line">typeAliases(类型别名)</span><br><span class="line">typeHandlers(类型处理器)</span><br><span class="line">objectFactory(对象工厂)</span><br><span class="line">plugins(插件)</span><br><span class="line">environments(环境配置)</span><br><span class="line">environment(环境变量)</span><br><span class="line">transactionManager(事务管理器)</span><br><span class="line">dataSource(数据源)</span><br><span class="line">databaseIdProvider(数据库厂商标识)</span><br><span class="line">mappers(映射器)</span><br></pre></td></tr></table></figure><h3 id="4-2-环境配置-environment"><a href="#4-2-环境配置-environment" class="headerlink" title="4.2 环境配置(environment)"></a>4.2 环境配置(environment)</h3></li></ul><p>Mybatis可以配置成适应多种环境</p><p>不过要记住,尽管可以配置多个环境,但每个SqlSessionFactory实例只能选择一种环境</p><p>要学会使用配置多套运行环境!</p><p>Mybatis默认的事务管理器就是JDBC,连接池: POOLED</p><h3 id="4-3-属性-properties"><a href="#4-3-属性-properties" class="headerlink" title="4.3 属性(properties)"></a>4.3 属性(properties)</h3><p>我们可以通过properties属性来实现引用配置文件</p><p>这些属性都是可外部配置且可动态替换的,既可以在典型的Java属性文件中配置,亦可通过properties元素的子元素来传递[db.properties]</p><p>编写一个配置文件: db.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=UTF-8</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string"></span></span><br></pre></td></tr></table></figure><p>在核心配置文件在引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入外部配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;usename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>可以直接引入外部文件</li><li>可以在其中增加一些配置属性</li><li>如果两个文件有同一个字段,优先使用外部配置文件的!</li></ul><h3 id="4-4-类型别名"><a href="#4-4-类型别名" class="headerlink" title="4.4 类型别名"></a>4.4 类型别名</h3><ul><li>类型别名是为Java类型设置一个短的名字</li><li>存在的意义仅在于用来减少类完全限定名的冗余</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 可以给实体类起别名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.github.dairycode.mybatis.pojo.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;User&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以指定一个包名,Mybatis会在包名下面搜索需要的Java Bean,比如:</p><p>扫描实体类的包,它的默认别名就为这个类的类名,首字母小写!</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.github.dairycode.mybatis.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在实体类比较少的时候,使用第一种方式</p><p>如果实体类十分多,建议使用第二种</p><p>第一中可以DIY别名,第二种不行,如果非要改,需要在实体类上增加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Alias(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="4-5-设置"><a href="#4-5-设置" class="headerlink" title="4.5 设置"></a>4.5 设置</h3><p>这是Mybatis中极为重要的调整设置,它们会改变Mybatis的运行时行为</p><ul><li>cacheEnabled</li><li>lazyLoadingEnabled</li><li>logImpl</li></ul><h3 id="4-6-其他配置"><a href="#4-6-其他配置" class="headerlink" title="4.6 其他配置"></a>4.6 其他配置</h3><ul><li>typeHandlers (类型处理器)</li><li>objectFactory (对象工程)</li><li>Plugins (插件)<ul><li>Mybatis-generator-core</li><li>Mybatis-plus</li><li>通用mapper</li></ul></li></ul><h3 id="4-7-映射器-mappers"><a href="#4-7-映射器-mappers" class="headerlink" title="4.7 映射器(mappers)"></a>4.7 映射器(mappers)</h3><p>MapperRegistry: 注册绑定我们的Mapper文件;</p><p>方式一: [推荐使用]</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 每一个Mapper.xml都需要在Mybatis核心配置文件中注册! --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/github/dairycode/mybatis/dao/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方式二: 使用class文件绑定注册</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.github.dairycode.mybatis.dao.UserMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意点:</p><ul><li>接口和他的Mapper配置文件必须同名</li><li>接口和他的Mapper配置文件必须在同一个包下</li></ul><p>方式三: 使用扫描包进行诸如绑定</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com/github/dairycode/mybatis/dao&quot;</span>/&gt;</span> --&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意点:</p><ul><li>接口和他的Mapper配置文件必须同名</li><li>接口和他的Mapper配置文件必须在同一个包下</li></ul><h3 id="4-8-生命周期和作用域"><a href="#4-8-生命周期和作用域" class="headerlink" title="4.8 生命周期和作用域"></a>4.8 生命周期和作用域</h3><p>生命周期和作用域是至关重要的,因为错误的使用会导致非常严重的并发问题</p><p>SqlSessionFactoryBuilder:</p><ul><li>一旦创建了SqlSessionFactory,就不再需要它了</li><li>局部变量</li></ul><p>SqlSessionFactory:</p><ul><li>说白了就可以想象为: 数据库连接池</li><li>SqlSessionFactory一旦被创建就应该在应用的运行期间一直存在,没有任何理由丢弃它或重新创建另一个实例</li><li>因此SqlSessionFactory的最佳作用域是应用作用域</li><li>最简单的就是使用单例模式或者静态单例模式</li></ul><p>SqlSession</p><ul><li>连接到连接池的一个请求!</li><li>SqlSession的实例不是线程安全的,因此是不能被共享的,所以它的最佳的作用域是请求或方法作用域</li><li>用完之后需要赶紧关闭,否则资源被占用!</li><li>SqlSession包含多个Mapper,每一个Mapper代表一个业务</li></ul><h2 id="5-解决属性名和字段名不一致的问题"><a href="#5-解决属性名和字段名不一致的问题" class="headerlink" title="5 解决属性名和字段名不一致的问题"></a>5 解决属性名和字段名不一致的问题</h2><h3 id="5-1-问题"><a href="#5-1-问题" class="headerlink" title="5.1 问题"></a>5.1 问题</h3><p>数据库中的字段: id,name,pwd</p><p>新建一个项目,拷贝之前的,实体类属性为: id,name,password,测试实体类字段不一致的情况</p><p>测试出现问题!</p><p>解决方法:</p><ul><li><p>起别名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select id, name, pwd as password from mybatis.user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-2-resultMap"><a href="#5-2-resultMap" class="headerlink" title="5.2 resultMap"></a>5.2 resultMap</h3></li></ul><p>结果集映射</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id name pwd</span><br><span class="line">id name password</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 结果集映射 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- column数据库中的字段,property实体类中的属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>resultMap元素是Mybatis中最重要最强大的元素</li><li>resultMap的设计思想是,对于简单的语句根本不需要配置显式的结果映射,而对于复杂一点的语句只需要描述它们的关系就行了</li><li>resultMap最优秀的地方在于,虽然你已经对它相当了解了,但是根本就不需要显式地用到他们</li><li>如果世界总是这么简单就好了</li></ul><h2 id="6日志"><a href="#6日志" class="headerlink" title="6日志"></a>6日志</h2><h3 id="6-1-日志工厂"><a href="#6-1-日志工厂" class="headerlink" title="6.1 日志工厂"></a>6.1 日志工厂</h3><p>如果一个数据库操作出现异常,我们需要排错,日志就是最好的助手!</p><p>曾经: sout, debug</p><p>现在: 日志工厂</p><ul><li>SLF4J</li><li>LOG4J [掌握]</li><li>LOG4J2</li><li>JDK LOGGING</li><li>COMMONS_LOGGING</li><li>STDOUT_LOGGING [掌握]</li><li>NO_LOGGING</li></ul><p>在Mybatis中具体使用哪一个日志实现,在设置中设定!</p><p>STDOUT_LOGGING标准日志输出</p><p>在Mybatis核心配置文件中配置我们的日志</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 标准的日志工厂实现 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-2-Log4j"><a href="#6-2-Log4j" class="headerlink" title="6.2 Log4j"></a>6.2 Log4j</h3><p>什么事Log4j?</p><ul><li>Log4j是Apache的一个开源项目,通过使用Log4j,我们可以控制日志信息输送的目的地是控制台,文件,GUI组件</li><li>我们也可以控制每一条日志的输出格式</li><li>通过定义每一条日志信息的级别,我们能够更加细致地控制日志的生成过程</li><li>通过一个配置文件来灵活地进行配置,而不需要修改应用的代码</li></ul><p>1 先导入log4j的包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- log4j日志 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2 log4j.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将等级为DEBUG的日志信息输出到console和file这两个目的地,console和file的定义在下面的代码</span></span><br><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG,console,file</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 控制台输出的相关设置</span></span><br><span class="line"><span class="meta">log4j.appender.console</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.console.Target</span>=<span class="string">System.out</span></span><br><span class="line"><span class="meta">log4j.appender.console.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout.ConversionPattern</span>=<span class="string">[%c]-%m%n</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件输出的相关设置</span></span><br><span class="line"><span class="meta">log4j.appender.file</span>=<span class="string">org.apache.log4j.RollingFileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.file.File</span>=<span class="string">./log/log4j.log</span></span><br><span class="line"><span class="meta">log4j.appender.file.MaxFileSize</span>=<span class="string">10mb</span></span><br><span class="line"><span class="meta">log4j.appender.file.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout.ConversionPattern</span>=<span class="string">[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志输出级别</span></span><br><span class="line"><span class="meta">log4j.logger.org.mybatis</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.Statement</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.ResultSet</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.PreparedStatement</span>=<span class="string">DEBUG</span></span><br></pre></td></tr></table></figure><p>3 配置log4j为日志的实现</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LOG4J&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4 log4j的使用 - 直接测试运行刚才的查询</p><h3 id="6-3-简单使用Log4j包"><a href="#6-3-简单使用Log4j包" class="headerlink" title="6.3 简单使用Log4j包"></a>6.3 简单使用Log4j包</h3><p>1 再要使用Log4j的类中,导入包: import org.apache.log4j.Logger;</p><p>2 日志对象,参数为当前类的class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> Logger logger = Logger.getLogger(UserMapperTest.class);</span><br></pre></td></tr></table></figure><p>3 日志级别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">logger.info(<span class="string">&quot;info: 进入了testLog4j&quot;</span>);</span><br><span class="line">logger.debug(<span class="string">&quot;debug: 进入了testLog4j&quot;</span>);</span><br><span class="line">logger.error(<span class="string">&quot;error: 进入了testLog4j&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="7-分页"><a href="#7-分页" class="headerlink" title="7 分页"></a>7 分页</h2><h3 id="7-1-为什么要分页"><a href="#7-1-为什么要分页" class="headerlink" title="7.1 为什么要分页?"></a>7.1 为什么要分页?</h3><ul><li>减少数据的处理量</li></ul><p>使用Limit分页语法:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> limit startIndex,pageSize;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> limit <span class="number">3</span>;#[<span class="number">0</span>,n]</span><br></pre></td></tr></table></figure><p>使用Mybatis实现分页,核心SQL</p><p>1 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分页</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUserByLimit</span><span class="params">(Map&lt;String, Integer&gt; map)</span></span>;</span><br></pre></td></tr></table></figure><p>2 Mapper.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 分页 --&gt;</span><br><span class="line">&lt;select id&#x3D;&quot;getUserByLimit&quot; parameterType&#x3D;&quot;map&quot; resultMap&#x3D;&quot;UserMap&quot;&gt;</span><br><span class="line">    select * from mybatis.user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure><p>3 测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserByLimit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">    HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;startIndex&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    map.put(<span class="string">&quot;pageSize&quot;</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; userList = mapper.getUserByLimit(map);</span><br><span class="line">    <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-RowBounds分页"><a href="#7-2-RowBounds分页" class="headerlink" title="7.2 RowBounds分页"></a>7.2 RowBounds分页</h3><p>不再使用SQL实现分页</p><p>1 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分页</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUserByRowBounds</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>2 mapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByRowBounds&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3 测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserByRowBounds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// RowBounds实现</span></span><br><span class="line">    RowBounds rowBounds = <span class="keyword">new</span> RowBounds(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过Java代码层面实现分页</span></span><br><span class="line">    List&lt;User&gt; userList = sqlSession.selectList(<span class="string">&quot;com.github.dairycode.mybatis.dao.UserMapper.getUserByRowBounds&quot;</span>, <span class="keyword">null</span>, rowBounds);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-3-分页插件"><a href="#7-3-分页插件" class="headerlink" title="7.3 分页插件"></a>7.3 分页插件</h3><p>Mybatis分页插件PageHelper</p><p>了解即可,万一以后公司的架构师说要使用,你需要知道它是什么东西!</p><h2 id="8-使用注解开发"><a href="#8-使用注解开发" class="headerlink" title="8 使用注解开发"></a>8 使用注解开发</h2><h3 id="8-1-面向接口编程"><a href="#8-1-面向接口编程" class="headerlink" title="8.1 面向接口编程"></a>8.1 面向接口编程</h3><p>解耦</p><h3 id="8-2-使用注解开发"><a href="#8-2-使用注解开发" class="headerlink" title="8.2 使用注解开发"></a>8.2 使用注解开发</h3><p>1 注解在接口上实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>2 需要在核心配置文件中绑定接口</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 绑定接口 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.github.dairycode.mybatis.dao.UserMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3 测试</p><p>本质: 反射机制实现</p><p>底层: 动态代理</p><p>Mybatis详细的执行流程!</p><ul><li>Resources获取加载全局配置文件</li><li>实例化SqlSessionFactoryBuilder构造器</li><li>解析配置文件流XMLConfigBuilder</li><li>Configuration所以的配置信息</li><li>SqlSessionFactory实例化</li><li>transaction事务管理</li><li>创建executor执行器</li><li>创建sqlSession</li><li>实现CRUD</li><li>查看是否执行成功(成功即提交事务并关闭,失败的话回滚到transaction事务管理)</li></ul><h3 id="8-3-CRUD"><a href="#8-3-CRUD" class="headerlink" title="8.3 CRUD"></a>8.3 CRUD</h3><p>我们可以在工具类创建的时候实现自动提交事务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写接口,增加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法存在多个参数,所有的参数前面必须加上@Param(&quot;&quot;)注解</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">User <span class="title">getUserByID</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into user (id, name, pwd) values (#&#123;id&#125;, #&#123;name&#125;, #&#123;pwd&#125;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update user set name = #&#123;name&#125;, pwd = #&#123;pwd&#125; where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类测试 [注意: 我们必须要将接口注册绑定到我们的核心配置文件中]</p><p>关于@Param()注解</p><ul><li>基本类型的参数或者String类型,需要加上</li><li>引用类型不需要加</li><li>如果只有一个基本类型的话,可以忽略,但是建议大家都加上!</li><li>我们在SQL中引用的就是我们这里的@Param()中设定的属性名!</li></ul><p>#{} ${}区别: PreparedStatement和Statement的区别</p><h3 id="Lombok"><a href="#Lombok" class="headerlink" title="Lombok"></a>Lombok</h3><ul><li>java library</li><li>plugs</li><li>build tools</li><li>with one annotation your class</li></ul><p>使用步骤:</p><p>1 在IDEA中安装Lombok插件</p><p>2 在项目中导入lombok的jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- lombok包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3 在实体类上加注解即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br></pre></td></tr></table></figure><p>说明:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Data: 无参构造, get, set, toString, hashCode, equals</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">@EqualsAndHashCode</span><br><span class="line">@ToString</span><br></pre></td></tr></table></figure><h2 id="10-多对一处理"><a href="#10-多对一处理" class="headerlink" title="10 多对一处理"></a>10 多对一处理</h2><p>多对一:</p><ul><li>多个学生,对应一个老师</li><li>对于学生这边而言,[关联..]多个学生,关联一个老师 [多对一]</li><li>对于老师而言,[集合..]一个老师,有很多学生 [一对多]</li></ul><p>SQL:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> teacher(</span><br><span class="line">  id <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span>,</span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> teacher(id,name)<span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;M老师&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student(</span><br><span class="line">  id <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span>,</span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  tid <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  KEY fktid (tid),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> fktid <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (tid) <span class="keyword">REFERENCES</span> teacher(id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student(id,name,tid)<span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;小明&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student(id,name,tid)<span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">&#x27;小红&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student(id,name,tid)<span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="string">&#x27;小张&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student(id,name,tid)<span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="string">&#x27;小李&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student(id,name,tid)<span class="keyword">VALUES</span>(<span class="number">5</span>,<span class="string">&#x27;小王&#x27;</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h3 id="10-1-测试环境搭建"><a href="#10-1-测试环境搭建" class="headerlink" title="10.1 测试环境搭建"></a>10.1 测试环境搭建</h3><p>1 导入lombok</p><p>2 新建实体类Teacher, Student</p><p>3 建立Mapper接口</p><p>4 建立Mapper.xml文件</p><p>5 在核心配置文件中绑定注册我们的Mapper接口或者文件 [方式很多,随心选]</p><p>6 测试查询是否能够成功!</p><h3 id="10-2-按照查询嵌套处理"><a href="#10-2-按照查询嵌套处理" class="headerlink" title="10.2 按照查询嵌套处理"></a>10.2 按照查询嵌套处理</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 思路:</span></span><br><span class="line"><span class="comment">         1.查询所有的学生信息</span></span><br><span class="line"><span class="comment">         2.根据查询出来的学生的tid,寻找对应的老师! - 子查询</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudent&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentTeacher&quot;</span>&gt;</span></span><br><span class="line">    select * from student</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeacher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 复杂的属性,我们需要单独处理</span></span><br><span class="line"><span class="comment">         对象: association</span></span><br><span class="line"><span class="comment">         集合: collection</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Teacher&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getTeacher&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">    select * from teacher where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="10-3-按照结果嵌套处理"><a href="#10-3-按照结果嵌套处理" class="headerlink" title="10.3 按照结果嵌套处理"></a>10.3 按照结果嵌套处理</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 按照结果嵌套处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudent2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentTeacher2&quot;</span>&gt;</span></span><br><span class="line">    select s.id sid, s.tid tid, s.name sname, t.name tname</span><br><span class="line">    from student s, teacher t</span><br><span class="line">    where s.tid = t.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeacher2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p>回顾Mysql多对一查询方式:</p><ul><li>子查询</li><li>联表查询</li></ul><h2 id="11-一对多处理"><a href="#11-一对多处理" class="headerlink" title="11 一对多处理"></a>11 一对多处理</h2><p>比如: 一个老师拥有多个学生!</p><p>对于老师而言,就是一对多的关系!</p><h3 id="11-1-测试环境搭建"><a href="#11-1-测试环境搭建" class="headerlink" title="11.1 测试环境搭建"></a>11.1 测试环境搭建</h3><p>实体类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一个老师拥有多个学生</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; students;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-2-按照结果嵌套处理"><a href="#11-2-按照结果嵌套处理" class="headerlink" title="11.2 按照结果嵌套处理"></a>11.2 按照结果嵌套处理</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 按结果嵌套查询 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacherByID1&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TeacherStudent1&quot;</span>&gt;</span></span><br><span class="line">    select s.id sid, s.name sname, t.name tname, t.id tid</span><br><span class="line">    from student s, teacher t</span><br><span class="line">    where s.tid = t.id and t.id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;TeacherStudent1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 集合 javaType指定属性的类型 集合中的泛型信息,我们使用ofType获取 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="11-3-按照查询嵌套处理"><a href="#11-3-按照查询嵌套处理" class="headerlink" title="11.3 按照查询嵌套处理"></a>11.3 按照查询嵌套处理</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacherByID2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TeacherStudent2&quot;</span>&gt;</span></span><br><span class="line">    select * from teacher where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;TeacherStudent2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;ArrayList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getStudentByTeacherID&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentByTeacherID&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    select * from student where tid = #&#123;tid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>1 关联 - association [多对一]</p><p>2 集合 - collection [一对多]</p><p>3 javaType &amp; ofType</p><ul><li>javaType用来指定实体类中属性的类型</li><li>ofType用来指定映射到List或者集合中的pojo类型,泛型中的约束类型</li></ul><p>注意点:</p><ul><li>保证SQL的可读性,尽量保证通俗易懂</li><li>注意一对多和多对一中,属性名和字段的问题</li><li>如果问题不好排查错误,可以使用日志,建议使用Log4j</li></ul><h2 id="12-动态SQL"><a href="#12-动态SQL" class="headerlink" title="12 动态SQL"></a>12 动态SQL</h2><p>什么是动态SQL: 动态SQL就是指根据不同的条件生成不同的SQL语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">动态SQL元素和JSTL或基于类似XML的文本处理器相似,在Mybatis之前的版本中,有很多元素需要花时间了解,Mybatis3大大精简了元素种类,现在只需要学习原来一半的元素便可,Mybatis采用功能强大的基于OGNL的表达式来淘汰其它大部分元素</span><br><span class="line"></span><br><span class="line">if</span><br><span class="line">choose(when, otherwise)</span><br><span class="line">trim(where, set)</span><br><span class="line">foreach</span><br></pre></td></tr></table></figure><h3 id="12-1-搭建环境"><a href="#12-1-搭建环境" class="headerlink" title="12.1 搭建环境"></a>12.1 搭建环境</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> blog(</span><br><span class="line">  id <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;博客id&#x27;</span>,</span><br><span class="line">  title <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;博客标题&#x27;</span>,</span><br><span class="line">  author <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;博客作者&#x27;</span>,</span><br><span class="line">  create_time datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  views <span class="type">int</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;浏览器&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>创建一个基础工程</p><p>1 导包</p><p>2 编写配置文件</p><p>3 编写实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> view;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4 编写实体类对应Mapper接口和Mapper.xml文件</p><h3 id="12-2-If"><a href="#12-2-If" class="headerlink" title="12.2 If"></a>12.2 If</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogIF&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    select * from blog where 1=1</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">        and title = #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">        and author = #&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="12-3-Choose-when-otherwise"><a href="#12-3-Choose-when-otherwise" class="headerlink" title="12.3 Choose (when, otherwise)"></a>12.3 Choose (when, otherwise)</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogChoose&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    select * from blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">                title = #&#123;title&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">                author = #&#123;author&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                views = #&#123;views&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="12-4-Trim-where-set"><a href="#12-4-Trim-where-set" class="headerlink" title="12.4 Trim (where, set)"></a>12.4 Trim (where, set)</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogIF&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    select * from blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">            title = #&#123;title&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">            and author = #&#123;author&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBlog&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    update blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">            title = #&#123;title&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">            author = #&#123;author&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>所谓的动态SQL,本质还是SQL语句,只是我们可以在SQL层面,去执行一个逻辑代码!</p><h3 id="12-5-SQL片段"><a href="#12-5-SQL片段" class="headerlink" title="12.5 SQL片段"></a>12.5 SQL片段</h3><p>有的时候,我们可能会将一些功能的部分抽取出来,方便复用!</p><p>1 使用SQL标签抽取公共的部分</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;if-title-author&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">        title = #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">        and author = #&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2 在需要使用的地方使用include标签引用即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogIF&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    select * from blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;if-title-author&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意事项:</p><ul><li>最好基于单表来定义SQL片段!</li><li>不要存在where标签</li></ul><h3 id="12-6-Foreach"><a href="#12-6-Foreach" class="headerlink" title="12.6 Foreach"></a>12.6 Foreach</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&lt;</span>foreach item<span class="operator">=</span>&quot;id&quot; collection<span class="operator">=</span>&quot;ids&quot; <span class="keyword">open</span><span class="operator">=</span>&quot;(&quot; separator<span class="operator">=</span>&quot;or&quot; <span class="keyword">close</span><span class="operator">=</span>&quot;)&quot;<span class="operator">&gt;</span></span><br><span class="line">    #&#123;id&#125;</span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>foreach<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line">(id<span class="operator">=</span><span class="number">1</span> <span class="keyword">or</span> id<span class="operator">=</span><span class="number">2</span> <span class="keyword">or</span> id<span class="operator">=</span><span class="number">3</span>)</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogForeach&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    select * from blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">open</span>=<span class="string">&quot;and (&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;or&quot;</span>&gt;</span></span><br><span class="line">            id = #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>动态SQL就是在拼接SQL语句,我们只要保证SQL的正确性,按照SQL的格式,去排列组合就可以了!</p><p>建议:</p><ul><li>先在Mysql中写出完整的SQL语句,再对应的去修改成我们的动态SQL实现通用即可</li></ul><h2 id="13-缓存"><a href="#13-缓存" class="headerlink" title="13 缓存"></a>13 缓存</h2><h3 id="13-1-简介"><a href="#13-1-简介" class="headerlink" title="13.1 简介"></a>13.1 简介</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">查询: 连接数据库, 耗资源!</span><br><span class="line">一次查询的结果,给他暂存在一个可以直接取到的地方 --&gt; 内存: 缓存</span><br><span class="line"></span><br><span class="line">我们再次查询相同数据的时候,直接走缓存,就不用走数据库了</span><br></pre></td></tr></table></figure><p>1 什么是缓存[Cache]?</p><ul><li>存在内存中的临时数据</li><li>将用户经常查询的数据放在缓存(内存)中,用户去查询数据就不用从磁盘上(关系型数据库数据文件)查询,从缓存中查询,从而提高查询效率,解决了高并发系统的性能问题</li></ul><p>2 为什么使用缓存?</p><ul><li>减少和数据库的交互次数,减少系统开销,提高系统效率</li></ul><p>3 什么样的数据能使用缓存?</p><ul><li>经常查询并且不经常改变的数据</li></ul><h3 id="13-2-Mybatis缓存"><a href="#13-2-Mybatis缓存" class="headerlink" title="13.2 Mybatis缓存"></a>13.2 Mybatis缓存</h3><p>Mybatis包含一个非常强大的查询缓存特性,他可以非常方便地定制和配置缓存,缓存可以极大地提升查询效率</p><p>Mybatis系统中默认定义了两级缓存: 一级缓存和二级缓存</p><ul><li>默认情况下,只有一级缓存开启 [SqlSession级别的缓存,也成为本地缓存]</li><li>二级缓存需要手动开启和配置,也是基于namespace级别的缓存</li><li>为了提高扩展性,Mybatis定义了缓存接口Cache,我们可以通过实现Cache接口来自定义二级缓存</li></ul><h3 id="13-3-一级缓存"><a href="#13-3-一级缓存" class="headerlink" title="13.3 一级缓存"></a>13.3 一级缓存</h3><p>一级缓存也叫本地缓存:</p><ul><li>与数据库同一次会话期间查询到的数据会放在本地缓存中</li><li>以后如果需要获取相同的数据,直接从缓存中拿,没必要再去查询数据库</li></ul><p>测试步骤:</p><p>1 开启日志</p><p>2 测试在一个Session中查询两次相同记录</p><p>缓存失效的情况:</p><p>1 查询不同的东西</p><p>2 增删改操作,可能会改变原来的数据,所以必定会刷新缓存</p><p>3 查询不同的Mapper.xml</p><p>4 手动清理缓存</p><p>小结: 一级缓存默认是开启的,只在一次SqlSession中有效,也就是拿到连接到关闭连接这个区间</p><p>一级缓存就是一个map</p><h3 id="13-4-二级缓存"><a href="#13-4-二级缓存" class="headerlink" title="13.4 二级缓存"></a>13.4 二级缓存</h3><p>二级缓存也叫全局缓存,一级缓存作用域太低了,所以诞生了二级缓存</p><p>基于namespace级别的缓存,一个名称空间,对应一个二级缓存</p><p>工作机制</p><ul><li>一个会话查询一条数据,这个数据就会被放在当前会话的一级缓存中</li><li>如果当前会话关闭了,这个会话对应的一级缓存就没了,但是我们想要的是,会话关闭了,一级缓存中的数据会被保存到二级缓存中</li><li>新的会话查询信息,就可以从二级缓存中获取内容</li><li>不同的mapper查出的数据会放在自己对应的缓存(map)中</li></ul><p>步骤:</p><p>1 开启全局缓存</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 显式地开启全局缓存 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>2 再要使用二级缓存的Mapper中开启</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在当前Mapper.xml中使用二级缓存 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>也可以自定义参数</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在当前Mapper.xml中使用二级缓存 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">eviction</span>=<span class="string">&quot;FIFO&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">flushInterval</span>=<span class="string">&quot;60000&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">size</span>=<span class="string">&quot;512&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">readOnly</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>3 测试</p><p>问题: 我们需要将实体类序列化!否则会报错!</p><p>小结:</p><ul><li>只要开启了二级缓存,在同一个Mapper下就有效</li><li>所有的数据都会先放在一级缓存中</li><li>只有当会话提交,或者关闭的时候,才会提交到二级缓存</li></ul><h3 id="13-5-缓存原理"><a href="#13-5-缓存原理" class="headerlink" title="13.5 缓存原理"></a>13.5 缓存原理</h3><p>缓存顺序:</p><p>1 先看二级缓存中有没有</p><p>2 再看一级缓存中有没有</p><p>3 查询数据库</p><h3 id="13-6-自定义缓存-Ehcache"><a href="#13-6-自定义缓存-Ehcache" class="headerlink" title="13.6 自定义缓存 Ehcache"></a>13.6 自定义缓存 Ehcache</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ehcache是一种广泛使用的开源Java分布式缓存,主要面向通用缓存</span><br></pre></td></tr></table></figure><p>要在程序中使用ehcache,先要导包!</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Ehcache缓存包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.caches<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在mapper中指定使用我们的ehcache缓存实现</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在当前Mapper.xml中使用二级缓存 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>Ehcache.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">&quot;http://ehcache.org/ehcache.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">updateCheck</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        diskStore: 为缓存路径,ehcache分为内存和磁盘两级,此属性定义磁盘的缓存位置,参数解释如下:</span></span><br><span class="line"><span class="comment">        user.home - 用户主目录</span></span><br><span class="line"><span class="comment">        user.dir - 用户当前工作目录</span></span><br><span class="line"><span class="comment">        java.io.tmpdir - 默认临时文件路径</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">&quot;./tmpdir/Tmp_EhCache&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;defaultCache</span><br><span class="line">        eternal=&quot;false&quot;</span><br><span class="line">        maxElementsInMemory=&quot;10000&quot;</span><br><span class="line">        overflowToDisk=&quot;false&quot;</span><br><span class="line">        diskPersistent=&quot;false&quot;</span><br><span class="line">        timeToIdleSeconds=&quot;1800&quot;</span><br><span class="line">        timeToLiveSeconds=&quot;259200&quot;</span><br><span class="line">        memoryStoreEvictionPolicy=&quot;LRU&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;cache</span><br><span class="line">        name=&quot;cloud_user&quot;</span><br><span class="line">        eternal=&quot;false&quot;</span><br><span class="line">        maxElementsInMemory=&quot;5000&quot;</span><br><span class="line">        overflowToDisk=&quot;false&quot;</span><br><span class="line">        diskPersistent=&quot;false&quot;</span><br><span class="line">        timeToIdleSeconds=&quot;1800&quot;</span><br><span class="line">        timeToLiveSeconds=&quot;1800&quot;</span><br><span class="line">        memoryStoreEvictionPolicy=&quot;LRU&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- defaultCache: 默认缓存策略,当ehcache找不到定义的缓存时,则使用这个缓存策略,只能定义一个 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        name: 缓存名称</span></span><br><span class="line"><span class="comment">        maxElementsInMemory: 缓存最大数目</span></span><br><span class="line"><span class="comment">        maxElementsOnDisk: 硬盘最大缓存个数</span></span><br><span class="line"><span class="comment">        eternal: 对象是否永久有效,一旦设置了,timeout将不起作用</span></span><br><span class="line"><span class="comment">        overflowToDisk: 是否保存到磁盘,当系统宕机时</span></span><br><span class="line"><span class="comment">        timeToIdleSeconds: 设置对象在失效前的允许闲置时间(单位: 秒)</span></span><br><span class="line"><span class="comment">        timeToLiveSeconds: 设置对象在失效前允许存活时间(单位: 秒)</span></span><br><span class="line"><span class="comment">        diskPersistent: 是否缓存虚拟机重启期数据</span></span><br><span class="line"><span class="comment">        diskSpoolBufferSizeMB: 这个参数设置DiskStore(磁盘缓存)的缓存区大小,默认是30MB,每个Cache都应该有自己的一个缓冲区</span></span><br><span class="line"><span class="comment">        diskExpiryThreadIntervalSeconds: 磁盘失效线程运行时间间隔,默认是120秒</span></span><br><span class="line"><span class="comment">        memoryStoreEvictionPolicy: 当达到maxElementsInMemory限制时,Ehcache将会根据指定的策略去清理内存,默认策略是LRU</span></span><br><span class="line"><span class="comment">        clearOnFlush: 内存数量最大时是否清除</span></span><br><span class="line"><span class="comment">        memoryStoreEvictionPolicy: 可选策略有: LRU(最近最少使用,默认策略),FIFO(先进先出),LFU(最少访问次数)</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Redis数据库来做缓存: K-V</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;MyBatis 本是apache的一个开源项目iBatis, 2010年这个项目由apache software foundation 迁移到了google code，并且改名为MyBatis 。2013年11月迁移到Github。&lt;/p&gt;
&lt;p&gt;iBATIS一词来源于“internet”和“abatis”的组合，是一个基于Java的持久层框架。iBATIS提供的持久层框架包括SQL Maps和Data Access Objects（DAOs）&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java技术栈" scheme="http://example.com/tags/Java%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    <category term="MyBatis" scheme="http://example.com/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>Spring MVC框架学习笔记</title>
    <link href="http://example.com/2020/03/05/Spring-MVC%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2020/03/05/Spring-MVC%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-03-05T15:11:49.000Z</published>
    <updated>2021-02-22T15:50:54.642Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Spring MVC属于SpringFrameWork的后续产品，已经融合在Spring Web Flow里面。Spring 框架提供了构建 Web 应用程序的全功能 MVC 模块。使用 Spring 可插入的 MVC 架构，从而在使用Spring进行WEB开发时，可以选择使用Spring的Spring MVC框架或集成其他MVC开发框架，如Struts1(现在一般不用)，Struts 2(一般老项目使用)等等。</p><a id="more"></a><p>ssm: SpringMVC + Spring + Mybatis</p><p>MVC三层架构:</p><ul><li>模型(dao,service)</li><li>视图(jsp)</li><li>控制器(Servlet)</li></ul><p>SpringMVC三大件:</p><ul><li>处理器映射器</li><li>处理器适配器</li><li>视图解析器</li></ul><h2 id="1-基础配置开发方法"><a href="#1-基础配置开发方法" class="headerlink" title="1 基础配置开发方法"></a>1 基础配置开发方法</h2><p>1.新建maven项目并配置web模块</p><p>2.maven导入相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3 .在<code>/web/WEB-INF</code>文件夹下的<code>web.xml</code>文件中注册DispatcherServlet (请求分发器)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置DispatcherServlet: 这个是SpringMVC的核心 (请求分发器, 前端控制器) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- DispatcherServlet要绑定Spring的配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 启动级别: 1 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- / 匹配所有的请求: 不包括.jsp --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- /* 匹配所有的请求: 包括.jsp --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4.在<code>/src/main/resources</code>文件夹下新建<code>springmvc-servlet.xml</code>配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 处理器映射器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 处理器适配器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器: 模板引擎 (Thymeleaf Freemarker ...) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="attr">id</span>=<span class="string">&quot;InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 前缀及后缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- BeanNameUrlHandlerMapping: bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;/hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.github.dairycode.controller.HelloController&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>5.新建<code>com.github.dairycode.controller.HelloController</code>控制类,实现<code>Controller</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 业务代码</span></span><br><span class="line">        String result = <span class="string">&quot;HelloSpringMVC&quot;</span>;</span><br><span class="line">        mv.addObject(<span class="string">&quot;msg&quot;</span>, result);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 视图跳转</span></span><br><span class="line">        mv.setViewName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.在<code>/web/WEB-INF/jsp</code>文件夹下新建跳转页面<code>test.jsp</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">$&#123;msg&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>7.配置Tomcat服务器并部署项目运行调试</p><h2 id="2-常用注解开发方法"><a href="#2-常用注解开发方法" class="headerlink" title="2 常用注解开发方法"></a>2 常用注解开发方法</h2><p>1.新建maven项目并配置web模块</p><p>2.maven导入相关依赖 (与上面相同)</p><p>3 .在<code>/web/WEB-INF</code>文件夹下的<code>web.xml</code>文件中注册DispatcherServlet (请求分发器)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置DispatcherServlet: 这个是SpringMVC的核心 (请求分发器, 前端控制器) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- DispatcherServlet要绑定Spring的配置文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 启动级别: 1 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- / 匹配所有的请求: 不包括.jsp --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /* 匹配所有的请求: 包括.jsp --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4.在<code>/src/main/resources</code>文件夹下新建<code>springmvc-servlet.xml</code>配置文件,添加注解扫描器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描,让指定包下的注解生效,由IOC容器统一管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.github.dairycode.controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 让SpringMVC不处理静态资源 (.css .js .html .mp3 .mp4) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">         支持mvc注解驱动</span></span><br><span class="line"><span class="comment">            在spring中一般采用@RequestMapping注解来完成映射关系</span></span><br><span class="line"><span class="comment">            要想使@RequestMapping注解生效</span></span><br><span class="line"><span class="comment">            必须向上下文中注册DefaultAnnotationHandlerMapping</span></span><br><span class="line"><span class="comment">            和一个AnnotationMethodHandlerAdapter实例</span></span><br><span class="line"><span class="comment">            这两个实例分别在类级别和方法级别处理</span></span><br><span class="line"><span class="comment">            而annotation-driven配置帮助我们自动完成上述两个实例的注入</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="attr">id</span>=<span class="string">&quot;InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 前缀及后缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>5.新建<code>com.github.dairycode.controller.HelloController</code>控制类,添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 封装数据</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;Hello,SpringMVCAnnotation&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;     <span class="comment">// 会被视图解析器处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.在<code>/web/WEB-INF/jsp</code>文件夹下新建跳转页面<code>test.jsp</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">$&#123;msg&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>7.配置Tomcat服务器并部署项目运行调试</p><p><strong>注意事项</strong></p><p><strong>在项目启动后访问<code>/hello</code>接口,可能会出现404错误,此时应该排查生成的<code>out</code>项目文件夹,查看项目的<code>WEB-INF</code>文件夹下是否生成lib文件夹,如未生成,说明环境配置有问题,需要在IDEA中重新配置项目结构(Project Structure)</strong></p><h2 id="3-SpringMVC配置乱码过滤器"><a href="#3-SpringMVC配置乱码过滤器" class="headerlink" title="3.SpringMVC配置乱码过滤器"></a>3.SpringMVC配置乱码过滤器</h2><p>1.按上面步骤新建一个SpringMVC项目</p><p>2.在web.xml中注册过滤器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置SpringMVC的乱码过滤器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意事项</strong></p><p><strong>在类或方法上加@ResponseBody注解,就不会经过视图解析器,会直接返回数据,另一种方法是使用@RestController代替@Controller</strong></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;Spring MVC属于SpringFrameWork的后续产品，已经融合在Spring Web Flow里面。Spring 框架提供了构建 Web 应用程序的全功能 MVC 模块。使用 Spring 可插入的 MVC 架构，从而在使用Spring进行WEB开发时，可以选择使用Spring的Spring MVC框架或集成其他MVC开发框架，如Struts1(现在一般不用)，Struts 2(一般老项目使用)等等。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java技术栈" scheme="http://example.com/tags/Java%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    <category term="Spring MVC" scheme="http://example.com/tags/Spring-MVC/"/>
    
  </entry>
  
  <entry>
    <title>Spring框架学习笔记</title>
    <link href="http://example.com/2020/03/05/Spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2020/03/05/Spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-03-05T12:11:32.000Z</published>
    <updated>2021-02-22T15:47:29.203Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Spring框架是由于软件开发的复杂性而创建的。Spring使用的是基本的JavaBean来完成以前只可能由EJB完成的事情。然而，Spring的用途不仅仅限于服务器端的开发。从简单性、可测试性和松耦合性角度而言，绝大部分Java应用都可以从Spring中受益。</p><a id="more"></a><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h2><ul><li>Spring: 春天 –&gt; 给软件行业带来了春天!</li><li>2002年,首次推出了Spring框架的雏形: interface21框架!</li><li>Spring框架即以interface21框架为基础,经过重新设计,并不断丰富其内涵,于2004年3月24日发布了1.0正式版</li><li>Rod Johnson,Spring Framework创始人,著名作者,很难想象Rod Johnson的学历,他是悉尼大学的博士,然而他的专业不是计算机,而是音乐学</li><li>Spring的理念: 使现有的技术更加容易使用,本身是一个大杂烩,整合了现有的技术框架!</li></ul><p>Maven坐标:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-1-优点"><a href="#1-1-优点" class="headerlink" title="1.1 优点"></a>1.1 优点</h2><ul><li>Spring是一个开源的免费的框架(容器)!</li><li>Spring是一个轻量级的,非入侵式的框架!</li><li>控制反转,面向切面编程(AOP)</li><li>支持事务的处理,对框架整合的支持</li></ul><p>总结一句话: Spring就是一个轻量级的控制反转(IOC)和面向切面编程(AOP)的框架!</p><h3 id="1-2-组成"><a href="#1-2-组成" class="headerlink" title="1.2 组成"></a>1.2 组成</h3><ul><li>Spring Core</li><li>Spring AOP</li><li>Spring ORM</li><li>Spring DAO</li><li>Spring Web</li><li>Spring Context</li><li>Spring Web MVC</li></ul><h3 id="1-3-扩展"><a href="#1-3-扩展" class="headerlink" title="1.3 扩展"></a>1.3 扩展</h3><p>在Spring官网有介绍现代化的Java开发!说白了就是基于Spring的开发</p><ul><li>Spring Boot<ul><li>一个快速开发的脚手架</li><li>基于Spring Boot可以快速开发单个微服务</li><li>约定大于配置!</li></ul></li><li>Spring Cloud<ul><li>Spring Cloud是基于Spring Boot实现的</li></ul></li></ul><p>现在大多数公司都在使用Spring Boot进行快速开发,学习Spring Boot的前提,需要完全掌握Spring及Spring MVC!承上启下的作用!</p><p>弊端: 发展了太久之后,违背了原来的理念!配置十分繁琐,人称: “配置地狱”</p><h2 id="2-IOC理论推导"><a href="#2-IOC理论推导" class="headerlink" title="2 IOC理论推导"></a>2 IOC理论推导</h2><p>1 UserDao接口</p><p>2 UserDaoImpl实现类</p><p>3 UserService业务接口</p><p>4 UserServiceImpl业务实现类</p><p>在我们之前的业务中,用户的需求可能会影响我们原来的代码,我们需要根据用户的需求去修改源代码!如果程序代码量十分大,修改一次的成本代价十分昂贵!</p><p>我们使用一个Set接口实现,已经发生了革命性的变化!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用set进行动态实现值的注入!</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>之前程序是主动创建对象!控制权在程序员手上!</li><li>使用了set注入后,程序不再具有主动性,而是变成了被动的接收对象!</li></ul><p>这种思想,从本质上解决了问题,我们程序员不用再去管理对象的创建了,系统的耦合性大大降低,可以更加专注的在业务的实现上!这是IOC的原型!</p><h3 id="2-1-IOC本质"><a href="#2-1-IOC本质" class="headerlink" title="2.1 IOC本质"></a>2.1 IOC本质</h3><p>控制反转IOC(Inversion of Control),是一种设计思想,DI(Dependency Injection)是实现IOC的一种方法,也有人认为DI只是IOC的另一种说法,没有IOC的程序中,我们使用面向对象编程,对象的创建与对象间的依赖关系完全硬编码在程序中,对象的创建由程序自己控制,控制反转后将对象的创建转移给第三方,个人认为所谓控制反转就是: 获得依赖对象的方式反转了!</p><p>采用XML方式配置Bean的时候,Bean的定义信息是和实现分离的,而采用注解的方式可以把两者合为一体,Bean的定义信息直接以注解的形式定义在实现类中,从而达到了零装配的目的</p><p>控制反转是一种通过描述(XML或注解)并通过第三方去生产或获取特定对象的方式,在Spring中实现控制反转的是IOC容器,其实现方法是依赖注入(Dependency Injection,DI)</p><h2 id="3-Hello-Spring"><a href="#3-Hello-Spring" class="headerlink" title="3 Hello Spring"></a>3 Hello Spring</h2><p>对象由Spring容易创建,属性由Spring容器设置</p><p>这个过程就叫控制反转:</p><p>控制: 谁来控制对象的创建,传统应用程序的对象是由程序本身控制创建的,使用Spring后,对象是由Spring来创建的</p><p>反转: 程序本身不创建对象,而变成被动的接收对象</p><p>依赖注入: 就是利用set方法来进行注入的</p><p>IOC是一种编程思想,由主动的编程变成被动的接收</p><p>可以通过newClassPathXmlApplicationContext去浏览一下底层源码</p><p>OK,到了现在,我们彻底不用在程序中去改动了,要实现不同的操作,只需要在xml配置文件中进行修改,所谓的IOC,一句话搞定: 对象由Spring来创建,管理,装配!</p><h2 id="4-IOC创建对象的方式"><a href="#4-IOC创建对象的方式" class="headerlink" title="4 IOC创建对象的方式"></a>4 IOC创建对象的方式</h2><p>1 使用无参构造创建对象,默认!</p><p>2 假设我们要使用有参构造创建对象</p><ul><li><p>下标赋值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 第一种方式: 下标带参赋值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.github.dairycode.spring.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dairycode&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>类型赋值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 第二种方式: 通过类型创建,不建议使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.github.dairycode.spring.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dairycode&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>参数名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 第三种方式: 直接通过参数名创建 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.github.dairycode.spring.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dairycode&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结: 在配置文件加载的时候,容器中管理的对象就已经初始化了!</p></li></ul><h2 id="5-Spring配置"><a href="#5-Spring配置" class="headerlink" title="5 Spring配置"></a>5 Spring配置</h2><h3 id="5-1-别名"><a href="#5-1-别名" class="headerlink" title="5.1 别名"></a>5.1 别名</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 别名,如果添加了别名,我们也可以使用别名获取到这个对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;userNew&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-2-Bean的配置"><a href="#5-2-Bean的配置" class="headerlink" title="5.2 Bean的配置"></a>5.2 Bean的配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    id: bean的唯一标识符,也就是相当于我们学的对象名</span></span><br><span class="line"><span class="comment">    class: bean对象所对应的全限定名(包名 + 类型)</span></span><br><span class="line"><span class="comment">    name: 也是别名,而且name可以同时取多个别名</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.github.dairycode.spring.pojo.UserT&quot;</span> <span class="attr">name</span>=<span class="string">&quot;u1 u2,u3;u4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dairycode&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-3-import"><a href="#5-3-import" class="headerlink" title="5.3 import"></a>5.3 import</h3><p>这个import,一般用于团队开发使用,他可以将多个配置文件,导入合并为一个</p><p>假设,现在项目中有多个人开发,这三个人负责不同的类开发,不同的类需要注册在不同的bean中,我们可以利用import将所有人的beans.xml合并为一个总的!</p><ul><li><p>张三</p></li><li><p>李四</p></li><li><p>王五</p></li><li><p>applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;bean1.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;bean2.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;bean3.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>使用的时候,直接使用总的配置就可以了</p></li></ul><h2 id="6-DI依赖注入"><a href="#6-DI依赖注入" class="headerlink" title="6 DI依赖注入"></a>6 DI依赖注入</h2><h3 id="6-1-构造器注入"><a href="#6-1-构造器注入" class="headerlink" title="6.1 构造器注入"></a>6.1 构造器注入</h3><p>前面已经说过了</p><h3 id="6-2-Set方式注入-重点"><a href="#6-2-Set方式注入-重点" class="headerlink" title="6.2 Set方式注入 [重点]"></a>6.2 Set方式注入 [重点]</h3><ul><li><p>依赖注入: Set注入</p><ul><li>依赖: bean对象的创建依赖于容器</li><li>注入: bean对象的所有属性,由容器来注入</li></ul><p>[环境搭建]</p><p>1 复杂类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Address&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;address=&#x27;&quot;</span> + address + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2 真实测试对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class Student &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private Address address;</span><br><span class="line">    private String[] books;</span><br><span class="line">    private List<span class="tag">&lt;<span class="name">String</span>&gt;</span> hobbies;</span><br><span class="line">    private Map&lt;String, String&gt; card;</span><br><span class="line">    private Set<span class="tag">&lt;<span class="name">String</span>&gt;</span> games;</span><br><span class="line">    private String wife;</span><br><span class="line">    private Properties info;</span><br><span class="line">    </span><br><span class="line">    // get,set方法此处忽略</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3 beans.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.github.dairycode.spring.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 第一种,普通值注入,value --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dairycode&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4 测试类</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Student student = (Student) context.getBean(<span class="string">&quot;student&quot;</span>);</span><br><span class="line">        System.out.println(student.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完善注入信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.github.dairycode.spring.pojo.Address&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;江苏&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.github.dairycode.spring.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 普通值注入,value --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dairycode&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Bean注入,ref --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 数组注入 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;books&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>红楼梦<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>西游记<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>水浒传<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>三国演义<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- List注入 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>听歌<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>敲代码<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>看电影<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Map注入 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;身份证&quot;</span> <span class="attr">value</span>=<span class="string">&quot;111111222222223333&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;银行卡&quot;</span> <span class="attr">value</span>=<span class="string">&quot;23333&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Set注入 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;games&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>LOL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>DNF<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- null注入 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;wife&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Properties注入 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;学号&quot;</span>&gt;</span>2020<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;性别&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-3-拓展方式注入"><a href="#6-3-拓展方式注入" class="headerlink" title="6.3 拓展方式注入"></a>6.3 拓展方式注入</h3><p>我们可以使用p命名空间和c命名空间进行注入</p><p>使用:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:c</span>=<span class="string">&quot;http://www.springframework.org/schema/c&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- p命名空间注入,可以直接注入属性的值: property --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.github.dairycode.spring.pojo.User&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;dairycode&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- c命名空间注入,通过带参构造器注入: construct-args --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.github.dairycode.spring.pojo.User&quot;</span> <span class="attr">c:name</span>=<span class="string">&quot;dairycode&quot;</span> <span class="attr">c:age</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;userbeans.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// User user = context.getBean(&quot;user1&quot;, User.class);</span></span><br><span class="line">        User user = context.getBean(<span class="string">&quot;user2&quot;</span>, User.class);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>注意点: p命名和c命名空间不能直接使用,需要导入xml约束</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="line">xmlns:c=&quot;http://www.springframework.org/schema/c&quot;</span><br></pre></td></tr></table></figure><h3 id="6-4-bean的作用域"><a href="#6-4-bean的作用域" class="headerlink" title="6.4 bean的作用域"></a>6.4 bean的作用域</h3><ul><li>singleton</li><li>prototype</li><li>request</li><li>session</li><li>application</li><li>Websocket</li></ul><p>1 单例模式 (Spring默认机制)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.github.dairycode.spring.pojo.User&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>2 原型模式: 每次从容器中get的时候,都会产生一个新对象!</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.github.dairycode.spring.pojo.User&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>3 其余的request, session, application这些只能在web开发中使用到</p><h2 id="7-Bean的自动装配"><a href="#7-Bean的自动装配" class="headerlink" title="7 Bean的自动装配"></a>7 Bean的自动装配</h2><ul><li>自动装配是Spring满足bean依赖一种方式!</li><li>Spring会在上下文中自动寻找,并自动给bean装配属性</li></ul><p>在Spring中有三种装配的方式</p><p>1 在xml中显式的配置</p><p>2 在java中显式的配置</p><p>3 隐式的自动装配bean [重要]</p><h3 id="7-1-测试"><a href="#7-1-测试" class="headerlink" title="7.1 测试"></a>7.1 测试</h3><p>环境搭建: 一个人有两个宠物!</p><h3 id="7-2-ByName自动装配"><a href="#7-2-ByName自动装配" class="headerlink" title="7.2 ByName自动装配"></a>7.2 ByName自动装配</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    byName: 会自动在容器上下文中查找和自己set方法后面的值对应的bean的id!</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.github.dairycode.spring.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dairycode&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-3-ByType自动装配"><a href="#7-3-ByType自动装配" class="headerlink" title="7.3 ByType自动装配"></a>7.3 ByType自动装配</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    byType: 会自动在容器上下文中查找和自己对象属性类型相同的bean!</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.github.dairycode.spring.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dairycode&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>小结:</p><ul><li>byName的时候,需要保证所有bean的id唯一,并且这个bean需要和自动注入的属性的set方法的值一致!</li><li>byType的时候,需要保证所有bean的class唯一,并且这个bean需要和自动注入的属性的类型一致!</li></ul><h3 id="7-4-使用注解实现自动装配"><a href="#7-4-使用注解实现自动装配" class="headerlink" title="7.4 使用注解实现自动装配"></a>7.4 使用注解实现自动装配</h3><p>jdk1.5支持的注解,Spring2.5就支持注解了</p><p>要使用注解须知:</p><p>1 导入约束: context约束</p><p>2 配置注解的支持: <code>&lt;context:annotation-config/&gt;</code> [重要]</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>@Autowired</p><p>直接在属性上使用即可!也可以在set方式上使用!</p><p>使用Autowired我们可以不用编写set方法了,前提是你这个自动装配的属性在IOC(Spring)容器中存在且符合名字byName!</p><p>科普:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span> 字段标记了这个注释,说明这个字段可以为<span class="keyword">null</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Autowired &#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">required</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 如果显式定义了Autowired的required属性为false,说明这个对象可以为null,否则不允许为空</span></span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果@Autowired自动装配的环境比较复杂,自动装配无法通过一个注解@Autowired完成的时候,我们可以使用@Qualifier(value=”xxx”)去配合@Autowired的使用,指定一个唯一的bean对象注入!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    <span class="meta">@Qualifier(value = &quot;cat&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(value = &quot;dog&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Resource注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource(name = &quot;cat&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Resource(name = &quot;dog&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小结:</p><p>@Resource和@Autowired的区别</p><ul><li>都是用来自动装配的,都可以放在属性字段上</li><li>@Autowired通过byType的方式实现,而且必须要求这个对象存在! [常用]</li><li>@Resource默认通过byName的方式实现,如果找不到名字,则通过byType实现!如果两个都找不到的情况下,就报错!</li><li>执行顺序不同: @Autowired通过byType的方式实现,@Resource默认通过byName的方式实现</li></ul><h2 id="8-使用注解开发"><a href="#8-使用注解开发" class="headerlink" title="8 使用注解开发"></a>8 使用注解开发</h2><p>在Spring4之后,要使用注解开发,必须要保证aop的包导入了</p><p>使用注解需要导入context约束,增加注解的支持!</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>1 bean</p><p>@Component: 组件,放在类上,说明这个类被Spring管理了,就是bean!</p><p>2 属性如何注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 相当于 &lt;property name=&quot;name&quot; value=&quot;dairycode&quot;/&gt;</span></span><br><span class="line">    <span class="meta">@Value(&quot;dairycode&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3 衍生的注解</p><p>@Component有几个衍生注解,我们在web开发中,会按照mvc三层架构分层!</p><ul><li>dao [@Repository]</li><li>service [@Service]</li><li>controller [@Controller]</li></ul><p>这四个注解功能都是一样的,都是代表将某个类注册到Spring容器中,装配!</p><p>4 自动装配</p><ul><li><p>Autowired: 自动装配,通过类型和名字</p><p>如果Autowired不能唯一自动装配上属性,则需要通过@Qualifier(value=”xxx”)</p></li><li><p>@Nullable: 字段标记了这个注解,说明这个字段可以为null</p></li><li><p>@Resource: 自动装配通过名字,类型</p></li></ul><p>5 作用域</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 相当于 &lt;property name=&quot;name&quot; value=&quot;dairycode&quot;/&gt;</span></span><br><span class="line">    <span class="meta">@Value(&quot;dairycode&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6 小结</p><p>xml与注解:</p><ul><li>xml更加万能,适用于任何场合!维护简单方便</li><li>注解不是自己类使用不了,维护相对复杂!</li></ul><p>xml与注解最佳实践:</p><ul><li><p>xml用来管理bean</p></li><li><p>注解只负责完成属性的注入</p></li><li><p>我们在使用的过程中,只需要注意一个问题: 要让注解生效,就需要开启注解的支持</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定要扫描的包,这个包下的注解就会生效 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.github.dairycode.spring&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="9-使用Java的方式配置Spring"><a href="#9-使用Java的方式配置Spring" class="headerlink" title="9 使用Java的方式配置Spring"></a>9 使用Java的方式配置Spring</h2><p>我们现在要完全不使用Spring的xml配置了,全权交给Java来做!</p><p>JavaConfig是Spring的一个子项目,在Spring4之后,它成为了一个核心功能!</p><p>实体类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里这个注解的意思,就是说明这个类被Spring接管了,注册到了容器中</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;dairycode&quot;)</span> <span class="comment">// 属性注入值</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个也会被Spring容器托管,注册到容器中,因为他本来就是一个@Component</span></span><br><span class="line"><span class="comment">// @Configuration代表这是一个配置类,就和我们之前看的beans.xml是一样的</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.github.dairycode.spring.pojo&quot;)</span></span><br><span class="line"><span class="meta">@Import(MyConfig1.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册一个bean,就相当于我们之前写的一个bean标签</span></span><br><span class="line">    <span class="comment">// 这个方法的名字,就相当于bean标签中的id属性</span></span><br><span class="line">    <span class="comment">// 这个方法的返回值,就相当于bean标签中的class属性</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();  <span class="comment">// 就是返回要注入到bean的对象!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果使用了配置类方式去做,我们就只能通过AnnotationConfig上下文来获取容器,通过配置类的class对象加载!</span></span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(MyConfig1.class);</span><br><span class="line">        User getUser = context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">        System.out.println(getUser.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种纯java的配置方式,在SpringBoot中随处可见!</p><h2 id="10-代理模式"><a href="#10-代理模式" class="headerlink" title="10 代理模式"></a>10 代理模式</h2><p>为什么要学习代理模式?</p><p>因为这就是SpringAOP的底层! [SpringAOP和SpringMVC]</p><p>代理模式的分类:</p><ul><li>静态代理</li><li>动态代理</li></ul><h3 id="10-1-静态代理"><a href="#10-1-静态代理" class="headerlink" title="10.1 静态代理"></a>10.1 静态代理</h3><p>角色分析:</p><ul><li>抽象角色: 一般会使用接口或者抽象类来解决</li><li>真实角色: 被代理的角色</li><li>代理角色: 代理真实角色,代理真实角色后,我们一般会做一些附属操作</li><li>客户: 访问代理对象的人!</li></ul><p>代码步骤:</p><p>1 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 租房</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2 真实角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 房东</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Host</span> <span class="keyword">implements</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;房东要出租房子!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3 代理角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Host host;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">(Host host)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.host = host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>&#123;</span><br><span class="line">        seeHouse();</span><br><span class="line">        host.rent();</span><br><span class="line">        contract();</span><br><span class="line">        fee();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 看房</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">seeHouse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中介带你看房!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 收中介费</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;收中介费!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 签合同</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contract</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;签租赁合同!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4 客户端访问代理角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 房东要租房子</span></span><br><span class="line">        Host host = <span class="keyword">new</span> Host();</span><br><span class="line">        <span class="comment">// 代理,中介帮房东租房子,但是代理角色一般会有一些附属操作!</span></span><br><span class="line">        Proxy proxy = <span class="keyword">new</span> Proxy(host);</span><br><span class="line">        <span class="comment">// 你不用面对房东,直接找中介租房即可!</span></span><br><span class="line">        proxy.rent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代理模式的好处:</p><ul><li>可以使真实角色的操作更加纯粹!不用去关注一些公共的业务</li><li>公共业务交给了代理角色!实现了业务的分工!</li><li>公共业务发生扩展的时候,方便集中管理!</li></ul><p>缺点:</p><ul><li>一个真实角色就会产生一个代理角色,代码量会翻倍,开发效率会变低</li></ul><h3 id="10-2-加深理解"><a href="#10-2-加深理解" class="headerlink" title="10.2 加深理解"></a>10.2 加深理解</h3><p>代码对应spring-08-proxy中的demo2</p><h3 id="10-3-动态代理"><a href="#10-3-动态代理" class="headerlink" title="10.3 动态代理"></a>10.3 动态代理</h3><ul><li>动态代理和静态代理角色一样</li><li>动态代理的代理类是动态生成的,不是我们直接写的</li><li>动态代理分为两大类: 基于接口的动态代理,基于类的动态代理<ul><li>基于接口 – JDK动态代理 [我们在这里使用]</li><li>基于类: cglib</li><li>java字节码实现: javassist</li></ul></li></ul><p>需要了解两个类: Proxy: 代理, InvocationHandler: 调用处理程序</p><p>动态代理的好处:</p><ul><li>可以使真实角色的操作更加纯粹!不用去关注一些公共的业务</li><li>公共业务交给了代理角色!实现了业务的分工!</li><li>公共业务发生扩展的时候,方便集中管理!</li><li>一个动态代理类代理的是一个接口,一般就是对应的一类业务</li><li>一个动态代理类可以代理多个类,只要是实现了同一个接口即可</li></ul><h2 id="11-AOP"><a href="#11-AOP" class="headerlink" title="11 AOP"></a>11 AOP</h2><h3 id="11-1-什么是AOP"><a href="#11-1-什么是AOP" class="headerlink" title="11.1 什么是AOP"></a>11.1 什么是AOP</h3><p>AOP(Aspect Oriented Programming)意为: 面向切面编程,通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术,AOP是OOP的延续,是软件开发中的一个热点,也是Spring框架中的一个重要内容,是函数式编程的一种衍生范型,利用AOP可以对业务逻辑的各个部分进行隔离,从而使得业务逻辑各个部分之间的耦合度降低,提高程序的可重用性,同时提高了开发的效率</p><h3 id="11-2-AOP在Spring中的作用"><a href="#11-2-AOP在Spring中的作用" class="headerlink" title="11.2 AOP在Spring中的作用"></a>11.2 AOP在Spring中的作用</h3><p>提供声明式事务,允许用户自定义切面</p><ul><li>横向关注点: 跨越应用程序多个模块的方法或功能,即是,与我们业务逻辑无关的,但是我们需要关注的部分,就是横切关注点,如日志,安全,缓存,事务等等…</li><li>切面(Aspect): 横切关注点被模块化的特殊对象,即,它是一个类</li><li>通知(Advice): 切面必须要完成的工作,即,它是类中的一个方法</li><li>目标(Target): 被通知对象</li><li>代理(Proxy): 向目标对象通知之后创建的对象</li><li>切入点(PointCut): 切面通知执行的”地点”的定义</li><li>连接点(JointPoint): 与切入点匹配的执行点</li></ul><p>SpringAOP中,通过Advice定义横切逻辑,Spring中支持5种类型的Advice</p><table><thead><tr><th>通知类型</th><th>连接点</th><th>实现接口</th></tr></thead><tbody><tr><td>前置通知</td><td>方法前</td><td>org.springframework.aop.MethodBeforeAdvice</td></tr><tr><td>后置通知</td><td>方法后</td><td>org.springframework.aop.AfterReturningAdvice</td></tr><tr><td>环绕通知</td><td>方法前后</td><td>org.aopalliance.intercept.MethodInterceptor</td></tr><tr><td>异常抛出通知</td><td>方法抛出异常</td><td>org.springframework.aop.ThrowsAdvice</td></tr><tr><td>引介通知</td><td>类中增加新的方法属性</td><td>org.springframework.aop.IntroductionInterceptor</td></tr></tbody></table><p>即AOP在不改变原有代码的情况下,去增加新的功能</p><h3 id="11-3-使用Spring实现AOP"><a href="#11-3-使用Spring实现AOP" class="headerlink" title="11.3 使用Spring实现AOP"></a>11.3 使用Spring实现AOP</h3><p>[重点]使用AOP需要导入一个依赖包!</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方式一: 使用Spring的API接口 [主要是SpringAPI接口实现]</p><p>方式二: 使用自定义类 [主要是切面定义]</p><p>方式三: 使用注解实现</p><h2 id="12-整合Mybatis"><a href="#12-整合Mybatis" class="headerlink" title="12 整合Mybatis"></a>12 整合Mybatis</h2><p>步骤:</p><p>1 导入相关jar包</p><ul><li>junit</li><li>mybatis</li><li>mysql数据库</li><li>spring相关的</li><li>aop织入</li><li>Mybatis-spring包 [new]</li></ul><p>2 编写配置文件</p><p>3 测试</p><h3 id="12-1-回忆Mybatis"><a href="#12-1-回忆Mybatis" class="headerlink" title="12.1 回忆Mybatis"></a>12.1 回忆Mybatis</h3><p>1 编写实体类</p><p>2 编写核心配置文件</p><p>3 编写接口</p><p>4 编写Mapper</p><h3 id="12-2-mybatis-spring"><a href="#12-2-mybatis-spring" class="headerlink" title="12.2 mybatis-spring"></a>12.2 mybatis-spring</h3><p>1 编写数据源配置</p><p>2 sqlSessionFactory</p><p>3 sqlSessionTemplate</p><p>4 需要给接口加实现类 [一步]</p><p>5 将自己写的实现类,注入到Spring中</p><p>6 测试使用即可</p><h2 id="13-声明式事务"><a href="#13-声明式事务" class="headerlink" title="13 声明式事务"></a>13 声明式事务</h2><p>1 回顾事务</p><ul><li>把一组业务当成一个业务来做,要么都成功,要么都失败!</li><li>事务在项目开发中,十分的重要,涉及到数据一致性的问题,不能马虎!</li><li>确保完整性和一致性</li></ul><p>事务的ACID原则:</p><ul><li>原子性</li><li>一致性</li><li>隔离性<ul><li>多个业务可能操作同一个资源,防止数据损坏</li></ul></li><li>持久性<ul><li>事务一旦提交,无论系统发生什么问题,结果都不会再被影响,被持久化的写到存储器中!</li></ul></li></ul><p>2 Spring中的事务管理</p><ul><li>声明式事务: AOP</li><li>编程式事务: 需要在代码中,进行事务的管理</li></ul><p>思考:</p><p>为什么需要事务?</p><ul><li>如果不配置事务,可能存在数据提交不一致的情况</li><li>如果我们不在Spring中去配置声明式事务,我们就需要在代码中手动配置事务</li><li>事务在项目的开发中十分重要,涉及到数据的一致性和完整性问题,不容马虎!</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;Spring框架是由于软件开发的复杂性而创建的。Spring使用的是基本的JavaBean来完成以前只可能由EJB完成的事情。然而，Spring的用途不仅仅限于服务器端的开发。从简单性、可测试性和松耦合性角度而言，绝大部分Java应用都可以从Spring中受益。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java技术栈" scheme="http://example.com/tags/Java%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    <category term="Spring" scheme="http://example.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>JDBC学习笔记</title>
    <link href="http://example.com/2020/03/05/JDBC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2020/03/05/JDBC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-03-05T12:11:18.000Z</published>
    <updated>2021-02-22T16:24:24.808Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Java数据库连接，（Java Database Connectivity，简称JDBC）是Java语言中用来规范客户端程序如何来访问数据库的应用程序接口，提供了诸如查询和更新数据库中数据的方法。JDBC也是Sun Microsystems的商标。我们通常说的JDBC是面向关系型数据库的。</p><a id="more"></a><h2 id="1-jdbc的5种连接方式"><a href="#1-jdbc的5种连接方式" class="headerlink" title="1.jdbc的5种连接方式"></a>1.jdbc的5种连接方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方式一:</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConnection1</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取Driver实现类对象</span></span><br><span class="line">        Driver driver = <span class="keyword">new</span> com.mysql.jdbc.Driver();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// jdbc:mysql: 协议</span></span><br><span class="line">        <span class="comment">// localhost: ip地址</span></span><br><span class="line">        <span class="comment">// 3306,默认mysql的端口号</span></span><br><span class="line">        <span class="comment">// test:test数据库</span></span><br><span class="line">        String url = <span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;</span><br><span class="line">        <span class="comment">// 将用户名和密码封装在Properties中</span></span><br><span class="line">        Properties info = <span class="keyword">new</span> Properties();</span><br><span class="line">        info.setProperty(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">        info.setProperty(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        java.sql.Connection conn = driver.connect(url, info);</span><br><span class="line"></span><br><span class="line">        System.out.println(conn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方式二: 对方式一的迭代,在如下的程序中不出现第三方的api,使得程序具有更好的可移植性</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConnection2</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.获取Driver实现类对象,使用反射</span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        Driver driver = (Driver) clazz.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.提供要连接的数据库</span></span><br><span class="line">        String url = <span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.提供连接需要的用户名和密码</span></span><br><span class="line">        Properties info = <span class="keyword">new</span> Properties();</span><br><span class="line">        info.setProperty(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">        info.setProperty(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.获取连接</span></span><br><span class="line">        java.sql.Connection conn = driver.connect(url, info);</span><br><span class="line">        System.out.println(conn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方式三: 使用DriverManager替换Driver</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConnection3</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.获取Driver实现类的对象</span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        Driver driver = (Driver) clazz.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.提供另外三个连接的基本信息</span></span><br><span class="line">        String url = <span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;</span><br><span class="line">        String user = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        String password = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注册驱动</span></span><br><span class="line">        DriverManager.registerDriver(driver);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取连接</span></span><br><span class="line">        java.sql.Connection conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">        System.out.println(conn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方式四: 可以只是加载驱动,不用显示的注册驱动过了</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConnection4</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.提供三个连接的基本信息</span></span><br><span class="line">        String url = <span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;</span><br><span class="line">        String user = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        String password = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.加载Driver,相较于方式三省略部分操作</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.获取连接</span></span><br><span class="line">        java.sql.Connection conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">        System.out.println(conn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方式五(final版): 将数据库连接需要的4个基本信息声明在配置文件中,通过读取配置文件的方式,获取连接</span></span><br><span class="line">    <span class="comment">// 此种方式的好处?</span></span><br><span class="line">    <span class="comment">// 1.实现了数据与代码的分离,实现了解耦</span></span><br><span class="line">    <span class="comment">// 2.如果需要修改配置文件信息,可以避免程序重新打包</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConnection5</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.读取配置文件中的4个基本信息</span></span><br><span class="line">        InputStream is = ConnectionTest.class.getClassLoader().getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Properties pros = <span class="keyword">new</span> Properties();</span><br><span class="line">        pros.load(is);</span><br><span class="line"></span><br><span class="line">        String user = pros.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        String password = pros.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        String url = pros.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        String driverClass = pros.getProperty(<span class="string">&quot;driverClass&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.加载驱动</span></span><br><span class="line">        Class.forName(driverClass);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.获取连接</span></span><br><span class="line">        java.sql.Connection conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">        System.out.println(conn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-jdbc的连接工具类"><a href="#2-jdbc的连接工具类" class="headerlink" title="2.jdbc的连接工具类"></a>2.jdbc的连接工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 操作数据库的工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 获取数据库的连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1.读取配置文件中的4个基本信息</span></span><br><span class="line">        InputStream is = ClassLoader.getSystemClassLoader().getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Properties pros = <span class="keyword">new</span> Properties();</span><br><span class="line">        pros.load(is);</span><br><span class="line"></span><br><span class="line">        String user = pros.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        String password = pros.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        String url = pros.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        String driverClass = pros.getProperty(<span class="string">&quot;driverClass&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.加载驱动</span></span><br><span class="line">        Class.forName(driverClass);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.获取连接</span></span><br><span class="line">        Connection conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 关闭连接和Statement的操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conn</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ps</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeResource</span><span class="params">(Connection conn, Statement ps)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (ps != <span class="keyword">null</span>)</span><br><span class="line">                ps.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="keyword">null</span>)</span><br><span class="line">                conn.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 关闭资源操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conn</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ps</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rs</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeResource</span><span class="params">(Connection conn, Statement ps, ResultSet rs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (ps != <span class="keyword">null</span>)</span><br><span class="line">                ps.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="keyword">null</span>)</span><br><span class="line">                conn.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (rs != <span class="keyword">null</span>)</span><br><span class="line">                rs.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-Apache组织提供的JDBC工具类commons-dbutils"><a href="#3-Apache组织提供的JDBC工具类commons-dbutils" class="headerlink" title="3.Apache组织提供的JDBC工具类commons-dbutils"></a>3.Apache组织提供的JDBC工具类commons-dbutils</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * commons-dbutils: Apache组织提供的一个开源JDBC工具类,封装了针对数据库的增删改查操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryRunnerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试插入</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">            conn = JDBCUtils.getConnection3();</span><br><span class="line">            String sql = <span class="string">&quot;insert into customer(name,email,birth)values(?,?,?)&quot;</span>;</span><br><span class="line">            <span class="keyword">int</span> insertCount = runner.update(conn, sql, <span class="string">&quot;蔡徐坤&quot;</span>, <span class="string">&quot;caixunkun@126.com&quot;</span>, <span class="string">&quot;1997-09-08&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;添加了&quot;</span> + insertCount + <span class="string">&quot;条记录&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.closeResource(conn, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试查询</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * BeanHandler: 是ResultSetHandler接口的实现类,用于封装表中的一条记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuery1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">            conn = JDBCUtils.getConnection3();</span><br><span class="line">            String sql = <span class="string">&quot;select id,name,email,birth from customer where id=?&quot;</span>;</span><br><span class="line">            BeanHandler&lt;Customer&gt; handler = <span class="keyword">new</span> BeanHandler&lt;&gt;(Customer.class);</span><br><span class="line">            Customer customer = runner.query(conn, sql, handler, <span class="number">2</span>);</span><br><span class="line">            System.out.println(customer);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.closeResource(conn, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * BeanListHandler: 是ResultSetHandler接口的实现类,用于封装表中的多条记录构成的集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuery2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">            conn = JDBCUtils.getConnection3();</span><br><span class="line">            String sql = <span class="string">&quot;select id,name,email,birth from customer where id&lt;?&quot;</span>;</span><br><span class="line">            BeanListHandler&lt;Customer&gt; handler = <span class="keyword">new</span> BeanListHandler&lt;&gt;(Customer.class);</span><br><span class="line">            List&lt;Customer&gt; list = runner.query(conn, sql, handler, <span class="number">8</span>);</span><br><span class="line">            System.out.println(list);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.closeResource(conn, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * MapHandler: 是ResultSetHandler接口的实现类,对应表中的一条记录</span></span><br><span class="line"><span class="comment">     * 将字段及相应字段的值作为map中的key和value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuery3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">            conn = JDBCUtils.getConnection3();</span><br><span class="line">            String sql = <span class="string">&quot;select id,name,email,birth from customer where id=?&quot;</span>;</span><br><span class="line">            MapHandler handler = <span class="keyword">new</span> MapHandler();</span><br><span class="line">            Map&lt;String, Object&gt; map = runner.query(conn, sql, handler, <span class="number">2</span>);</span><br><span class="line">            System.out.println(map);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.closeResource(conn, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * MapListHandler: 是ResultSetHandler接口的实现类,对应表中的多条记录</span></span><br><span class="line"><span class="comment">     * 将字段及相应字段的值作为map中的key和value,将这些map添加到list中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuery4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">            conn = JDBCUtils.getConnection3();</span><br><span class="line">            String sql = <span class="string">&quot;select id,name,email,birth from customer where id&lt;?&quot;</span>;</span><br><span class="line">            MapListHandler handler = <span class="keyword">new</span> MapListHandler();</span><br><span class="line">            List&lt;Map&lt;String, Object&gt;&gt; list = runner.query(conn, sql, handler, <span class="number">8</span>);</span><br><span class="line">            list.forEach(System.out::println);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.closeResource(conn, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ScalarHandler: 用于查询特殊值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuery5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">            conn = JDBCUtils.getConnection3();</span><br><span class="line">            String sql = <span class="string">&quot;select count(*) from customer&quot;</span>;</span><br><span class="line">            ScalarHandler handler = <span class="keyword">new</span> ScalarHandler();</span><br><span class="line">            Long count = (<span class="keyword">long</span>) runner.query(conn, sql, handler);</span><br><span class="line">            System.out.println(count);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.closeResource(conn, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuery6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">            conn = JDBCUtils.getConnection3();</span><br><span class="line">            String sql = <span class="string">&quot;select max(birth) from customer&quot;</span>;</span><br><span class="line">            ScalarHandler handler = <span class="keyword">new</span> ScalarHandler();</span><br><span class="line">            Date maxBirth = (Date) runner.query(conn, sql, handler);</span><br><span class="line">            System.out.println(maxBirth);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.closeResource(conn, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义ResultSetHandler的实现类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuery7</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">            conn = JDBCUtils.getConnection3();</span><br><span class="line">            String sql = <span class="string">&quot;select id,name,email,birth from customer where id=?&quot;</span>;</span><br><span class="line">            ResultSetHandler&lt;Customer&gt; handler = <span class="keyword">new</span> ResultSetHandler&lt;Customer&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Customer <span class="title">handle</span><span class="params">(ResultSet rs)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">                        <span class="keyword">int</span> id = rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                        String name = rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                        String email = rs.getString(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">                        Date birth = rs.getDate(<span class="string">&quot;birth&quot;</span>);</span><br><span class="line">                        Customer customer = <span class="keyword">new</span> Customer(id, name, email, birth);</span><br><span class="line">                        <span class="keyword">return</span> customer;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            Customer customer = runner.query(conn, sql, handler, <span class="number">2</span>);</span><br><span class="line">            System.out.println(customer);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.closeResource(conn, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-自己封装针对于数据表的通用操作"><a href="#4-自己封装针对于数据表的通用操作" class="headerlink" title="4.自己封装针对于数据表的通用操作"></a>4.自己封装针对于数据表的通用操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 封装了针对于数据表的通用的操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseDAO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通用的增删改操作 -- version 2.0 (考虑上事务)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Connection conn, String sql, Object...args)</span> </span>&#123;    <span class="comment">// sql中占位符的个数与可变形参的长度一致</span></span><br><span class="line">        PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1.预编译sql语句,返回PreparedStatement的实例</span></span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            <span class="comment">// 2.填充占位符</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">                ps.setObject(i + <span class="number">1</span>, args[i]);   <span class="comment">// 小心参数声明错误</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 3.执行</span></span><br><span class="line">            ps.execute();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 4.资源的关闭</span></span><br><span class="line">            JDBCUtils.closeResource(<span class="keyword">null</span>, ps);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通用的查询操作,用于返回数据表中的一条记录 -- version 2.0 (考虑上事务)</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getInstance</span><span class="params">(Connection conn, Class&lt;T&gt; clazz, String sql, Object...args)</span> </span>&#123;</span><br><span class="line">        PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">                ps.setObject(i + <span class="number">1</span>, args[i]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            rs = ps.executeQuery();</span><br><span class="line">            <span class="comment">// 获取结果集的元数据 ResultSetMetaData</span></span><br><span class="line">            ResultSetMetaData rsmd = rs.getMetaData();</span><br><span class="line">            <span class="comment">// 通过ResultSetMetaData获取结果集中的列数</span></span><br><span class="line">            <span class="keyword">int</span> columnCount = rsmd.getColumnCount();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">                T t = clazz.newInstance();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; columnCount; i++) &#123;</span><br><span class="line">                    <span class="comment">// 获取列值</span></span><br><span class="line">                    Object columnValue = rs.getObject(i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 获取每个列的列名</span></span><br><span class="line">                    String columnLabel = rsmd.getColumnLabel(i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 给cust对象指定的columnLabel属性,赋值为columnValue,通过反射</span></span><br><span class="line">                    Field field = clazz.getDeclaredField(columnLabel);</span><br><span class="line">                    field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                    field.set(t, columnValue);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.closeResource(<span class="keyword">null</span>, ps, rs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通用的查询操作,用于返回数据表中的多条记录 -- version 2.0 (考虑上事务)</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">getForList</span><span class="params">(Connection conn, Class&lt;T&gt; clazz, String sql, Object...args)</span> </span>&#123;</span><br><span class="line">        PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">                ps.setObject(i + <span class="number">1</span>, args[i]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            rs = ps.executeQuery();</span><br><span class="line">            <span class="comment">// 获取结果集的元数据 ResultSetMetaData</span></span><br><span class="line">            ResultSetMetaData rsmd = rs.getMetaData();</span><br><span class="line">            <span class="comment">// 通过ResultSetMetaData获取结果集中的列数</span></span><br><span class="line">            <span class="keyword">int</span> columnCount = rsmd.getColumnCount();</span><br><span class="line">            <span class="comment">// 创建集合对象</span></span><br><span class="line">            ArrayList&lt;T&gt; list = <span class="keyword">new</span> ArrayList&lt;T&gt;();</span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                T t = clazz.newInstance();</span><br><span class="line">                <span class="comment">// 处理结果集一行数据中的每一个列: 给t对象指定的属性赋值</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; columnCount; i++) &#123;</span><br><span class="line">                    <span class="comment">// 获取列值</span></span><br><span class="line">                    Object columnValue = rs.getObject(i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 获取每个列的列名</span></span><br><span class="line">                    String columnLabel = rsmd.getColumnLabel(i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 给cust对象指定的columnLabel属性,赋值为columnValue,通过反射</span></span><br><span class="line">                    Field field = clazz.getDeclaredField(columnLabel);</span><br><span class="line">                    field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                    field.set(t, columnValue);</span><br><span class="line">                &#125;</span><br><span class="line">                list.add(t);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.closeResource(<span class="keyword">null</span>, ps, rs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于查询特殊值的通用的方法</span></span><br><span class="line">    <span class="keyword">public</span> &lt;E&gt; <span class="function">E <span class="title">getValue</span><span class="params">(Connection conn, String sql, Object...args)</span> </span>&#123;</span><br><span class="line">        PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">                ps.setObject(i + <span class="number">1</span>, args[i]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            rs = ps.executeQuery();</span><br><span class="line">            <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">                <span class="keyword">return</span> (E)rs.getObject(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.closeResource(<span class="keyword">null</span>, ps, rs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-使用数据库连接池"><a href="#5-使用数据库连接池" class="headerlink" title="5.使用数据库连接池"></a>5.使用数据库连接池</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 使用C3P0的数据库连接池技术</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// 数据库连接池只需提供一个即可</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ComboPooledDataSource cpds = <span class="keyword">new</span> ComboPooledDataSource(<span class="string">&quot;helloc3p0&quot;</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection1</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Connection conn = cpds.getConnection();</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 使用DBCP的数据库连接池技术</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource source;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        Properties pros = <span class="keyword">new</span> Properties();</span><br><span class="line">        FileInputStream is = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            is = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">&quot;src/main/resources/dbcp.properties&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            pros.load(is);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            source = BasicDataSourceFactory.createDataSource(pros);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Connection conn = source.getConnection();</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 使用Druid的数据库连接池技术</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource sources;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        Properties pros = <span class="keyword">new</span> Properties();</span><br><span class="line">        InputStream is = ClassLoader.getSystemClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            pros.load(is);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sources = DruidDataSourceFactory.createDataSource(pros);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection3</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Connection conn = sources.getConnection();</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过DbUtils关闭连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conn</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ps</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeResource</span><span class="params">(Connection conn, Statement ps)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        try &#123;</span></span><br><span class="line"><span class="comment">//            DbUtils.close(conn);</span></span><br><span class="line"><span class="comment">//        &#125; catch (SQLException e) &#123;</span></span><br><span class="line"><span class="comment">//            e.printStackTrace();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        try &#123;</span></span><br><span class="line"><span class="comment">//            DbUtils.close(ps);</span></span><br><span class="line"><span class="comment">//        &#125; catch (SQLException e) &#123;</span></span><br><span class="line"><span class="comment">//            e.printStackTrace();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        DbUtils.closeQuietly(conn);</span><br><span class="line">        DbUtils.closeQuietly(ps);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeResource</span><span class="params">(Connection conn, Statement ps, ResultSet rs)</span> </span>&#123;</span><br><span class="line">        DbUtils.closeQuietly(conn);</span><br><span class="line">        DbUtils.closeQuietly(ps);</span><br><span class="line">        DbUtils.closeQuietly(rs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-数据库事务"><a href="#6-数据库事务" class="headerlink" title="6.数据库事务"></a>6.数据库事务</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1.什么叫数据库事务?</span></span><br><span class="line"><span class="comment"> *   事务: 一组逻辑操作单元,使数据从一种状态变换到另一种状态</span></span><br><span class="line"><span class="comment"> *      &gt; 一组逻辑操作单元: 一个或多个DML操作</span></span><br><span class="line"><span class="comment"> * 2.事务处理的原则: 保证多个事务都作为一个工作单元来执行,即使出现了故障,都不能改变这种执行方式</span></span><br><span class="line"><span class="comment"> *   当在一个事务中执行多个操作时,要么所有的事务都被提交,那么这些修改就永久保存</span></span><br><span class="line"><span class="comment"> *   要么数据库管理系统将放弃所作的所有修改,整个事务回滚到最初状态</span></span><br><span class="line"><span class="comment"> * 3.数据一单提交,就不可回滚</span></span><br><span class="line"><span class="comment"> * 4.哪些操作会导致数据的自动提交</span></span><br><span class="line"><span class="comment"> *   &gt; DDL操作一旦执行,都会自动提交</span></span><br><span class="line"><span class="comment"> *     &gt; set autocommit = false对DDL操作失效</span></span><br><span class="line"><span class="comment"> *   &gt; DML默认情况下,一旦执行,就会自动提交</span></span><br><span class="line"><span class="comment"> *     &gt; 我们可以通过set autocommit = false的方式取消DML操作的自动提交</span></span><br><span class="line"><span class="comment"> *   &gt; 默认在关闭连接时,会自动的提交数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通用的增删改操作 -- version 1.0</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String sql, Object...args)</span> </span>&#123;    <span class="comment">// sql中占位符的个数与可变形参的长度一致</span></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1.获取数据库的连接</span></span><br><span class="line">            conn = JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">// 2.预编译sql语句,返回PreparedStatement的实例</span></span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            <span class="comment">// 3.填充占位符</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">                ps.setObject(i + <span class="number">1</span>, args[i]);   <span class="comment">// 小心参数声明错误</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 4.执行</span></span><br><span class="line">            ps.execute();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 5.资源的关闭</span></span><br><span class="line">            JDBCUtils.closeResource(conn, ps);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 未考虑数据库事务下的转账操作!</span></span><br><span class="line"><span class="comment">     * 针对于数据表user_table来说:</span></span><br><span class="line"><span class="comment">     * AA用户给BB用户转账100</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * update user_table set balance=balance-100 where user=&#x27;AA&#x27;</span></span><br><span class="line"><span class="comment">     * update user_table set balance=balance+100 where user=&#x27;BB&#x27;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String sql1 = <span class="string">&quot;update user_table set balance=balance-100 where user=?&quot;</span>;</span><br><span class="line">        update(sql1, <span class="string">&quot;AA&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模拟网络异常</span></span><br><span class="line">        <span class="comment">// System.out.println(10 / 0);</span></span><br><span class="line"></span><br><span class="line">        String sql2 = <span class="string">&quot;update user_table set balance=balance+100 where user=?&quot;</span>;</span><br><span class="line">        update(sql2, <span class="string">&quot;BB&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;转账成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 考虑数据库事务后的转账操作</span></span><br><span class="line">    <span class="comment">// 通用的增删改操作 -- version 2.0 (考虑上事务)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Connection conn, String sql, Object...args)</span> </span>&#123;    <span class="comment">// sql中占位符的个数与可变形参的长度一致</span></span><br><span class="line">        PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1.预编译sql语句,返回PreparedStatement的实例</span></span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            <span class="comment">// 2.填充占位符</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">                ps.setObject(i + <span class="number">1</span>, args[i]);   <span class="comment">// 小心参数声明错误</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 3.执行</span></span><br><span class="line">            ps.execute();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 4.资源的关闭</span></span><br><span class="line">            JDBCUtils.closeResource(<span class="keyword">null</span>, ps);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateWithTx</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 1.取消数据的自动提交</span></span><br><span class="line">            conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">            String sql1 = <span class="string">&quot;update user_table set balance=balance-100 where user=?&quot;</span>;</span><br><span class="line">            update(conn, sql1, <span class="string">&quot;AA&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 模拟网络异常</span></span><br><span class="line">            <span class="comment">// System.out.println(10 / 0);</span></span><br><span class="line"></span><br><span class="line">            String sql2 = <span class="string">&quot;update user_table set balance=balance+100 where user=?&quot;</span>;</span><br><span class="line">            update(conn, sql2, <span class="string">&quot;BB&quot;</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;转账成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2.提交数据</span></span><br><span class="line">            conn.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 3.回滚数据</span></span><br><span class="line">                conn.rollback();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 修改其为自动提交数据</span></span><br><span class="line">            <span class="comment">// 主要针对使用数据库连接池的使用</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.setAutoCommit(<span class="keyword">true</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            JDBCUtils.closeResource(conn, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通用的查询操作,用于返回数据表中的一条记录 -- version 2.0 (考虑上事务)</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getInstance</span><span class="params">(Connection conn, Class&lt;T&gt; clazz, String sql, Object...args)</span> </span>&#123;</span><br><span class="line">        PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">                ps.setObject(i + <span class="number">1</span>, args[i]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            rs = ps.executeQuery();</span><br><span class="line">            <span class="comment">// 获取结果集的元数据 ResultSetMetaData</span></span><br><span class="line">            ResultSetMetaData rsmd = rs.getMetaData();</span><br><span class="line">            <span class="comment">// 通过ResultSetMetaData获取结果集中的列数</span></span><br><span class="line">            <span class="keyword">int</span> columnCount = rsmd.getColumnCount();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">                T t = clazz.newInstance();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; columnCount; i++) &#123;</span><br><span class="line">                    <span class="comment">// 获取列值</span></span><br><span class="line">                    Object columnValue = rs.getObject(i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 获取每个列的列名</span></span><br><span class="line">                    String columnLabel = rsmd.getColumnLabel(i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 给cust对象指定的columnLabel属性,赋值为columnValue,通过反射</span></span><br><span class="line">                    Field field = clazz.getDeclaredField(columnLabel);</span><br><span class="line">                    field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                    field.set(t, columnValue);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.closeResource(<span class="keyword">null</span>, ps, rs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTransactionSelect</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Connection conn = JDBCUtils.getConnection();</span><br><span class="line">        <span class="comment">// 获取当前连接的隔离级别</span></span><br><span class="line">        System.out.println(conn.getTransactionIsolation());</span><br><span class="line">        <span class="comment">// 设置数据库的隔离级别:</span></span><br><span class="line">        conn.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);</span><br><span class="line">        <span class="comment">// 取消自动提交数据</span></span><br><span class="line">        conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">        String sql = <span class="string">&quot;select user,password,balance from user_table where user=?&quot;</span>;</span><br><span class="line">        User user = getInstance(conn, User.class, sql, <span class="string">&quot;CC&quot;</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTransactionUpdate</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Connection conn = JDBCUtils.getConnection();</span><br><span class="line">        <span class="comment">// 取消自动提交数据</span></span><br><span class="line">        conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">        String sql = <span class="string">&quot;update user_table set balance=? where user=?&quot;</span>;</span><br><span class="line">        update(conn, sql, <span class="number">5000</span>, <span class="string">&quot;CC&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1500</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;修改结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;Java数据库连接，（Java Database Connectivity，简称JDBC）是Java语言中用来规范客户端程序如何来访问数据库的应用程序接口，提供了诸如查询和更新数据库中数据的方法。JDBC也是Sun Microsystems的商标。我们通常说的JDBC是面向关系型数据库的。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java技术栈" scheme="http://example.com/tags/Java%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    <category term="JDBC" scheme="http://example.com/tags/JDBC/"/>
    
  </entry>
  
  <entry>
    <title>Java Web学习笔记</title>
    <link href="http://example.com/2020/03/05/Java-Web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2020/03/05/Java-Web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-03-05T12:11:16.000Z</published>
    <updated>2021-02-22T15:20:02.991Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Java Web，是用Java技术来解决相关web互联网领域的技术栈。web包括：web服务端和web客户端两部分。Java在客户端的应用有Java Applet，不过使用得很少，Java在服务器端的应用非常的丰富，比如Servlet，JSP、第三方框架等等。Java技术对Web领域的发展注入了强大的动力。</p><a id="more"></a><h2 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1 基本概念"></a>1 基本概念</h2><h3 id="1-1-前言"><a href="#1-1-前言" class="headerlink" title="1.1 前言"></a>1.1 前言</h3><p>web开发:</p><ul><li><p>web 网页的意思</p></li><li><p>静态web</p><ul><li>html, css</li><li>提供给所有人看的数据始终不会发生变化</li></ul></li><li><p>动态web</p><ul><li><p>淘宝,几乎是所有的网站。</p></li><li><p>提供给所有人看的数据始终会发生变化,每个人在不同的时间,在不同的地点看到的信息各不相同</p></li><li><p>技术栈: Servlet/JSP, ASP, PHP</p></li></ul></li></ul><ul><li>在Java中,动态web资源开发的技术统称为JavaWeb</li></ul><h3 id="1-2-web应用程序"><a href="#1-2-web应用程序" class="headerlink" title="1.2 web应用程序"></a>1.2 web应用程序</h3><p>web应用程序: 可以提供浏览器访问的程序</p><ul><li><p>a.html, b.html…..多个web资源,这些web资源可以被外界访问,对外界提供服务</p></li><li><p>访问到的任何一个页面或者资源,都存在于世界某一个角落的计算机上</p></li><li><p>URL</p></li><li><p>这个统一的web资源会被放在同一个文件夹下,web应用程序 –&gt; Tomcat服务器</p></li><li><p>一个web应用由多部分组成 (静态web, 动态web)</p><ul><li>html, css, js</li><li>jsp, servlet</li><li>java程序</li><li>jar包</li><li>配置文件 (Properties)</li></ul></li><li><p>web应用程序编写完毕后,若想提供给外界访问,需要一个服务器来统一管理</p></li></ul><h3 id="1-3-静态web"><a href="#1-3-静态web" class="headerlink" title="1.3 静态web"></a>1.3 静态web</h3><ul><li><p>*.htm, *.html 这些都是网页的后缀,如果服务器上一直存在这些东西,我们就可以直接读取</p></li><li><p>静态web存在的缺点</p><ul><li>Web页面无法动态更新,所有用户看到都是同一页面<ul><li>轮播图,点击特效: 微动态</li><li>JavaScript (实际开发中它用的最多)</li><li>VBScript</li></ul></li><li>它无法和数据库交互 (数据无法持久化,用户无法交互)</li></ul></li></ul><h3 id="1-4-动态web"><a href="#1-4-动态web" class="headerlink" title="1.4 动态web"></a>1.4 动态web</h3><p>页面会动态展示: “Web的页面展示效果因人而异”</p><p>缺点:</p><ul><li>假如服务器的动态web资源出现错误,我们需要重新编写我们的后台程序,重新发布<ul><li>停机维护</li></ul></li></ul><p>优点:</p><ul><li>Web页面无法动态更新,所有用户看到都不是同一页面</li><li>它可以与数据库交互 (数据持久化: 注册,商品信息,用户信息)</li></ul><h2 id="2-web服务器"><a href="#2-web服务器" class="headerlink" title="2 web服务器"></a>2 web服务器</h2><h3 id="2-1-技术讲解"><a href="#2-1-技术讲解" class="headerlink" title="2.1 技术讲解"></a>2.1 技术讲解</h3><p>ASP:</p><ul><li>微软: 国内最早流行</li><li>在HTML中嵌入了VB的脚本: ASP + COM</li><li>在ASP开发中,基本一个页面都有几千行的业务代码,页面及其混乱</li><li>维护成本高</li></ul><p>PHP:</p><ul><li>PHP开发速度很快,功能强大,跨平台,代码简单</li><li>无法承载大访问量的情况 (局限性)</li></ul><p>JSP/Servlet:</p><ul><li>C/S: 客户端和服务器</li><li>B/S: 浏览器和服务器<ul><li>sun公司主推的B/S架构</li><li>基于java语言的 (所有大公司,或者一些开源的组件,都是java写的)</li><li>可以承载高并发,高可用,高性能问题带来的影响</li><li>语法像ASP</li></ul></li></ul><h3 id="2-2-web服务器"><a href="#2-2-web服务器" class="headerlink" title="2.2 web服务器"></a>2.2 web服务器</h3><p>服务器是一种被动的操作,用来处理用户的请求和给用户一些响应的信息</p><p><strong>IIS:</strong></p><p>微软的,Windows自带</p><p><strong>Tomcat:</strong></p><p>Tomcat 服务器是一个免费的开放源代码的Web 应用服务器,属于轻量级应用服务器,在中小型系统和并发访问用户不是很多的场合下被普遍使用,是开发和调试JSP 程序的首选,对于一个初学者来说,可以这样认为,当在一台机器上配置好Apache 服务器,可利用它响应HTML(标准通用标记语言下的一个应用)页面的访问请求,实际上Tomcat是Apache 服务器的扩展,但运行时它是独立运行的,所以当你运行tomcat 时,它实际上作为一个与Apache 独立的进程单独运行的。 </p><h2 id="3-Tomcat"><a href="#3-Tomcat" class="headerlink" title="3 Tomcat"></a>3 Tomcat</h2><ul><li>tomcat默认端口号: 8080</li><li>mysql默认端口号: 3306</li><li>http默认端口号: 80</li><li>https默认端口号: 443</li></ul><h3 id="3-1-配置"><a href="#3-1-配置" class="headerlink" title="3.1 配置"></a>3.1 配置</h3><p>更改端口号 (apache-tomcat-9.0.31\conf\server.xml\86行)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8888&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>配置主机名称 (apache-tomcat-9.0.31\conf\server.xml\152行, 还需修改本地hosts文件)</p><ul><li>默认的主机名为: localhost –&gt; 127.0.0.1</li><li>默认网站应用存放的位置为: webapps</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;www.test.com&quot;</span>  <span class="attr">appBase</span>=<span class="string">&quot;webapps&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">unpackWARs</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="常见面试题"><a href="#常见面试题" class="headerlink" title="常见面试题"></a>常见面试题</h4><p>请你谈谈网站是如何进行访问的?</p><p>1.输入一个域名,回车</p><p>2.检查本机的C:\Windows\System32\drivers\etc\hosts配置文件下有没有这个域名的映射</p><p>有: 直接返回对应的IP地址,这个地址中,有我们需要的web程序,可以直接访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1www.test.com</span><br></pre></td></tr></table></figure><p>没有: 去DNS服务器找,找到返回,找不到报错</p><h3 id="3-2-发布一个web网站"><a href="#3-2-发布一个web网站" class="headerlink" title="3.2 发布一个web网站"></a>3.2 发布一个web网站</h3><ul><li>将自己写的网站,放到Tomcat服务器中指定的web应用的文件夹(webapps)下,就可以访问了</li></ul><p><strong>Tomcat目录:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">--webapps: Tomcat服务器的web目录</span><br><span class="line">    -ROOT</span><br><span class="line">    -xxx: 网站的目录名</span><br><span class="line">        -WEB-INF</span><br><span class="line">            -classes: java程序</span><br><span class="line">            -lib: web应用所依赖的jar包</span><br><span class="line">        -web.xml: 网站配置文件</span><br><span class="line">    -index.html默认的首页</span><br><span class="line">        -static</span><br><span class="line">            -css</span><br><span class="line">            -style.css</span><br><span class="line">           -js</span><br><span class="line">            -img</span><br></pre></td></tr></table></figure><h2 id="4-HTTP"><a href="#4-HTTP" class="headerlink" title="4 HTTP"></a>4 HTTP</h2><h3 id="4-1-什么是HTTP"><a href="#4-1-什么是HTTP" class="headerlink" title="4.1 什么是HTTP"></a>4.1 什么是HTTP</h3><p>HTTP(超文本传输协议)是一个简单地请求 - 响应协议,它通常运行在TCP上</p><ul><li>文本: html, 字符串……</li><li>超文本: 图片,音乐,视频,定位,地图</li><li>端口号: 80</li></ul><p>Https: 安全的</p><ul><li>端口号: 443</li></ul><h3 id="4-2-两个时代"><a href="#4-2-两个时代" class="headerlink" title="4.2 两个时代"></a>4.2 两个时代</h3><ul><li>HTTP第一代<ul><li>HTTP/1.0: 客户端可以与web服务器连接后,只能获得一个web资源,断开连接</li></ul></li><li>HTTP第二代<ul><li>HTTP/1.1: 客户端可以与web服务器连接后,可以获得多个web资源</li></ul></li></ul><h3 id="4-3-HTTP请求"><a href="#4-3-HTTP请求" class="headerlink" title="4.3 HTTP请求"></a>4.3 HTTP请求</h3><ul><li>客户端 –&gt; 发请求(Request) –&gt; 服务器</li></ul><p>百度:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Request URL:https:www.baidu.com&#x2F;&#x2F; 请求地址</span><br><span class="line">Request Method:GET   &#x2F;&#x2F; get方法&#x2F;post方法</span><br><span class="line">Status Code:200 OK   &#x2F;&#x2F; 状态码: 200</span><br><span class="line">Remote(远程) Address:14.215.199.39:443</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Accept:text&#x2F;html</span><br><span class="line">Accept-Encoding:gzip,deflate,br</span><br><span class="line">Accept-Language:zh-CN,zh;q&#x3D;0.9&#x2F;&#x2F; 语言</span><br><span class="line">Cache-Control:max-age&#x3D;0</span><br><span class="line">Connection:keep-alive</span><br></pre></td></tr></table></figure><h4 id="4-3-1-请求行"><a href="#4-3-1-请求行" class="headerlink" title="4.3.1 请求行"></a>4.3.1 请求行</h4><ul><li>请求行中的请求方式: GET</li><li>请求方式: Get, Post……<ul><li> get: 请求能够携带的参数比较少,大小有限制,会在浏览器的URL地址栏中显示数据内容,不安全,但高效</li><li> post: 请求能够携带的参数没有限制,大小没有限制,不会在浏览器的URL地址栏中显示数据内容,安全,但不高效</li></ul></li></ul><h4 id="4-3-2-消息头"><a href="#4-3-2-消息头" class="headerlink" title="4.3.2 消息头"></a>4.3.2 消息头</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Accept&#x2F;&#x2F; 告诉浏览器它所支持的数据类型</span><br><span class="line">Accept-Encoding &#x2F;&#x2F; 支持哪种编码格式 GBK UTF-8 GB2312</span><br><span class="line">Accept-Language&#x2F;&#x2F; 告诉浏览器它的语言环境</span><br><span class="line">Cache-Control&#x2F;&#x2F; 缓存控制</span><br><span class="line">Connection&#x2F;&#x2F; 告诉浏览器，请求完是断开还是保持连接</span><br><span class="line">Host&#x2F;&#x2F; 表示主机</span><br></pre></td></tr></table></figure><h3 id="4-4-HTTP响应"><a href="#4-4-HTTP响应" class="headerlink" title="4.4 HTTP响应"></a>4.4 HTTP响应</h3><ul><li>服务器 –&gt; 响应 –&gt; 客户端</li></ul><p>百度:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control:private&#x2F;&#x2F; 缓存控制</span><br><span class="line">Connection:Keep-Alive&#x2F;&#x2F; 连接</span><br><span class="line">Content-Encoding:gzip&#x2F;&#x2F; 编码</span><br><span class="line">Content-Type:text&#x2F;html&#x2F;&#x2F; 类型</span><br></pre></td></tr></table></figure><h4 id="4-4-1-响应体"><a href="#4-4-1-响应体" class="headerlink" title="4.4.1 响应体"></a>4.4.1 响应体</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Accept&#x2F;&#x2F; 告诉浏览器它所支持的数据类型</span><br><span class="line">Accept-Encoding &#x2F;&#x2F; 支持哪种编码格式 GBK UTF-8 GB2312</span><br><span class="line">Accept-Language&#x2F;&#x2F; 告诉浏览器它的语言环境</span><br><span class="line">Cache-Control&#x2F;&#x2F; 缓存控制</span><br><span class="line">Connection&#x2F;&#x2F; 告诉浏览器，请求完是断开还是保持连接</span><br><span class="line">Host&#x2F;&#x2F; 表示主机</span><br><span class="line">Refresh&#x2F;&#x2F; 告诉客户端多有刷新一次</span><br><span class="line">Location&#x2F;&#x2F; 让网页重新定位</span><br></pre></td></tr></table></figure><h4 id="4-4-2-响应状态码-重点"><a href="#4-4-2-响应状态码-重点" class="headerlink" title="4.4.2 响应状态码 (重点)"></a>4.4.2 响应状态码 (重点)</h4><ul><li>200: 请求响应成功</li><li>3XX: 请求重定向<ul><li>重定向: 你重新到我给你的新位置</li></ul></li><li>4XX: 找不到资源 404</li><li>5XX: 服务器代码错误 500<ul><li>502: 网关错误</li></ul></li></ul><h4 id="常见面试题-1"><a href="#常见面试题-1" class="headerlink" title="常见面试题"></a>常见面试题</h4><p>当你的浏览器中地址栏输入地址并回车的一瞬间到页面能过展示回来,经历了什么？</p><h2 id="5-Maven"><a href="#5-Maven" class="headerlink" title="5 Maven"></a>5 Maven</h2><p>为什么学习这个技术?</p><p>1.在Javaweb开发中,需要使用大量的jar包,需要我们自己导入</p><p>2.如何能够让一个东西自动帮我们导入和配置这个jar包</p><p>3.由此,Maven诞生了!</p><h3 id="5-1-Maven项目架构管理工具"><a href="#5-1-Maven项目架构管理工具" class="headerlink" title="5.1 Maven项目架构管理工具"></a>5.1 Maven项目架构管理工具</h3><p>我们目前用来方便导入jar包</p><p>Maven核心思想：<strong>约定大于配置</strong></p><ul><li>有约束，不要去违反</li></ul><p>Maven会规定好你该如何去编写我们的Java代码，必须按照这个规范来；</p><h3 id="5-2-配置环境变量"><a href="#5-2-配置环境变量" class="headerlink" title="5.2 配置环境变量"></a>5.2 配置环境变量</h3><p>在系统环境变量中</p><p>配置如下:</p><ul><li>M2_HOME: D:\apache-maven-3.6.3\bin</li><li>MAVEN_HOME: D:\apache-maven-3.6.3</li><li>Path里面配置: %MAVEN_HOME%\bin</li></ul><h3 id="5-3-阿里云镜像"><a href="#5-3-阿里云镜像" class="headerlink" title="5.3 阿里云镜像"></a>5.3 阿里云镜像</h3><ul><li>镜像: mirrors<ul><li>作用: 加速我们的下载</li></ul></li><li>国内建议使用阿里云镜像</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在apache-maven-3.6.1\conf\settings处配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-4-本地仓库"><a href="#5-4-本地仓库" class="headerlink" title="5.4 本地仓库"></a>5.4 本地仓库</h3><p>在本地的仓库,对应远程仓库</p><p>建立一个本地仓库: localRepository</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在apache-maven-3.6.1\conf\settings处配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\apache-maven-3.6.1\maven-repo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-5-在IDEA中使用MAVEN"><a href="#5-5-在IDEA中使用MAVEN" class="headerlink" title="5.5 在IDEA中使用MAVEN"></a>5.5 在IDEA中使用MAVEN</h3><p>1.启动IDEA</p><p>2.创建一个Maven项目</p><p>3.等待初始化完毕</p><h3 id="5-6-在IDEA中配置Tomcat"><a href="#5-6-在IDEA中配置Tomcat" class="headerlink" title="5.6 在IDEA中配置Tomcat"></a>5.6 在IDEA中配置Tomcat</h3><p>会出现警告,提示fix：必须要配置项目</p><p>为什么会有这个问题: 我们访问一个网站,需要制定一个文件夹的名字</p><h3 id="5-7-pom文件"><a href="#5-7-pom文件" class="headerlink" title="5.7 pom文件"></a>5.7 pom文件</h3><p>pom.xml是Maven的核心配置文件</p><p>maven由于他的约定大于配置，我们之后可能遇到我们写的配置文件无法被导出或者生效的问题,解决方案:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在build中配置resources,来防止我们资源导出失败的问题--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-8-替换webapps版本"><a href="#5-8-替换webapps版本" class="headerlink" title="5.8 替换webapps版本"></a>5.8 替换webapps版本</h3><p>更改web.xml文件替换为webapps版本和Tomcat一致</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-9-Maven远程仓库"><a href="#5-9-Maven远程仓库" class="headerlink" title="5.9 Maven远程仓库"></a>5.9 Maven远程仓库</h3><p>地址: <a href="https://mvnrepository.com/">https://mvnrepository.com/</a></p><h2 id="6-Servlet"><a href="#6-Servlet" class="headerlink" title="6 Servlet"></a>6 Servlet</h2><h3 id="6-1-Servlet简介"><a href="#6-1-Servlet简介" class="headerlink" title="6.1 Servlet简介"></a>6.1 Servlet简介</h3><ul><li><p>Servlet就是sun公司开发动态web的一门技术</p></li><li><p>Sun在这些API中提供一个接口: Servlet,如果你想开发一个Servlet程序,只需要完成两个步骤:</p><ul><li>编写一个类,实现Servlet接口</li><li>把开发好的java类部署到web服务器中</li></ul></li><li><p>把实现了Servlet接口的java程序叫做 – Servlet</p></li></ul><h3 id="6-2-HelloServlet"><a href="#6-2-HelloServlet" class="headerlink" title="6.2 HelloServlet"></a>6.2 HelloServlet</h3><p>1.Servlet接口在Sun公司有两个默认的实现类: HttpServlet, GenericServlet</p><p>2.关于Maven父子工程</p><p>父项目中会有:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>servlet<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子项目中会有:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javaweb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.dairycode<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>LTS<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>父项目中的java子项目可以直接使用</p><p>3.编写一个Servlet程序</p><ul><li><p>编写一个普通类</p></li><li><p>实现Servlet接口,直接继承HttpServlet</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="comment">//由于get或者post只是请求实现的不同的方式,可以相互调用,因为业务逻辑一样</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// ServletOutputStream outputStream = resp.getOutputStream();</span></span><br><span class="line">        PrintWriter writer = resp.getWriter();<span class="comment">//响应流</span></span><br><span class="line">        writer.print(<span class="string">&quot;Hello Servlet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.编写Servlet的映射</p><p>为什么要映射: 我们写的是Java程序,但是要通过浏览器访问,而浏览器需要连接web服务器,所以我们需要在web服务中注册我们写的Servlet,还需给他一个浏览器能够访问的路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册Servlet --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.github.dairycode.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Servlet请求路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>5.配置Tomcat</p><p>6.启动测试</p><h3 id="6-3-Servlet原理"><a href="#6-3-Servlet原理" class="headerlink" title="6.3 Servlet原理"></a>6.3 Servlet原理</h3><p>Servlet是由Web服务器调用,web服务器在收到浏览器请求之后,会…</p><h3 id="6-4-Mapping问题"><a href="#6-4-Mapping问题" class="headerlink" title="6.4 Mapping问题"></a>6.4 Mapping问题</h3><p>1.一个Servlet可以指定一个映射路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.一个Servlet可以指定多个映射路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello2<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.一个Servlet可以指定通用映射路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4.默认请求路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>5.制定一些后缀或者前缀等</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 没有&quot;/&quot; --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.dairy<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>6.优先级问题</p><p>制定了固有的映射路径优先级最高,如果找不到就会走默认的处理请求</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 404 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>error<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.github.dairycode.ErrorServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>error<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-5-SevletContext"><a href="#6-5-SevletContext" class="headerlink" title="6.5 SevletContext"></a>6.5 SevletContext</h3><p>web容器在启动的时候,它会为每个web程序都创建一个对应的ServletContext对象,它代表了当前的web应用</p><h4 id="6-5-1-共享数据"><a href="#6-5-1-共享数据" class="headerlink" title="6.5.1 共享数据"></a>6.5.1 共享数据</h4><p>我在这个Servlet中保存的数据,可以在另一个Servlet中拿到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        String username = (String) context.getAttribute(<span class="string">&quot;username&quot;</span>);</span><br><span class="line"></span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        resp.getWriter().print(<span class="string">&quot;名字：&quot;</span> + username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>测试访问结果</p><h4 id="6-5-2-获取初始化参数"><a href="#6-5-2-获取初始化参数" class="headerlink" title="6.5.2 获取初始化参数"></a>6.5.2 获取初始化参数</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置一些web应用初始化参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>url<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>jdbc:mysql://localhost:3306/mybatis<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        String url = context.getInitParameter(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        resp.getWriter().print(url);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="6-5-3-请求转发"><a href="#6-5-3-请求转发" class="headerlink" title="6.5.3 请求转发"></a>6.5.3 请求转发</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        System.out.println(<span class="string">&quot;进入了该方法&quot;</span>);</span><br><span class="line"><span class="comment">//        RequestDispatcher requestDispatcher = context.getRequestDispatcher(&quot;/gp&quot;);// 转发的请求路径</span></span><br><span class="line"><span class="comment">//        requestDispatcher.forward(req,resp);// forward() 转发的作用 ,实现请求转发</span></span><br><span class="line">        context.getRequestDispatcher(<span class="string">&quot;/gp&quot;</span>).forward(req,resp);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="6-5-4-读取资源文件"><a href="#6-5-4-读取资源文件" class="headerlink" title="6.5.4 读取资源文件"></a>6.5.4 读取资源文件</h4><p>Properties</p><ul><li>在java目录下新建properties</li><li>在resources目录下新建properties</li></ul><p>发现: 都被打包到了同一个路径下classes, 这个路径俗称classpath</p><p>思路: 需要一个文件流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        InputStream is = <span class="keyword">this</span>.getServletContext().getResourceAsStream(<span class="string">&quot;/WEB-INF/classes/db.properties&quot;</span>);</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.load(is);</span><br><span class="line">        String username = properties.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        String password = properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        resp.getWriter().print(username + <span class="string">&quot; &quot;</span> + password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="6-6-HttpSevletResponse"><a href="#6-6-HttpSevletResponse" class="headerlink" title="6.6 HttpSevletResponse"></a>6.6 HttpSevletResponse</h3><ul><li>web服务器接收到客户端的HTTP请求,针对这个请求,分别创建一个代表请求的HttpSevletRequest对象,代表响应的一个HttpSevletRequest<ul><li>如果要获取客户端请求过来的参数: 找HttpSevletResponse</li><li>如果要给客户端响应一些信息: 找HttpSevletRequest</li></ul></li></ul><h4 id="6-6-1-简单分类"><a href="#6-6-1-简单分类" class="headerlink" title="6.6.1 简单分类"></a>6.6.1 简单分类</h4><p>负责向浏览器发送数据的方法 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ServletOutputStream <span class="title">getOutputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"><span class="function">PrintWriter <span class="title">getWriter</span><span class="params">()</span> throwsIOException</span>;</span><br></pre></td></tr></table></figure><p>负责向浏览器发送响应头的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setCharacterEncoding</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setContentLength</span><span class="params">(<span class="keyword">int</span> var1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setContentLengthLong</span><span class="params">(<span class="keyword">long</span> var1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setContentType</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setDateHeader</span><span class="params">(String var1, <span class="keyword">long</span> var2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addDateHeader</span><span class="params">(String var1, <span class="keyword">long</span> var2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setHeader</span><span class="params">(String var1, String var2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addHeader</span><span class="params">(String var1, String var2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setIntHeader</span><span class="params">(String var1, <span class="keyword">int</span> var2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addIntHeader</span><span class="params">(String var1, <span class="keyword">int</span> var2)</span></span>;</span><br></pre></td></tr></table></figure><p>响应状态码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> SC_CONTINUE = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> SC_SWITCHING_PROTOCOLS = <span class="number">101</span>;</span><br><span class="line"><span class="keyword">int</span> SC_OK = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">int</span> SC_CREATED = <span class="number">201</span>;</span><br><span class="line"><span class="keyword">int</span> SC_ACCEPTED = <span class="number">202</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NON_AUTHORITATIVE_INFORMATION = <span class="number">203</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NO_CONTENT = <span class="number">204</span>;</span><br><span class="line"><span class="keyword">int</span> SC_RESET_CONTENT = <span class="number">205</span>;</span><br><span class="line"><span class="keyword">int</span> SC_PARTIAL_CONTENT = <span class="number">206</span>;</span><br><span class="line"><span class="keyword">int</span> SC_MULTIPLE_CHOICES = <span class="number">300</span>;</span><br><span class="line"><span class="keyword">int</span> SC_MOVED_PERMANENTLY = <span class="number">301</span>;</span><br><span class="line"><span class="keyword">int</span> SC_MOVED_TEMPORARILY = <span class="number">302</span>;</span><br><span class="line"><span class="keyword">int</span> SC_FOUND = <span class="number">302</span>;</span><br><span class="line"><span class="keyword">int</span> SC_SEE_OTHER = <span class="number">303</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NOT_MODIFIED = <span class="number">304</span>;</span><br><span class="line"><span class="keyword">int</span> SC_USE_PROXY = <span class="number">305</span>;</span><br><span class="line"><span class="keyword">int</span> SC_TEMPORARY_REDIRECT = <span class="number">307</span>;</span><br><span class="line"><span class="keyword">int</span> SC_BAD_REQUEST = <span class="number">400</span>;</span><br><span class="line"><span class="keyword">int</span> SC_UNAUTHORIZED = <span class="number">401</span>;</span><br><span class="line"><span class="keyword">int</span> SC_PAYMENT_REQUIRED = <span class="number">402</span>;</span><br><span class="line"><span class="keyword">int</span> SC_FORBIDDEN = <span class="number">403</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NOT_FOUND = <span class="number">404</span>;</span><br><span class="line"><span class="keyword">int</span> SC_METHOD_NOT_ALLOWED = <span class="number">405</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NOT_ACCEPTABLE = <span class="number">406</span>;</span><br><span class="line"><span class="keyword">int</span> SC_PROXY_AUTHENTICATION_REQUIRED = <span class="number">407</span>;</span><br><span class="line"><span class="keyword">int</span> SC_REQUEST_TIMEOUT = <span class="number">408</span>;</span><br><span class="line"><span class="keyword">int</span> SC_CONFLICT = <span class="number">409</span>;</span><br><span class="line"><span class="keyword">int</span> SC_GONE = <span class="number">410</span>;</span><br><span class="line"><span class="keyword">int</span> SC_LENGTH_REQUIRED = <span class="number">411</span>;</span><br><span class="line"><span class="keyword">int</span> SC_PRECONDITION_FAILED = <span class="number">412</span>;</span><br><span class="line"><span class="keyword">int</span> SC_REQUEST_ENTITY_TOO_LARGE = <span class="number">413</span>;</span><br><span class="line"><span class="keyword">int</span> SC_REQUEST_URI_TOO_LONG = <span class="number">414</span>;</span><br><span class="line"><span class="keyword">int</span> SC_UNSUPPORTED_MEDIA_TYPE = <span class="number">415</span>;</span><br><span class="line"><span class="keyword">int</span> SC_REQUESTED_RANGE_NOT_SATISFIABLE = <span class="number">416</span>;</span><br><span class="line"><span class="keyword">int</span> SC_EXPECTATION_FAILED = <span class="number">417</span>;</span><br><span class="line"><span class="keyword">int</span> SC_INTERNAL_SERVER_ERROR = <span class="number">500</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NOT_IMPLEMENTED = <span class="number">501</span>;</span><br><span class="line"><span class="keyword">int</span> SC_BAD_GATEWAY = <span class="number">502</span>;</span><br><span class="line"><span class="keyword">int</span> SC_SERVICE_UNAVAILABLE = <span class="number">503</span>;</span><br><span class="line"><span class="keyword">int</span> SC_GATEWAY_TIMEOUT = <span class="number">504</span>;</span><br><span class="line"><span class="keyword">int</span> SC_HTTP_VERSION_NOT_SUPPORTED = <span class="number">505</span>;</span><br></pre></td></tr></table></figure><h4 id="6-6-2-常见应用"><a href="#6-6-2-常见应用" class="headerlink" title="6.6.2 常见应用"></a>6.6.2 常见应用</h4><p>1.向浏览器输出消息</p><p>2.下载文件</p><ul><li><p>要获取下载文件的路径</p></li><li><p>下载的文件名</p></li><li><p>设置想办法让浏览器能够支持我们下载我们需要的东西</p></li><li><p>获取下载文件的输入流</p></li><li><p>创建缓冲区</p></li><li><p>获取OutputStream对象</p></li><li><p>将FileOutputStream流写入到buffer缓冲区</p></li><li><p>使用OutputStream将缓冲区中的数据输出到客户端</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 1.要获取下载文件的路径</span></span><br><span class="line">    String realPath = <span class="string">&quot;C:\\Users\\xxx\\Projects\\JavaWeb\\Response\\src\\main\\resources\\1.jpg&quot;</span>;</span><br><span class="line">    System.out.println(<span class="string">&quot;下载文件的路径:&quot;</span> + realPath);</span><br><span class="line">    <span class="comment">// 2.下载的文件名</span></span><br><span class="line">    String filename = realPath.substring(realPath.lastIndexOf(<span class="string">&quot;\\&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 3.设置想办法让浏览器能够支持(Content-Disposition)我们下载我们需要的东西</span></span><br><span class="line">    <span class="comment">// 中文文件名URLEncoder.encode编码,例如URLEncoder.encode(filename,&quot;UTF-8&quot;)</span></span><br><span class="line">    resp.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment;filename=&quot;</span> + filename);</span><br><span class="line">    <span class="comment">// 4.获取下载文件的输入流</span></span><br><span class="line">    FileInputStream in = <span class="keyword">new</span> FileInputStream(realPath);</span><br><span class="line">    <span class="comment">// 5.创建缓冲区</span></span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="comment">// 6.获取OutputStream对象</span></span><br><span class="line">    ServletOutputStream out = resp.getOutputStream();</span><br><span class="line">    <span class="comment">// 7.将FileOutputStream流写入到buffer缓冲区</span></span><br><span class="line">    <span class="comment">// 8.使用OutputStream将缓冲区中的数据输出到客户端</span></span><br><span class="line">    <span class="keyword">while</span>((len=in.read(buffer))&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        out.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">    &#125;</span><br><span class="line">    in.close();</span><br><span class="line">    out.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-6-3-验证码功能"><a href="#6-6-3-验证码功能" class="headerlink" title="6.6.3 验证码功能"></a>6.6.3 验证码功能</h4><p>验证码怎么来的?</p><ul><li>前端实现</li><li>后端实现,需要用到Java的图片类,生成一个图片</li></ul><h3 id="6-7-HttpSevletRequset"><a href="#6-7-HttpSevletRequset" class="headerlink" title="6.7 HttpSevletRequset"></a>6.7 HttpSevletRequset</h3><p>HttpSevletRequest代表客户端的请求,用户通过Http协议访问服务器,HTTP请求中的所有信息会被封装到HttpServletRequest,通过这个HttpServletRequest的方法,获得客户端的所有信息</p><h4 id="6-7-1-获取参数-请求转发"><a href="#6-7-1-获取参数-请求转发" class="headerlink" title="6.7.1 获取参数 请求转发"></a>6.7.1 获取参数 请求转发</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">req.getParameter(String s) <span class="comment">// String</span></span><br><span class="line">req.getParameterValues(String s)<span class="comment">// String[]</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    req.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    resp.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">    String username = req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    String password = req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    String[] hobbies = req.getParameterValues(<span class="string">&quot;hobby&quot;</span>);</span><br><span class="line">        </span><br><span class="line">    System.out.println(<span class="string">&quot;---------------------------&quot;</span>);</span><br><span class="line">    System.out.println(username);</span><br><span class="line">    System.out.println(password);</span><br><span class="line">    System.out.println(Arrays.toString(hobbies));</span><br><span class="line">    System.out.println(<span class="string">&quot;---------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过请求转发</span></span><br><span class="line">    <span class="comment">//这里的 &quot;/&quot; 代表当前的web应用</span></span><br><span class="line">    req.getRequestDispatcher(<span class="string">&quot;/success.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="常见面试题-2"><a href="#常见面试题-2" class="headerlink" title="常见面试题"></a>常见面试题</h4><p>请你聊聊重定向和转发的区别?</p><p>相同点:</p><ul><li>页面都会实现跳转</li></ul><p>不同点:</p><ul><li>请求转发的时候,url不会变化 编号307</li><li>重定向时候,url会发生变化 编号302</li></ul><h2 id="7-Cookie、Session"><a href="#7-Cookie、Session" class="headerlink" title="7 Cookie、Session"></a>7 Cookie、Session</h2><h3 id="7-1-会话"><a href="#7-1-会话" class="headerlink" title="7.1 会话"></a>7.1 会话</h3><p>会话: 用户打开一个浏览器,点击了很多超链接,访问多个web资源,关闭浏览器,这个过程可以称之为会话</p><p>有状态会话: 一个同学来过教室,下次再来教室,我们会知道这个同学曾经来过,称之为有状态会话</p><p>问: 你能怎么证明你是升达的学生?</p><p>1.学生证 (学校给你发学生证cookie)</p><p>2.学校登记 (学校标记你来过了session)</p><p>问: 一个网站怎么证明你来过了?</p><p>1.服务端给客户端一个信件,客户端下次访问服务器带上信件就可以了 (cookie)</p><p>2.服务器登记你来过了,下次你来的时候我来匹配你 (session)</p><h3 id="7-2-保存会话的两种技术"><a href="#7-2-保存会话的两种技术" class="headerlink" title="7.2 保存会话的两种技术"></a>7.2 保存会话的两种技术</h3><p><strong>Cookie</strong></p><ul><li>客户端技术 (响应,请求)</li></ul><p><strong>Session</strong></p><ul><li>服务器技术,利用这个技术可以保存用户的会话信息,我们可以把信息或者数据放在Session中</li></ul><p>常见例子: 网站登陆之后,下次就不需要再次登录</p><h3 id="7-3-Cookie"><a href="#7-3-Cookie" class="headerlink" title="7.3 Cookie"></a>7.3 Cookie</h3><p>1.从请求中拿到Cookie信息</p><p>2.服务器响应给客户端Cookie</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Cookie[] cookies = req.getCookies();<span class="comment">// 获得Cookie</span></span><br><span class="line">cookie.getName();<span class="comment">// 获得cookie中的key</span></span><br><span class="line">cookie.getValue();<span class="comment">// 获得cookie中的值</span></span><br><span class="line"><span class="keyword">new</span> Cookie(<span class="string">&quot;lastLoginTime&quot;</span>, System.currentTimeMillis()+<span class="string">&quot;&quot;</span>);<span class="comment">// 新建一个cookie</span></span><br><span class="line">cookie.setMaxAge(<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>);<span class="comment">// 设置cookie的有效期为1天</span></span><br><span class="line">resp.addCookie(cookie);<span class="comment">//响应给客户端一个cookie</span></span><br></pre></td></tr></table></figure><p>Cookie: 一般会保存在本地的用户目录下 (appdata)</p><p>删除cookie:</p><ul><li>不设置有效期,关闭浏览器,自动失效</li><li>设置有效期时间为0</li></ul><p>编码解码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">URLEncoder.encode(<span class="string">&quot;你好啊!&quot;</span>,<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">URLEncoder.decode(cookie.getValue(),<span class="string">&quot;utf-8&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="7-4-Session-重点"><a href="#7-4-Session-重点" class="headerlink" title="7.4 Session (重点)"></a>7.4 Session (重点)</h3><p>什么是Session:</p><ul><li>服务器会给每一个用户(浏览器)创建一个Session对象</li><li>一个Session独占一个浏览器,只要浏览器没有关闭,这个Session就存在</li><li>用户登录之后,整个网站都可以访问 –&gt; 保存用户信息,保存购物车信息等</li><li>Session能存字符串,也能存入用户信息</li></ul><p>Session和Cookie的区别:</p><ul><li>Cookie是把用户的数据写给用户的浏览器,浏览器保存 (可以保存多个)</li><li>Session把用户的数据写到用户独占Session中,服务器保存(保存重要信息,减少服务器资源浪费)</li><li>Session对象由服务器创建</li></ul><p>使用场景:</p><ul><li>保存一个登陆用户的信息</li><li>购物车信息</li><li>在整个网站中经常会使用的数据,我们将它保存在Session中</li></ul><p>使用Session:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解决乱码问题</span></span><br><span class="line">    resp.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    req.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    resp.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 得到Session</span></span><br><span class="line">    HttpSession session = req.getSession();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给session中存入东西</span></span><br><span class="line">    session.setAttribute(<span class="string">&quot;name&quot;</span>,<span class="keyword">new</span> Person(<span class="string">&quot;桐人&quot;</span>,<span class="number">16</span>));</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 获取Session的ID</span></span><br><span class="line">    String id = session.getId();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断Session是不是新创建的</span></span><br><span class="line">    <span class="keyword">if</span>(session.isNew()) &#123;</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;Session创建成功,ID:&quot;</span> + id);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;Session已经在服务器中存在,ID:&quot;</span> + id);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//        Session创建的时候做了什么事情:</span></span><br><span class="line"><span class="comment">//        Cookie cookie = new Cookie(&quot;JESSIONID&quot;,id);</span></span><br><span class="line"><span class="comment">//        resp.addCookie(cookie);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 得到Session</span></span><br><span class="line">HttpSession session = req.getSession();</span><br><span class="line"></span><br><span class="line">Person name = (Person) session.getAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(name.toString());</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HttpSession session = req.getSession();</span><br><span class="line">session.removeAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="comment">// 手动注销Session</span></span><br><span class="line">session.invalidate();</span><br></pre></td></tr></table></figure><p>会话自动过期: web.xml配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置Session默认的失效时间 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 15分钟后Session自动失效(以分钟为单位) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>1<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="8-JSP"><a href="#8-JSP" class="headerlink" title="8 JSP"></a>8 JSP</h2><h3 id="8-1-什么是JSP"><a href="#8-1-什么是JSP" class="headerlink" title="8.1 什么是JSP"></a>8.1 什么是JSP</h3><p>java Server Pages: Java服务器端页面,也和Servlet一样,用于动态Web技术</p><p>最大的特点:</p><ul><li>写JSP就像在写HTML</li><li>区别:<ul><li>HTML只写给用户提供静态的数据</li><li>JSP页面中可以嵌入java代码,为用户提供动态数据</li></ul></li></ul><h3 id="8-2-JSP原理"><a href="#8-2-JSP原理" class="headerlink" title="8.2 JSP原理"></a>8.2 JSP原理</h3><p>思路: JSP怎么执行?</p><ul><li><p>代码层面无问题</p></li><li><p>服务器内部工作</p><ul><li><p>tomcat中有一个work目录</p></li><li><p>IDEA使用Tomcat的时候会在IDEA的Tomcat中生产一个work目录</p></li><li><p>页面转换为了Java程序</p></li></ul></li></ul><p>浏览器向服务器发送请求，不管访问什么资源，其实都是在访问Servlet</p><p>JSP最终会被转换成为一个Java类</p><p>JSP本质就是一个Servlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_jspInit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 销毁</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_jspDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// JSPServices</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_jspService</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.判断请求</p><p>2.内置一些对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> javax.servlet.jsp.PageContext pagecontext;<span class="comment">// 页面上下文</span></span><br><span class="line">javax.servlet.http.HttpSession session = <span class="keyword">null</span>; <span class="comment">// session</span></span><br><span class="line"><span class="keyword">final</span> javax.servlet.ServletContext application;<span class="comment">// applicationContext</span></span><br><span class="line"><span class="keyword">final</span> javax.servlet.ServletConfig config;<span class="comment">// config</span></span><br><span class="line">javax.servlet.jsp.JspWriter out = <span class="keyword">null</span>;<span class="comment">// out</span></span><br><span class="line"><span class="keyword">final</span> java.lang.Object page = <span class="keyword">this</span>;<span class="comment">// page:当前</span></span><br><span class="line">HttpServletRequest request<span class="comment">// 请求</span></span><br><span class="line">HttpServletResponse response<span class="comment">// 响应</span></span><br></pre></td></tr></table></figure><p>3.输出页面增加的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">response.setContextType(<span class="string">&quot;text/html&quot;</span>);<span class="comment">// 设置响应的页面类型</span></span><br><span class="line">page.Context = _jspxfactory.getPageContext(<span class="keyword">this</span>,request,response,<span class="keyword">null</span>,<span class="keyword">true</span>,<span class="number">8192</span>,<span class="keyword">true</span>);</span><br><span class="line">_jspx_page_context = pageContext;</span><br><span class="line">application = pageContext.getServletContext();</span><br><span class="line">config = pafeContext.getServletConfig();</span><br><span class="line">session = pageContext.getSession();</span><br><span class="line">out = pageContext.getOut();</span><br><span class="line">_jspx_out = out;</span><br></pre></td></tr></table></figure><p>4.以上的这些对象可以再JSP页面中直接使用</p><p>在JSP页面中 ,只要是Java代码就会原封不动地输出</p><p>如果是HTML代码，就会被转换为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">out.write(&quot;&lt;html&gt;\r\n&quot;)</span><br></pre></td></tr></table></figure><p>这样的格式输出到前端</p><h3 id="8-3-JSP基础语法"><a href="#8-3-JSP基础语法" class="headerlink" title="8.3 JSP基础语法"></a>8.3 JSP基础语法</h3><h4 id="8-3-1-JSP表达式"><a href="#8-3-1-JSP表达式" class="headerlink" title="8.3.1 JSP表达式"></a>8.3.1 JSP表达式</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%-- JSP表达式</span><br><span class="line">     作用: 用来将程序的输出发送到客户端</span><br><span class="line">    &lt;%=变量或者表达式%&gt;</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%=<span class="keyword">new</span> java.util.Date()%&gt;</span><br></pre></td></tr></table></figure><h4 id="8-3-2-JSP脚本片段"><a href="#8-3-2-JSP脚本片段" class="headerlink" title="8.3.2 JSP脚本片段"></a>8.3.2 JSP脚本片段</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;%-- JSP脚本片段 --%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">      sum+=i;</span><br><span class="line">    &#125;</span><br><span class="line">    out.println(<span class="string">&quot;&lt;h1&gt;Sum=&quot;</span>+<span class="string">&quot;&lt;/h1&gt;&quot;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h4 id="8-3-3-脚本片段的再实现"><a href="#8-3-3-脚本片段的再实现" class="headerlink" title="8.3.3 脚本片段的再实现"></a>8.3.3 脚本片段的再实现</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line">    out.println(x);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;p&gt;这是一个jsp文档&lt;/p&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="keyword">int</span> y = <span class="number">3</span>;</span><br><span class="line">    out.println(y);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line">&lt;%-- 在代码HTML元素 --%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">%&gt;</span><br><span class="line">    &lt;h1&gt;hello,dairycode $&#123;i&#125;&lt;/h1&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h4 id="8-3-4-JSP声明"><a href="#8-3-4-JSP声明" class="headerlink" title="8.3.4 JSP声明"></a>8.3.4 JSP声明</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Loading Servlet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> glovalVar = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;进入了test方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><ul><li><p>JSP声明: 会被编译到JSP生成JAVA的类中,其他的就会被生成到_jspService方法中</p></li><li><p>在JSP中嵌入Java代码即可</p></li><li><p>JSP的注释不会在客户端显示,HTML会</p></li></ul><h3 id="8-4-JSP指令"><a href="#8-4-JSP指令" class="headerlink" title="8.4 JSP指令"></a>8.4 JSP指令</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page ....%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%-- 提取公共页面 --%&gt;</span><br><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">&quot;&quot;</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%-- 将两个页面合一起 --%&gt;</span><br><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">&quot;common/header.jsp&quot;</span>%&gt;</span><br><span class="line">&lt;h1&gt;</span><br><span class="line">    网页主体</span><br><span class="line">&lt;/h1&gt;</span><br><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">&quot;common/footer.jsp&quot;</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%-- jsp标签</span><br><span class="line">     jsp:include: 拼接页面，本质上还是三个</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;jsp:include page=<span class="string">&quot;common/header.jsp&quot;</span>/&gt;</span><br><span class="line">&lt;h1&gt;</span><br><span class="line">    网页主体</span><br><span class="line">&lt;/h1&gt;</span><br><span class="line">&lt;jsp:include page=<span class="string">&quot;common/footer.jsp&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><h3 id="8-5-9大内置对象"><a href="#8-5-9大内置对象" class="headerlink" title="8.5 9大内置对象"></a>8.5 9大内置对象</h3><ul><li>PageContext: 存东西</li><li>Request: 存东西</li><li>Response</li><li>Session: 存东西</li><li>Application (ServletContext): 存东西</li><li>config (SevletConfig)</li><li>out</li><li>page (不用)</li><li>exception</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pageContext.setAttribute(<span class="string">&quot;name1&quot;</span>,<span class="string">&quot;桐人1号&quot;</span>);<span class="comment">// 保存的数据只在一个页面中有效 </span></span><br><span class="line">request.setAttribute(<span class="string">&quot;name2&quot;</span>,<span class="string">&quot;桐人2号&quot;</span>);<span class="comment">// 保存的数据只在一次请求中有效,请求转发会携带这个数据</span></span><br><span class="line">session.setAttribute(<span class="string">&quot;name3&quot;</span>,<span class="string">&quot;桐人3号&quot;</span>);<span class="comment">// 保存的数据只在一次会话中有效,从打开浏览器到关闭浏览器</span></span><br><span class="line">application.setAttribute(<span class="string">&quot;name4&quot;</span>,<span class="string">&quot;桐人4号&quot;</span>);<span class="comment">// 保存的数据只在一次服务器中有效,从打开服务器到关闭服务器</span></span><br></pre></td></tr></table></figure><p>request: 客户端向服务器发送请求,产生的数据用户用完就无用了,比如: 新闻,用户看完后此消息变得无用</p><p>session: 客户端向服务器发送请求,产生的数据用户用完后一会儿还有用,比如: 购物车</p><p>application: 客户端向服务器发送请求,产生的数据一个用户用完了,其他用户还可能使用,比如聊天数据</p><h2 id="9-JavaBean"><a href="#9-JavaBean" class="headerlink" title="9 JavaBean"></a>9 JavaBean</h2><p>实体类</p><p>JavaBean有特定的写法</p><ul><li>必须要有一个无惨构造</li><li>属性必须私有化</li><li>必须有对应的get/set方法</li></ul><p>一般用来和数据库的字段做映射ORM</p><p>ORM: 对象关系映射</p><ul><li>表 –&gt; 类</li><li>字段 –&gt; 属性</li><li>行记录 –&gt; 对象</li></ul><table><thead><tr><th>id</th><th>name</th><th>age</th><th>address</th></tr></thead><tbody><tr><td>1</td><td>桐人</td><td>22</td><td>日本</td></tr><tr><td>2</td><td>亚丝娜</td><td>23</td><td>日本</td></tr><tr><td>3</td><td>爱丽丝</td><td>24</td><td>日本</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>过滤器</li><li>文件上传</li><li>邮件发送</li><li>JDBC复习: 如何使用JDBC(CRUD)以及JDBC事务</li></ul><h2 id="10-MVC三层架构"><a href="#10-MVC三层架构" class="headerlink" title="10 MVC三层架构"></a>10 MVC三层架构</h2><p>什么是MVC:</p><ul><li>Model: 模型</li><li>View: 视图</li><li>Controller: 控制器</li></ul><h3 id="10-1-远古架构"><a href="#10-1-远古架构" class="headerlink" title="10.1 远古架构"></a>10.1 远古架构</h3><p>用户直接访问控制层,控制层可以直接操作数据库</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">servlet --&gt; CRUD --&gt; 数据库</span><br><span class="line">弊端: 程序臃肿不利于维护</span><br><span class="line">servlet的代码中: 处理请求,响应,视图跳转,处理JDBC,处理业务代码,处理逻辑代码</span><br><span class="line"></span><br><span class="line">优化架构：没有什么是加一层解决不了的</span><br></pre></td></tr></table></figure><h3 id="10-2-MVC三层架构"><a href="#10-2-MVC三层架构" class="headerlink" title="10.2 MVC三层架构"></a>10.2 MVC三层架构</h3><p>Model</p><ul><li>业务处理: 业务逻辑 (Service)</li><li>数据持久层: CRUD (Dao)</li></ul><p>View</p><ul><li>展示数据</li><li>提供链接发起Servlet请求 (a, form, img……)</li></ul><p>Controller (Servlet)</p><ul><li>接受用户的请求: (req 请求参数, Session的信息)</li><li>交给业务层处理响应的代码</li><li>控制视图的跳转</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">登录 --&gt; 接受用户的登录请求 --&gt; 处理用户的请求(获取用户登录的参数,username,password) --&gt; 交给业务层处理登录业务(判断用户名密码是否正确:事务) --&gt; Dao层查询用户名和密码是否正确 --&gt; 数据库</span><br></pre></td></tr></table></figure><h2 id="11-Filter"><a href="#11-Filter" class="headerlink" title="11 Filter"></a>11 Filter</h2><p>Filter: 过滤器,用来过滤网站的数据</p><ul><li>处理中文乱码</li><li>登录验证</li></ul><p>Filter开发步骤:</p><p>1.导包</p><p>2.编写过滤器,实现Filter接口,重写相应的方法即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharacterEncodingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化: web服务器启动,就已经初始化了,随时等待过滤对象出现</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CharacterEncodingFilter初始化...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1.过滤器中的所有代码,在过滤特定请求的时候都会执行</span></span><br><span class="line"><span class="comment">        2.必须要让过滤器继续通行: filterChain.doFilter(servletRequest, servletResponse);</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// filterChain: 过滤链(可以有多个过滤器)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        servletRequest.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        servletResponse.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        servletResponse.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;CharacterEncodingFilter执行前...&quot;</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);  <span class="comment">//让我们的请求继续走,如果不写,程序到这里就被拦截停止</span></span><br><span class="line">        System.out.println(<span class="string">&quot;CharacterEncodingFilter执行后...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 销毁: web服务器关闭的时候,会销毁</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CharacterEncodingFilter销毁...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.在web.xml中配置过滤器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.github.dairycode.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 只要是/servlet的任何请求,都会经过这个过滤器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servlet/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="12-监听器"><a href="#12-监听器" class="headerlink" title="12 监听器"></a>12 监听器</h2><p>实现一个监听器的接口 (有N种)</p><p>1.编写一个监听器</p><p>2.实现监听器的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 统计网络在线人数: 统计Session</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OnlineCountListener</span> <span class="keyword">implements</span> <span class="title">HttpSessionListener</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建Session的监听: 看你的一举一动</span></span><br><span class="line">    <span class="comment">// 一旦创建一个Session就会触发一次事件</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionCreated</span><span class="params">(HttpSessionEvent se)</span> </span>&#123;</span><br><span class="line">        ServletContext ctx = se.getSession().getServletContext();</span><br><span class="line">        Integer onlineCount = (Integer)ctx.getAttribute(<span class="string">&quot;OnlineCount&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(onlineCount==<span class="keyword">null</span>) &#123;</span><br><span class="line">            onlineCount = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> count = onlineCount.intValue();</span><br><span class="line">            onlineCount = <span class="keyword">new</span> Integer(count+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ctx.setAttribute(<span class="string">&quot;OnlineCount&quot;</span>,onlineCount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 销毁Session的监听</span></span><br><span class="line">    <span class="comment">// 一旦销毁Session就会触发一次事件</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionDestroyed</span><span class="params">(HttpSessionEvent se)</span> </span>&#123;</span><br><span class="line">        ServletContext ctx = se.getSession().getServletContext();</span><br><span class="line">        Integer onlineCount = (Integer) ctx.getAttribute(<span class="string">&quot;OnlineCount&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(onlineCount==<span class="keyword">null</span>) &#123;</span><br><span class="line">            onlineCount = <span class="keyword">new</span> Integer(<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> count = onlineCount.intValue();</span><br><span class="line">            onlineCount = <span class="keyword">new</span> Integer(count-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ctx.setAttribute(<span class="string">&quot;OnlineCount&quot;</span>,onlineCount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Session销毁:</span></span><br><span class="line"><span class="comment">    1.手动销毁 getSession().invalidate();</span></span><br><span class="line"><span class="comment">    2.自动销毁</span></span><br><span class="line"><span class="comment">    &lt;session-config&gt;</span></span><br><span class="line"><span class="comment">        &lt;session-timeout&gt;1&lt;/session-timeout&gt;</span></span><br><span class="line"><span class="comment">    &lt;/session-config&gt;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.web.xml注册监听器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.github.dairycode.listener.OnlineCountListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="13-过滤器-监听器常见应用"><a href="#13-过滤器-监听器常见应用" class="headerlink" title="13 过滤器,监听器常见应用"></a>13 过滤器,监听器常见应用</h2><p>过滤器: 配置成为拦截器</p><p>用户登录之后才能进入主页,用户注销之后就不能进入主页</p><p>1.用户登录之后向Session中放入用户的数据</p><p>2.进入主页的时候要判断用户是否已经登陆,要求: 在过滤器中实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HttpServletRequest request = (HttpServletRequest) req;</span><br><span class="line">HttpServletResponse response = (HttpServletResponse) resp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(request.getSession().getAttribute(<span class="string">&quot;USER_SESSION&quot;</span>) == <span class="keyword">null</span>) &#123;</span><br><span class="line">    response.sendRedirect(<span class="string">&quot;/error.jsp&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filterChain.doFilter(req,resp);</span><br></pre></td></tr></table></figure><p>监听器: GUI(图形界面编程)编程中经常使用</p><h2 id="14-JDBC"><a href="#14-JDBC" class="headerlink" title="14 JDBC"></a>14 JDBC</h2><p>什么是JDBC: Java连接数据库</p><p>需要jar包的支持:</p><ul><li>java.sql</li><li>javax.sql</li><li>mysql-connecter-java 连接驱动 (Maven导入)</li></ul><p>1.数据写入数据库</p><p>2.导入数据库依赖</p><p>3.连接数据库</p><p>4.JDBC固定步骤</p><ul><li><p>加载驱动</p></li><li><p>连接数据库,代表数据库</p></li><li><p>向数据库发送SQL的对象Statement (CRUD)</p></li><li><p>编写SQL (根据业务,不同的SQL)</p></li><li><p>执行SQL</p></li><li><p>关闭连接</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">    <span class="comment">// 配置信息</span></span><br><span class="line">    <span class="comment">// useUnicode=true&amp;characterEncoding=UTF-8 解决中文乱码</span></span><br><span class="line">    String url = <span class="string">&quot;jdbc:mysql://localhost:3306/test?&amp;useUnicode=true&amp;characterEncoding=UTF-8&quot;</span>;</span><br><span class="line">    String username = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    String password = <span class="string">&quot;password&quot;</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 1.加载驱动</span></span><br><span class="line">    Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.连接数据库，代表数据库</span></span><br><span class="line">    Connection connection = DriverManager.getConnection(url,username,password)</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 3.向数据库发送SQL的对象Statement: CRUD</span></span><br><span class="line">    Statement statement = connection.createStatement();</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 4.编写SQL</span></span><br><span class="line">    String sql = <span class="string">&quot;select * from users&quot;</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 5.执行查询SQL,返回一个ResultSet: 结果集</span></span><br><span class="line">    ResultSet rs = statement.executeQuery(sql);</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;id=&quot;</span> + rs.getObject(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;name=&quot;</span> + rs.getObject(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 6.关闭连接: 释放资源(一定要做)先开后关</span></span><br><span class="line">    rs.close();</span><br><span class="line">    statement.close();</span><br><span class="line">    connection.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增删改都用executeUpdate即可</span></span><br></pre></td></tr></table></figure><p>改进预编译SQL</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">    <span class="comment">// 配置信息</span></span><br><span class="line">    <span class="comment">// useUnicode=true&amp;characterEncoding=UTF-8 解决中文乱码</span></span><br><span class="line">    String url = <span class="string">&quot;jdbc:mysql://localhost:3306/test?&amp;useUnicode=true&amp;characterEncoding=UTF-8&quot;</span>;</span><br><span class="line">    String username = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    String password = <span class="string">&quot;password&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.加载驱动</span></span><br><span class="line">    Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.连接数据库，代表数据库</span></span><br><span class="line">    Connection connection = DriverManager.getConnection(url,username,password);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.编写SQL</span></span><br><span class="line">    String sql = <span class="string">&quot;insert into users(id,name,password,email,birthday) values (?,?,?,?,?)&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 预编译</span></span><br><span class="line">    PreparedStatement preparedStatement = connection.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">    preparedStatement.setInt(<span class="number">1</span>, <span class="number">1</span>);<span class="comment">// 给第一个占位符? 赋值为1</span></span><br><span class="line">    preparedStatement.setString(<span class="number">2</span>, <span class="string">&quot;Dairy&quot;</span>);<span class="comment">//给第二个占位符? 赋值为Dairy</span></span><br><span class="line">    preparedStatement.setString(<span class="number">3</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    preparedStatement.setString(<span class="number">4</span>, <span class="string">&quot;liuzeyes@126.com&quot;</span>);</span><br><span class="line">    preparedStatement.setDate(<span class="number">5</span>, <span class="keyword">new</span> Date(<span class="keyword">new</span> java.util.Date().getTime()));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.执行SQL</span></span><br><span class="line">    <span class="keyword">int</span> i = preparedStatement.executeUpdate();</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">0</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;输入成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6.关闭连接：释放资源（一定要做）先开后关</span></span><br><span class="line">    preparedStatement.close();</span><br><span class="line">    connection.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>事务: 要么都成功,要么都失败</p><p>ACID原则: 保证数据的安全</p><ul><li>开启事务</li><li>事务提交 commit() </li><li>事务回滚 rollback()</li><li>关闭事务</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;Java Web，是用Java技术来解决相关web互联网领域的技术栈。web包括：web服务端和web客户端两部分。Java在客户端的应用有Java Applet，不过使用得很少，Java在服务器端的应用非常的丰富，比如Servlet，JSP、第三方框架等等。Java技术对Web领域的发展注入了强大的动力。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java技术栈" scheme="http://example.com/tags/Java%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    <category term="Java Web" scheme="http://example.com/tags/Java-Web/"/>
    
  </entry>
  
  <entry>
    <title>MySQL基础SQL语句大全</title>
    <link href="http://example.com/2019/10/16/MySQL%E5%9F%BA%E7%A1%80SQL%E8%AF%AD%E5%8F%A5%E5%A4%A7%E5%85%A8/"/>
    <id>http://example.com/2019/10/16/MySQL%E5%9F%BA%E7%A1%80SQL%E8%AF%AD%E5%8F%A5%E5%A4%A7%E5%85%A8/</id>
    <published>2019-10-16T14:55:25.000Z</published>
    <updated>2021-02-22T15:07:44.098Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>MySQL是一个关系型数据库管理系统，由瑞典MySQL AB 公司开发，属于 Oracle 旗下产品。MySQL 是最流行的关系型数据库管理系统之一，在 WEB 应用方面，MySQL是最好的 RDBMS (Relational Database Management System，关系数据库管理系统) 应用软件之一。</p><p>MySQL是一种关系型数据库管理系统，关系数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。</p><a id="more"></a><h2 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h2><p>mac终端中执行命令：<code>brew install mysql</code></p><h2 id="连接服务器"><a href="#连接服务器" class="headerlink" title="连接服务器"></a>连接服务器</h2><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><p>在命令行连接MySQL的参数如下：</p><table><thead><tr><th>选项</th><th align="left">说明</th><th align="left">默认</th></tr></thead><tbody><tr><td>-u</td><td align="left">账号</td><td align="left">当前系统同名账号</td></tr><tr><td>-p</td><td align="left">密码</td><td align="left"></td></tr><tr><td>-P</td><td align="left">连接端口</td><td align="left">3306</td></tr><tr><td>-h</td><td align="left">主机地址</td><td align="left">127.0.0.1</td></tr><tr><td>-e</td><td align="left">执行sql指令</td><td align="left"></td></tr></tbody></table><h3 id="连接操作"><a href="#连接操作" class="headerlink" title="连接操作"></a>连接操作</h3><p>连接服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p -P3306 -h 127.0.0.1</span><br></pre></td></tr></table></figure><p>连接本地数据库时可以使用默认值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure><p>使用<code>-e</code>执行SQL语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -proot -e&quot;show databases;&quot;</span><br></pre></td></tr></table></figure><p>退出连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure><h3 id="执行与取消"><a href="#执行与取消" class="headerlink" title="执行与取消"></a>执行与取消</h3><p>每条SQL指令以<code>;</code>结束，按回车键后执行该条语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure><p>放弃语句</p><p>在SQL后使用<code>\c</code>表示取消本条SQL，后面不要写<code>;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases \c</span><br></pre></td></tr></table></figure><h2 id="数据库管理"><a href="#数据库管理" class="headerlink" title="数据库管理"></a>数据库管理</h2><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><h5 id="显示数据库列表"><a href="#显示数据库列表" class="headerlink" title="显示数据库列表"></a>显示数据库列表</h5><p>使用以下命令可以得到当前服务器中的所有数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure><h5 id="创建新库"><a href="#创建新库" class="headerlink" title="创建新库"></a>创建新库</h5><p>下面是创建数据库<code>class</code>并设置字符集为utf8</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database class charset utf8</span><br></pre></td></tr></table></figure><h5 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show create database class;</span><br></pre></td></tr></table></figure><h5 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database class;</span><br></pre></td></tr></table></figure><p>为了防止删除不存在的数据库报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database if exists class;</span><br></pre></td></tr></table></figure><h5 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h5><p>数据库主要是对表操作，选择数据库后可以省掉每次指定数据库的麻烦</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use class;</span><br></pre></td></tr></table></figure><h3 id="导入语句"><a href="#导入语句" class="headerlink" title="导入语句"></a>导入语句</h3><p>有时需要把外部的SQL文件导入到服务器中，图像化的数据库管理软件都支持导入，下面我们介绍命令行的使用方法</p><h5 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h5><p>下面我们创建<code>test.sql</code>文件内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create database class charset utf8;</span><br><span class="line">show databases;</span><br></pre></td></tr></table></figure><h5 id="外部导入"><a href="#外部导入" class="headerlink" title="外部导入"></a>外部导入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p &lt; test.sql</span><br></pre></td></tr></table></figure><h5 id="连接后导入"><a href="#连接后导入" class="headerlink" title="连接后导入"></a>连接后导入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line">&gt; source test.sql</span><br></pre></td></tr></table></figure><h2 id="数据表管理"><a href="#数据表管理" class="headerlink" title="数据表管理"></a>数据表管理</h2><p>可以把数据库理解为文件夹，数据表理解为文件，数据表是真正存储数据的地方</p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><h5 id="展示数据表"><a href="#展示数据表" class="headerlink" title="展示数据表"></a>展示数据表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure><h5 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create tabale class (id int primary key auto_increment,cname varchar(30) not null,description varchar(100) default null) charset utf8;</span><br></pre></td></tr></table></figure><p>以上语句创建表<code>class</code>字段说明如下：</p><ul><li>字段id 为主键自增</li><li>字段cname为字符串类型varchar并不允许为null</li><li>字段description为可为null的字符串</li><li>字符集为utf8，如果不设置将继承数据库字符集</li></ul><h5 id="添加测试数据"><a href="#添加测试数据" class="headerlink" title="添加测试数据"></a>添加测试数据</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">insert into class (cname,description) values(&#39;mysql&#39;,&#39;学习mysql&#39;);</span><br><span class="line">insert into class (cname) values(&#39;mysql&#39;);</span><br></pre></td></tr></table></figure><p>因为description设置为null所有第二个记录没有设置值时使用默认的null值</p><h3 id="复制数据"><a href="#复制数据" class="headerlink" title="复制数据"></a>复制数据</h3><p>根据已经存在的表结构创建新表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table test like class;</span><br></pre></td></tr></table></figure><p>复制其他表的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into test select * from class;</span><br></pre></td></tr></table></figure><p>只复制批定字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into test (cname) select cname from class;</span><br></pre></td></tr></table></figure><p>复制表时同时复制数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table test select * from class;</span><br></pre></td></tr></table></figure><p>下面是只复制指定字段，并为不同名字段起别名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table test(id int primary key auto_increment,name varchar(30)) select id,cname as name from class;</span><br></pre></td></tr></table></figure><p>删除数据表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop temporary table if exists test;</span><br></pre></td></tr></table></figure><h3 id="临时表"><a href="#临时表" class="headerlink" title="临时表"></a>临时表</h3><p>临时表是用于存储临时数据表的，会在数据库连接中断时自动删除</p><ul><li>可以与普通表同名，优先级高于普通表</li><li>连接中断时自动删除</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create temporary table class_names select * from class;</span><br><span class="line">select * from class_names;</span><br></pre></td></tr></table></figure><p>删除临时表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop temporary table if exists class_names;</span><br></pre></td></tr></table></figure><blockquote><p>开发中我们更喜欢将临时数据放在缓存或会话中，以上只是介绍这个mysql特性</p></blockquote><h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><h3 id="测试表"><a href="#测试表" class="headerlink" title="测试表"></a>测试表</h3><p>为了进行查询实例操作我们创建以下表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create table stu (id int primary key auto_increment,sname char(30),class_id int default null,age smallint default null);</span><br><span class="line">insert into stu(sname,class_id,age) values(&#39;小明&#39;,1,20),(&#39;张三&#39;,2,32),(&#39;李四&#39;,3,null),(&#39;小刘&#39;,null,46);</span><br></pre></td></tr></table></figure><h3 id="字段处理"><a href="#字段处理" class="headerlink" title="字段处理"></a>字段处理</h3><p>查询所有字段数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from class;</span><br></pre></td></tr></table></figure><p>查询指定字段数据并排序字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select description,cname from class;</span><br></pre></td></tr></table></figure><h3 id="条件筛选"><a href="#条件筛选" class="headerlink" title="条件筛选"></a>条件筛选</h3><p>根据条件查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from class where cname &#x3D; &#39;mysql&#39;;</span><br></pre></td></tr></table></figure><p>查询包含关键词的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from class where description like &#39;%q%&#39;;</span><br></pre></td></tr></table></figure><p>合并列返回查询结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select concat(id,cname) as &#39;class_info&#39; from class;</span><br></pre></td></tr></table></figure><p>指定多条件查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from class where id&gt;1 and cname &#x3D; &#39;mysql&#39;;</span><br></pre></td></tr></table></figure><p>查找一班或姓张的同学</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from stu where class_id&#x3D;1 or sname like &#39;%张%&#39;;</span><br></pre></td></tr></table></figure><p>介绍中不包含mysql的班级</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from class where description not like &#39;%mysql%&#39;;</span><br></pre></td></tr></table></figure><p>查询学生所在班级编号，并去除重复值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select destinct class_id from stu;</span><br></pre></td></tr></table></figure><p>查询年龄在20-35岁的同学</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from stu where age between 20 and 35;</span><br></pre></td></tr></table></figure><p>查询不在30-35岁间的同学</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from stu where age not between 30 and 35;</span><br></pre></td></tr></table></figure><p>查询2、3班的所有同学</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from stu where class_id in (2,3);</span><br></pre></td></tr></table></figure><p>查找除了1、3班的同学</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from stu where class_id not in (1,3);</span><br></pre></td></tr></table></figure><h3 id="NULL"><a href="#NULL" class="headerlink" title="NULL"></a>NULL</h3><p>查询没有分配班级的学生姓名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select sname from stu where class_id is null;</span><br></pre></td></tr></table></figure><p>查询已经分配班级的学生信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from stu where class_id is not null;</span><br></pre></td></tr></table></figure><p>查询结果中对没分配班级的学生显示未分配</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select sname,if(class_id is null,&#39;未分配&#39;,class_id) from stu;</span><br><span class="line"># 也可以使用IFNULL 函数简化操作</span><br><span class="line">select sname,ifnull (class_id,&#39;未分配&#39;) from stu;</span><br></pre></td></tr></table></figure><h3 id="排序结果"><a href="#排序结果" class="headerlink" title="排序结果"></a>排序结果</h3><p>按学生年龄从大到小排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from stu order by age desc;</span><br></pre></td></tr></table></figure><p>班级从大到小排序，相同班级的同学年龄从小到大排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from stu order by class_id desc,age asc;</span><br></pre></td></tr></table></figure><p>随机获取一名同学</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from stu order by rand() limit 1;</span><br></pre></td></tr></table></figure><p>最后报名的同名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from stu order by id desc limit 1;</span><br></pre></td></tr></table></figure><p>第二和第三报名的同学</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># limit是从零开始的</span><br><span class="line">select * from stu order by id asc limit 1,2;</span><br></pre></td></tr></table></figure><p>查看2班年龄最小的同学</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from stu where class_id&#x3D;2 and age is not null order by age asc limit 1;</span><br></pre></td></tr></table></figure><p>以上代码结果不准确，因为可能有同年龄的同学，所以可以使用子查询操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from stu where age&#x3D;(select age from stu where class_id&#x3D;2 and age is not null order by age asc limit 1);</span><br></pre></td></tr></table></figure><h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h2><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><p>将班级为2的学生改为班级3</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update stu set class_id&#x3D;3 where class_id&#x3D;2;</span><br></pre></td></tr></table></figure><p>2班年龄小于20岁的同学年龄设置为NULL</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update stu set age&#x3D;null where class_id&#x3D;2 and age&lt;20;</span><br></pre></td></tr></table></figure><p>将年龄小于20岁的同学年龄加10岁</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update stu set age&#x3D;age+10 where age&lt;20;</span><br></pre></td></tr></table></figure><h3 id="删除记录"><a href="#删除记录" class="headerlink" title="删除记录"></a>删除记录</h3><p>删除所有年龄小于20岁的同学</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from stu where age&lt;20;</span><br></pre></td></tr></table></figure><p>删除所有年龄小于30岁并没有班级的同学</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from stu where class_id is null;</span><br></pre></td></tr></table></figure><h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><p>添加一条记录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into stu set sname&#x3D;&#39;小明&#39;,age&#x3D;22,class_id&#x3D;1;</span><br></pre></td></tr></table></figure><p>添加多条记录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into stu (sname,class_id,age) values(&#39;小明&#39;,2,32),(&#39;小张&#39;,3,45);</span><br></pre></td></tr></table></figure><h2 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h2><p>修改表名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE stu RENAME stus;</span><br></pre></td></tr></table></figure><p>另一种操作方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RENAME TABLE stus TO stu;</span><br></pre></td></tr></table></figure><p>修改表字符集</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE class CHARSET gbk;</span><br></pre></td></tr></table></figure><p>删除表所有数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRUNCATE stu;</span><br></pre></td></tr></table></figure><p>删除数据表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS stu;</span><br></pre></td></tr></table></figure><h2 id="字段管理"><a href="#字段管理" class="headerlink" title="字段管理"></a>字段管理</h2><p>修改字段类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE stu MODIFY sname VARCHAR(30) NOT NULL;</span><br></pre></td></tr></table></figure><p>修改字段时同时更改字段名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE stu CHANGE sname name VARCHAR(30) NOT NULL;</span><br></pre></td></tr></table></figure><p>添加字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE stu ADD sex SMALLINT DEFAULT NULL;</span><br></pre></td></tr></table></figure><p>在学生名称后添加邮箱字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE stu ADD email CARCHAR(50) AFTER sname;</span><br></pre></td></tr></table></figure><p>将字段添加到最前面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE stu ADD qq VARCHAR(30) FIRST;</span><br></pre></td></tr></table></figure><p>删除学生邮箱字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE stu DROP email;</span><br></pre></td></tr></table></figure><h2 id="主键操作"><a href="#主键操作" class="headerlink" title="主键操作"></a>主键操作</h2><p>一般主键为自增字段，需要删除自增属性后才可以删除主键</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE stu MODIFY id INT NOT NULL;</span><br></pre></td></tr></table></figure><p>删除主键</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE stu DROP PRIMARY KEY;</span><br></pre></td></tr></table></figure><p>添加表主键</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE stu2 ADD PRIMARY KEY(id);</span><br></pre></td></tr></table></figure><p>添加自增列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE stu2 MODIFY id INT NOT NULL AUTO_INCREMENT;</span><br></pre></td></tr></table></figure><p>主键与自增列一起添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE stu3 MODIFY id INT NOT NULL AUTO_INCREMENT,ADD PRIMARY KEY(id);</span><br></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>下面是mysql支持的字符串类型</p><table><thead><tr><th>类型</th><th>大小</th><th>用途</th></tr></thead><tbody><tr><td>CHAR</td><td>0-255字节</td><td>定长字符串</td></tr><tr><td>VARCHAR</td><td>0-65535字节</td><td>变长字符串</td></tr><tr><td>TINYBLOB</td><td>0-255字节</td><td>不超过255字符的二进制字符串</td></tr><tr><td>TINYTEXT</td><td>0-255字节</td><td>短文本字符串</td></tr><tr><td>BLOB</td><td>0-65535字节</td><td>二进制形式的长文本数据</td></tr><tr><td>TEXT</td><td>0-65535字节</td><td>长文本数据</td></tr><tr><td>MEDIUMBLOB</td><td>0-16777215字节</td><td>二进制形式的中等长度文本数据</td></tr><tr><td>MEDIUMTEXT</td><td>0-16777215字节</td><td>中等长度文本数据</td></tr><tr><td>LONGBLOB</td><td>0-4294967295字节</td><td>二进制形式的极大文本数据</td></tr><tr><td>LONGTEXT</td><td>0-4294967295字节</td><td>极大文本数据</td></tr></tbody></table><p>char类型是定长类型，比如定义了20长度的char类型，只存1个字符也占20个字符长度，好处是处理速度快，缺点是空间占用大，把手机号、邮箱、密码等设置为char类型是不错的选择</p><p>varchar类型与char相反，占用空间受内容影响，可以把文章标题、介绍等设置为varchar类型更合适</p><h3 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h3><p>字符串分二进制与非二进制类型，二进制用于存储图片、声音等文件，非二进制用于存储文本数据</p><p>非二进制文本受字符集和校对规则影响</p><p>字符集（Character set）是多个字符的集合，字符集种类较多，每个字符集包含的字符个数不同。常用的字符集有GBK、BIG5、UTF8</p><p>UTF8字符包含文字内容更广，如韩文、日文、德文兼容度更高，也是推荐使用的字符集</p><h5 id="下面是查看服务器支持的字符集"><a href="#下面是查看服务器支持的字符集" class="headerlink" title="下面是查看服务器支持的字符集"></a>下面是查看服务器支持的字符集</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW CHARACTER SET;</span><br></pre></td></tr></table></figure><p>表不设置字符集继承数据库，字段不设置字符集继承表的</p><h3 id="校对规则"><a href="#校对规则" class="headerlink" title="校对规则"></a>校对规则</h3><p>是在字符集内用于字符比较和排序的一套规则，以<code>_ci</code>结束的为大小写不敏感、<code>_bin</code>结束的为区分大小写</p><h5 id="下面是查看系统支持的校对规则"><a href="#下面是查看系统支持的校对规则" class="headerlink" title="下面是查看系统支持的校对规则"></a>下面是查看系统支持的校对规则</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW COLLATION;</span><br></pre></td></tr></table></figure><p>当使用不区分大小写的校对规则时A与a是相同的，否则则不相同，这会影响到排序与比对</p><p>如果使用<code>utf8_bin</code>校对规则时，下面的查询将匹配不到大写的<code>SQL</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM class WHERE cname &#x3D; &#39;sql&#39;;</span><br></pre></td></tr></table></figure><blockquote><p>修改表校对规则，对表的原字段将不影响，只对新增字段影响</p></blockquote><h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><h5 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT UPPER(cname) as cname,LOWER(description) as &#39;desc&#39; FROM class;</span><br></pre></td></tr></table></figure><h5 id="Left-amp-Right"><a href="#Left-amp-Right" class="headerlink" title="Left&amp;Right"></a>Left&amp;Right</h5><p>left与right函数用于取左或右指定数量的字符，下面是取班级介绍前8个字符并用<code>...</code>连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT CONCAT(LEFT(description,8)&#39;...&#39;) FROM class;</span><br></pre></td></tr></table></figure><h5 id="mid"><a href="#mid" class="headerlink" title="mid"></a>mid</h5><p>从中间取字符串，参数二为起始，参数三为取的字符数量。下面是获取从第二个字符取两个字符值为<code>ql</code>的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM class WHERE MID(cname,2,2) &#x3D; &#39;ql&#39;;</span><br></pre></td></tr></table></figure><h5 id="substring"><a href="#substring" class="headerlink" title="substring"></a>substring</h5><p>从指定位置开始向右所有字符串，下面是获取从第二个位置开始的字符值为<code>ql</code>的记录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM class WHERE SUBSTRING(cname,2) &#x3D; &#39;ql&#39;;</span><br></pre></td></tr></table></figure><h5 id="char-length"><a href="#char-length" class="headerlink" title="char_length"></a>char_length</h5><p>获取字符串数量</p><h5 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h5><p>连接字符串使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT CONCAT(&#39;编号：&#39;,id) as id,CONCAT(&#39;班级：&#39;,cname) as name FROM class;</span><br></pre></td></tr></table></figure><p>将所有班级前加上<code>学生：</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE class SET cname &#x3D; CONCAT(&#39;学生：&#39;,cname);</span><br></pre></td></tr></table></figure><p>截取班级介绍，超过8个字符的后面连接<code>...</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT IF(CHAR_LENGTH(description)&gt;8,CONCAT(LEFT(description,8),&#39;...&#39;),LEFT(description,8)) as cname FROM class;</span><br></pre></td></tr></table></figure><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>Mysql支持正则表达式操作，可用于处理复杂的匹配操作</p><h5 id="查找第二个字符为h的字符串"><a href="#查找第二个字符为h的字符串" class="headerlink" title="查找第二个字符为h的字符串"></a>查找第二个字符为<code>h</code>的字符串</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM class WHERE cname REGEXP &#39;^.h&#39;;</span><br></pre></td></tr></table></figure><p>查找班级名称中包含<code>java</code>或<code>mysql</code>的记录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM class WHERE cname REGEXP &#39;java|mysql&#39;;</span><br></pre></td></tr></table></figure><p>所有介绍中包含java与mysql的课程名前加上<code>学生</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE class SET cname &#x3D; REPLACE(cname,cname,CONCAT(&#39;学生：&#39;,cname)) WHERE description REGEXP &#39;java|mysql&#39;;</span><br></pre></td></tr></table></figure><h3 id="LIKE"><a href="#LIKE" class="headerlink" title="LIKE"></a>LIKE</h3><p>在<code>LIKE</code>表达式中<code>%</code>用于匹配任意多个字符，<code>_</code>用于匹配一个字符</p><p>查找第二个字符为<code>h</code>的班级</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM class WHERE cname LIKE &#39;_h%&#39;;</span><br></pre></td></tr></table></figure><h2 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h2><h5 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h5><table><thead><tr><th>Mysql数据类型</th><th>含义（有符号）</th></tr></thead><tbody><tr><td>tinyint(m)</td><td>1个字节 范围（-128~127）</td></tr><tr><td>smallint(m)</td><td>2个字节 范围（-32768~32767）</td></tr><tr><td>mediumint(m)</td><td>3个字节 范围（-8388608~8388607）</td></tr><tr><td>int(m)</td><td>4个字节 范围（-2147483648~2147483647）</td></tr><tr><td>bigint(m)</td><td>8个字节 范围（+-9.22*10的18次方）</td></tr></tbody></table><ul><li>取值范围如果加了unsigned，则最大值翻倍，如tinyint unsigned的取值范围为（0~256）</li><li>m的含义不是允许字段的长度，而是显示长度，在为字段设置<code>zerofill</code>时有效</li></ul><h5 id="添加有前导零的字段"><a href="#添加有前导零的字段" class="headerlink" title="添加有前导零的字段"></a>添加有前导零的字段</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE class ADD stu_count smallint(6) ZEROFILL DEFAULT NULL;</span><br></pre></td></tr></table></figure><h5 id="在命令行查看（有些GUI软件不显示前导零），结果如下"><a href="#在命令行查看（有些GUI软件不显示前导零），结果如下" class="headerlink" title="在命令行查看（有些GUI软件不显示前导零），结果如下"></a>在命令行查看（有些GUI软件不显示前导零），结果如下</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+----+-------+--------------------------------------------+-----------+</span><br><span class="line">| id | cname | description                                | stu_count |</span><br><span class="line">+----+-------+--------------------------------------------+-----------+</span><br><span class="line">|  4 | Mysql | 数据库                                      |    000001 |</span><br><span class="line">|  5 | Java  | 教你使用Java                                |      NULL |</span><br><span class="line">+----+-------+--------------------------------------------+-----------+</span><br></pre></td></tr></table></figure><h5 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h5><table><thead><tr><th>类型</th><th>大小</th><th>范围（有符号）</th><th>范围（无符号）</th></tr></thead><tbody><tr><td>FLOAT</td><td>4字节</td><td>(-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)</td><td>0，(1.175 494 351 E-38，3.402 823 466 E+38)</td></tr><tr><td>DOUBLE</td><td>8字节</td><td>(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td>0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td></tr><tr><td>DECIMAL</td><td>DECIMAL(M,D) ，m&lt;65 是总个数，d&lt;30</td><td>依赖于M和D的值</td><td>依赖于M和D的值</td></tr></tbody></table><p>下面是检测浮点数精度的示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE class ADD e FLOAT(10,2);</span><br><span class="line">UPDATE class SET e &#x3D; 12345678.66 WHERE id&#x3D;11;</span><br></pre></td></tr></table></figure><p>查看结果时会发现浮点数结果不精确</p><ul><li>float：2^23 = 8388608，一共七位，这意味着最多能有7位有效数字，但绝对能保证的为6位，即float的精度为6~7位有效数字</li><li>double：2^52 = 4503599627370496，一共16位，double的精度为15~16位</li><li>浮点型在数据库中存放的是近似值，而定点类型在数据库中存放的是精确值</li><li>decimal(m,d) 参数m&lt;65 是总个数，d&lt;30且 d&lt;m 是小数位</li><li>对货币等对精度敏感的数据，应该用定点数decimal存储</li></ul><h2 id="ENUM-SET"><a href="#ENUM-SET" class="headerlink" title="ENUM/SET"></a>ENUM/SET</h2><h3 id="ENUM"><a href="#ENUM" class="headerlink" title="ENUM"></a>ENUM</h3><p>ENUM类型因为只允许在集合中取得一个值，有点类似于单选项。在处理相互排斥的数据时容易让人理解，比如人类的性别。换个枚举最大可以有65535个成员值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE stu ADD sex ENUM(&#39;男&#39;,&#39;女&#39;) DEFAULT NULL;</span><br></pre></td></tr></table></figure><p>可以使用索引或值添加enum数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO stu (sname,class_id,sex) VALUES(&#39;李刚&#39;,1,&#39;男&#39;);</span><br><span class="line">INSERT INTO stu (sname,class_id,sex) VALUES(&#39;李玉&#39;,1,2);</span><br></pre></td></tr></table></figure><p>可以使用值与索引检索ENUM</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM stu WHERE sex&#x3D;&#39;女&#39;;</span><br><span class="line">SELECT * FROM stu WHERE sex&#x3D;2;</span><br></pre></td></tr></table></figure><h3 id="SET"><a href="#SET" class="headerlink" title="SET"></a>SET</h3><p>SET类型与ENUM类型相似但不相同。SET类型可以从预定义的集合中取得任意数量的值。一个SET类型最多可以包含64项元素</p><p>使用SET类型添加文章属性字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE article ADD flag SET(&#39;推荐&#39;,&#39;置顶&#39;,&#39;图文&#39;,&#39;热门&#39;);</span><br></pre></td></tr></table></figure><p>添加数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO article (title,status,flag) VALUES(&#39;学生&#39;,1,&#39;图文,推荐,置顶&#39;);</span><br></pre></td></tr></table></figure><p>使用<code>find_in_set</code>查找数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM article WHERE find_in_set(&#39;图文&#39;,flag);</span><br></pre></td></tr></table></figure><p>使用<code>LIKE</code>查找数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM article WHERE flag LIKE &#39;%置顶%&#39;;</span><br></pre></td></tr></table></figure><h5 id="二进制比较"><a href="#二进制比较" class="headerlink" title="二进制比较"></a>二进制比较</h5><p>可以使用二进制方式对SET类型进行模糊筛选</p><table><thead><tr><th>SET成员</th><th>十进制</th><th>二进制值</th></tr></thead><tbody><tr><td>推荐</td><td></td><td></td></tr><tr><td>置顶</td><td>2</td><td>0010</td></tr><tr><td>图文</td><td></td><td></td></tr><tr><td>热门</td><td>8</td><td>1000</td></tr></tbody></table><p>获取包含图文与推荐的文章</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM article WHERE flag &amp; 5;</span><br></pre></td></tr></table></figure><h2 id="DBeaver"><a href="#DBeaver" class="headerlink" title="DBeaver"></a>DBeaver</h2><p>如果使用DBeaver软件学习，需要在编辑连接设置正确时区</p><h2 id="数据类型-1"><a href="#数据类型-1" class="headerlink" title="数据类型"></a>数据类型</h2><table><thead><tr><th>日期时间类型</th><th>占用空间</th><th>日期格式</th><th>最小值</th><th>最大值</th><th>零值表示</th></tr></thead><tbody><tr><td>DATETIME</td><td>8bytes</td><td>YYYY-MM-DD HH:MM:SS</td><td>1000-01-01 00:00:00</td><td>9999-12-31 23:59:59</td><td>0000-00-00 00:00:00</td></tr><tr><td>TIMESTAMP</td><td>4bytes</td><td>YYYY-MM-DD HH:MM:SS</td><td>1970-01-01 08:00:01</td><td>2038-01-19 03:14:07</td><td>00000000000000</td></tr><tr><td>DATE</td><td>4bytes</td><td>YYYY-MM-DD</td><td>1000-01-01</td><td>9999-12-31</td><td>0000-00-00</td></tr><tr><td>TIME</td><td>3bytes</td><td>HH:MM:SS</td><td>-838:59:59</td><td>838:59:59</td><td>00:00:00</td></tr><tr><td>YEAR</td><td>1bytes</td><td>YYYY</td><td>1901</td><td>2155</td><td>0000</td></tr></tbody></table><ul><li>Mysql保存日期格式使用YYYY-MM-DD HH:MM:SS的ISO 8601标准</li><li>向数据表存储日期与时间必须使用ISO格式</li></ul><h2 id="创建字段"><a href="#创建字段" class="headerlink" title="创建字段"></a>创建字段</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE stu ADD birthday DATETIME DEFAULT NULL;</span><br></pre></td></tr></table></figure><h2 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h2><h3 id="参数介绍"><a href="#参数介绍" class="headerlink" title="参数介绍"></a>参数介绍</h3><table><thead><tr><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>%a</td><td>缩写星期名</td></tr><tr><td>%b</td><td>缩写月名</td></tr><tr><td>%c</td><td>月，数值</td></tr><tr><td>%D</td><td>带有英文前缀的月中的天</td></tr><tr><td>%d</td><td>月的天，数值（00-31）</td></tr><tr><td>%e</td><td>月的天，数值（0-31）</td></tr><tr><td>%f</td><td>微秒</td></tr><tr><td>%H</td><td>小时（00-23）</td></tr><tr><td>%h</td><td>小时（01-12）</td></tr><tr><td>%I</td><td>小时（01-12）</td></tr><tr><td>%i</td><td>分钟，数值（00-59）</td></tr><tr><td>%j</td><td>年的天（001-366）</td></tr><tr><td>%k</td><td>小时（0-23）</td></tr><tr><td>%l</td><td>小时（1-12）</td></tr><tr><td>%M</td><td>月名</td></tr><tr><td>%m</td><td>月，数值（00-12）</td></tr><tr><td>%p</td><td>AM或PM</td></tr><tr><td>%r</td><td>时间，12-小时（hh:mm:ss AM或PM）</td></tr><tr><td>%S</td><td>秒（00-59）</td></tr><tr><td>%s</td><td>秒（00-59）</td></tr><tr><td>%T</td><td>时间，24-小时（hh:mm:ss）</td></tr><tr><td>%U</td><td>周（00-53）星期日是一周的第一天</td></tr><tr><td>%u</td><td>周（00-53）星期一是一周的第一天</td></tr><tr><td>%V</td><td>周（01-53）星期日是一周的第一天，与%X使用</td></tr><tr><td>%v</td><td>周（01-53）星期一是一周的第一天，与%x使用</td></tr><tr><td>%W</td><td>星期名</td></tr><tr><td>%w</td><td>周的天（0=星期日，6=星期六）</td></tr><tr><td>%X</td><td>年，其中的星期日是周的第一天，4位，与%V使用</td></tr><tr><td>%x</td><td>年，其中的星期一是周的第一天，4位，与%v使用</td></tr><tr><td>%Y</td><td>年，4位</td></tr><tr><td>%y</td><td>年，2位</td></tr></tbody></table><h3 id="实例操作"><a href="#实例操作" class="headerlink" title="实例操作"></a>实例操作</h3><p>使用<code>Date_format</code>格式化日期与时间显示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT sname,DATE_FORMAT(birthday,&#39;%Y年%m月%d日 %H时%i分%s秒&#39;) AS birthday FROM stu;</span><br></pre></td></tr></table></figure><p>使用<code>time_format</code>格式化输出时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT sname,TIME_FORMAT(birthday,&#39;%r&#39;) AS birthday FROM stu;</span><br></pre></td></tr></table></figure><h2 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h2><p>以时间戳格式来记录日期与时间</p><h5 id="设置TIMESTAMP字段"><a href="#设置TIMESTAMP字段" class="headerlink" title="设置TIMESTAMP字段"></a>设置TIMESTAMP字段</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE stu ADD updated_at</span><br><span class="line">TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP;</span><br><span class="line"></span><br><span class="line">INSERT INTO stu SET sname &#x3D; &#39;学生&#39;,uodated_at &#x3D; &#39;2020-2-12 10:33:12&#39;;</span><br></pre></td></tr></table></figure><p>添加数据时自动更新时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE stu ADD updated_at</span><br><span class="line"></span><br><span class="line">TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP</span><br><span class="line"></span><br><span class="line">ON UPDATE CURRENT_TIMESTAMP;</span><br></pre></td></tr></table></figure><p>当执行添加与更新时字段将自动为当前时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO stu SET sname &#x3D; &#39;小张&#39;;</span><br><span class="line">UPDATE stu SET sname &#x3D; &#39;ih&#39; WHERE id &#x3D; 7;</span><br></pre></td></tr></table></figure><ul><li>执行更新或添加都会改变timestamp字段</li></ul><h2 id="常用函数-1"><a href="#常用函数-1" class="headerlink" title="常用函数"></a>常用函数</h2><p>下面是获取当前日期、时间的示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT CURRENT_DATE,CURRENT_TIME,NOW();</span><br></pre></td></tr></table></figure><p>获取时间部分值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT YEAR(updated_at),MONTH(updated_at),DAY(updated_at) FROM stu;</span><br></pre></td></tr></table></figure><p>其他可以使用的函数如下</p><table><thead><tr><th align="left">函数</th><th>说明</th></tr></thead><tbody><tr><td align="left">HOUR</td><td>小时</td></tr><tr><td align="left">MINUTE</td><td>分</td></tr><tr><td align="left">SECOND</td><td>秒</td></tr><tr><td align="left">YEAR</td><td>年</td></tr><tr><td align="left">MONTH</td><td>月</td></tr><tr><td align="left">DAY</td><td>日</td></tr><tr><td align="left">TIME</td><td>获取时间</td></tr><tr><td align="left">WEEK</td><td>周</td></tr><tr><td align="left">QUARTER</td><td>季</td></tr><tr><td align="left">CURRENT_DATE(CURDATE)</td><td>当前日期</td></tr><tr><td align="left">CURRENT_TIME</td><td>当前时间</td></tr><tr><td align="left">NOW</td><td>当前时间</td></tr><tr><td align="left">DAYOFYEAR</td><td>一年中的日数</td></tr><tr><td align="left">DAYOFMONTH</td><td>月份中日数</td></tr><tr><td align="left">DAYOFWEEK</td><td>星期天（1）到星期六（7）</td></tr><tr><td align="left">WEEKDAY</td><td>星期一（0）到星期天（6）</td></tr><tr><td align="left">TO_DAYS</td><td>从元年到现在的天数（忽略时间部分）</td></tr><tr><td align="left">FROM_DAYS</td><td>根据天数得到日期（忽略时间部分）</td></tr><tr><td align="left">TIME_TO_SEC</td><td>时间转为秒数（忽略日期部分）</td></tr><tr><td align="left">SEC_TO_TIME</td><td>根据秒数转为时间（忽略日期部分）</td></tr><tr><td align="left">UNIX_TIMESTAMP</td><td>根据日期返回秒数（包括日期与时间）</td></tr><tr><td align="left">FROM_UNIXTIME</td><td>根据秒数返回日期与时间（包括日期与时间）</td></tr><tr><td align="left">DATEDIFF</td><td>两个日期相差的天数（忽略时间部分）</td></tr><tr><td align="left">TIMEDIFF</td><td>计算两个时间的间隔（忽略日期部分）</td></tr><tr><td align="left">TIMESTAMPDIFF</td><td>根据指定单位计算两个日期时间的间隔（包括日期与时间）</td></tr><tr><td align="left">LAST_DAY</td><td>该月的最后一天</td></tr></tbody></table><h3 id="拆分日期时间"><a href="#拆分日期时间" class="headerlink" title="拆分日期时间"></a>拆分日期时间</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT sname,</span><br><span class="line">YEAR(birthday),MONTH(birthday),DAY(birthday),HOUR(birthday),</span><br><span class="line">MINUTE(birthday),SECOND(birthday) FROM stu;</span><br></pre></td></tr></table></figure><h3 id="当前日期时间"><a href="#当前日期时间" class="headerlink" title="当前日期时间"></a>当前日期时间</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT now(),CURRENT(),CURRENT_DATE(),CURRENT_TIME(),NOW();</span><br></pre></td></tr></table></figure><h3 id="时间计算"><a href="#时间计算" class="headerlink" title="时间计算"></a>时间计算</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT DAYOFYEAR(now()),DAYOFMONTH(now()),DAYOFWEEK(now()),WEEKDAY(now());</span><br></pre></td></tr></table></figure><h3 id="秒转换"><a href="#秒转换" class="headerlink" title="秒转换"></a>秒转换</h3><p>不包含日期的秒转换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SET @time &#x3D; TIME(now());</span><br><span class="line">SELECT now(),TIME_TO_SEC(@time),SEC_TO_TIME(TIME_TO_SEC(@time));</span><br></pre></td></tr></table></figure><p>日期时间与秒转换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT now(),UNIX_TIMESTAMP(birthday),FROM_UNIXTIME(UNIX_TIMESTAMP(birthday)) FROM stu;</span><br></pre></td></tr></table></figure><h3 id="天转换"><a href="#天转换" class="headerlink" title="天转换"></a>天转换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT now(),TO_DAYS(birthday),FROM_DAYS(TO_DAYS(birthday)) FROM stu;</span><br></pre></td></tr></table></figure><h3 id="差值计算"><a href="#差值计算" class="headerlink" title="差值计算"></a>差值计算</h3><p>计算天数差值，忽略时间部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT now(),DATEDIFF(now(),birthday) FROM stu;</span><br></pre></td></tr></table></figure><p>计算时间差值，忽略天数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT now(),TIMEDIFF(time(birthday),time(now())) FROM stu;</span><br></pre></td></tr></table></figure><h3 id="指定单位差值"><a href="#指定单位差值" class="headerlink" title="指定单位差值"></a>指定单位差值</h3><p>支持的单位有YEAR/MONTH/WEEK/DAY/HOUR/MINUTE/SECOND等，下面是获取学生来到人生经历的天数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT sname,TIMESTAMPDIFF(day,birthday,NOW()) FROM stu;</span><br></pre></td></tr></table></figure><h2 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h2><p>查找在1990~1999年出生的同学</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM stu WHERE birthday BETWEEN &#39;1990-01-01&#39; AND &#39;1999-12-31&#39;;</span><br></pre></td></tr></table></figure><p>获取年龄最大的同学</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM stu ORDER BY birthday ASC LIMIT 1;</span><br><span class="line"># 更精确的查询</span><br><span class="line">SELECT * FROM stu</span><br><span class="line">WHERE birthday &#x3D; （SELECT birthday FROM stu ORDER BY birthday ASC LIMIT 1);</span><br></pre></td></tr></table></figure><p>查询在1班或2班1990年出生的同学</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM stu WHERE class_id IN(1,2) AND year(birthday)&#x3D;1999;</span><br></pre></td></tr></table></figure><p>90后最喜欢上的班级</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT count(id) AS total,class_id FROM stu</span><br><span class="line">WHERE LEFT(birthday,4) &gt;&#x3D; 1990 AND YEAR(birthday)&lt;&#x3D;2000</span><br><span class="line">GROUP BY class_id</span><br><span class="line">ORDER BY total DESC</span><br><span class="line">LIMIT 1;</span><br></pre></td></tr></table></figure><p>大于20岁的女生最多的班级</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT count(id),class_id FROM stu</span><br><span class="line">WHERE TIMESTAMPDIFF(YEAR,birthday,now())&gt;20 AND sex&#x3D;2</span><br><span class="line">GROUP BY class_id</span><br><span class="line">ORDER BY count(id) DESC</span><br><span class="line">LIMIT 1;</span><br></pre></td></tr></table></figure><h2 id="时间计算-1"><a href="#时间计算-1" class="headerlink" title="时间计算"></a>时间计算</h2><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>ADDTIME</td><td>添加时间（负数为减少），只对时间有效</td></tr><tr><td>TIMESTAMP</td><td>添加时间（负数为减少），只对时间有效</td></tr><tr><td>DATE_ADD</td><td>根据单位添加时间，支持单位有YEAR/MONTH/DAY/HOUR/MINUTE/SECOND/HOUR_MINUTE（负数时等于DATE_SUB)</td></tr><tr><td>DATE_SUB</td><td>DATE_ADD的反函数</td></tr><tr><td>LAST_DAY</td><td>制定月最后一天日期</td></tr></tbody></table><p>七小时前的时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT ADDTIME(now(),&#39;-7:00:00&#39;);</span><br></pre></td></tr></table></figure><p>七天后的日期</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT DATE_ADD(now(),INTERVAL 7 DAY);</span><br></pre></td></tr></table></figure><p>20小时10分钟后的日期</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT DATE_ADD(now(),INTERVAL &#39;20:10&#39; HOUR_MINUTE);</span><br></pre></td></tr></table></figure><p>2天8小时后的日期</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT DATE_ADD(now(),INTERVAL &#39;2 8&#39; DAY_HOUR);</span><br></pre></td></tr></table></figure><p>获取本月最后一天日期</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT LAST_DAY(now());</span><br></pre></td></tr></table></figure><p>获取本月的第一天日期</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT DATE_SUB(now(),INTERVAL DAYOFMONTH(now())-1 DAY);</span><br></pre></td></tr></table></figure><p>获取本月发表的文章</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM article </span><br><span class="line">WHERE created_at &gt;&#x3D;DATE_SUB(now(),INTERVAL DAYOFMONTH(now())-1 DAY) </span><br><span class="line">AND created_at &lt;&#x3D;LAST_DAY(now());</span><br></pre></td></tr></table></figure><blockquote><p>使用大量函数会造成性能下降</p></blockquote><p>获取三个月内发表的文章</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM article </span><br><span class="line">WHERE publish_time &gt;&#x3D;DATE_SUB(now(),INTERVAL -3 MONTH) ;</span><br><span class="line"></span><br><span class="line"># 如果从前上个月的一号开始获取</span><br><span class="line">SELECT * FROM article </span><br><span class="line">WHERE publish_time &gt;&#x3D; DATE_FORMAT(DATE_SUB(now(),INTERVAL 3 MONTH),&#39;%Y-%m-01&#39;);</span><br></pre></td></tr></table></figure><p>获取上个月的最后一天</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT LAST_DAY(DATE_SUB(NOW(),INTERVAL 1 MONTH));</span><br><span class="line"># 或直接通过明确日期</span><br><span class="line">SELECT * FROM article WHERE publish_time&gt;&#x3D;&#39;2019-01-01&#39; AND publish_time&lt;CURDATE();</span><br></pre></td></tr></table></figure><p>下个月的第一天</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT DATE_ADD(LAST_DAY(now()),INTERVAL 1 DAY);</span><br></pre></td></tr></table></figure><p>查看出生超过20年的同学</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM stu WHERE birthday &lt; DATE_SUB(NOW(),INTERVAL 20 YEAR);</span><br></pre></td></tr></table></figure><p>本周二的日期</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT now(),DATE_ADD(NOW(),INTERVAL 3-DAYOFWEEK(NOW()) DAY);</span><br></pre></td></tr></table></figure><p>查看三周前的周二</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT now(),</span><br><span class="line">DATE_SUB(DATE_ADD(NOW(),INTERVAL 3-DAYOFWEEK(NOW()) DAY),INTERVAL 21 DAY);</span><br></pre></td></tr></table></figure><p>上周一的日期</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SET @week &#x3D; DATE_SUB(NOW(),interval 1 week);</span><br><span class="line">SELECT DATE_ADD(@week,INTERVAL 0-WEEKDAY(@week) day);</span><br></pre></td></tr></table></figure><p>获取本月迟到的同学</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM attendance </span><br><span class="line">WHERE created_at &gt;&#x3D; date_sub(NOW(),INTERVAL DAYOFMONTH(now())-1 DAY)</span><br><span class="line">AND time(created_at)&gt;&#39;08:30:00&#39;;</span><br></pre></td></tr></table></figure><p>本月迟到超过2次的同学</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT stu_id FROM attendance </span><br><span class="line">WHERE created_at &gt;&#x3D; date_sub(NOW(),INTERVAL DAYOFMONTH(now())-1 DAY)</span><br><span class="line">AND time(created_at)&gt;&#39;08:30:00&#39;</span><br><span class="line">GROUP BY stu_id</span><br><span class="line">HAVING count(id)&gt;&#x3D;2;</span><br></pre></td></tr></table></figure><p>本周周一的日期</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT DATE_ADD(now(),INTERVAL 0-WEEKDAY(now()) DAY);</span><br></pre></td></tr></table></figure><p>获取本周迟到的学生编号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SET @begin &#x3D;DATE_FORMAT(date_add(now(),INTERVAL 0-WEEKDAY(now()) day),&#39;%Y-%m-%d&#39;);</span><br><span class="line">SELECT stu_id FROM attendance </span><br><span class="line">WHERE created_at &gt;&#x3D; @begin</span><br><span class="line">AND time(created_at)&gt;&#39;08:00:00&#39;</span><br><span class="line">GROUP BY stu_id;</span><br></pre></td></tr></table></figure><p>获取上周打卡记录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SET @week &#x3D; DATE_SUB(now(),INTERVAL 1 WEEK);</span><br><span class="line">SELECT stu_id FROM attendance</span><br><span class="line">WHERE created_at&gt;&#x3D;DATE_ADD(@week,interval 0-WEEKDAY(@week) day)</span><br><span class="line">AND created_at&lt;&#x3D;DATE_ADD(@week,interval 4-WEEKDAY(@week) day);</span><br></pre></td></tr></table></figure><p>获取本周发表的文章</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM article WHERE create_at &gt;&#x3D; DATE_ADD(now(),INTERVAL 0-WEEKDAY(now()) day);</span><br></pre></td></tr></table></figure><p>周日来校学习的同学</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM attrndance</span><br><span class="line">WHERE date(created_at) &#x3D; date(date_add(now(),INTERVAL 6 - WEEKDAY(now()) day));</span><br></pre></td></tr></table></figure><h2 id="ORDER"><a href="#ORDER" class="headerlink" title="ORDER"></a>ORDER</h2><h3 id="排序介绍"><a href="#排序介绍" class="headerlink" title="排序介绍"></a>排序介绍</h3><p>mysql对查询结果使用<code>order by</code>进行排序</p><ul><li>对任何字段进行排序</li><li>desc降序asc升序</li><li>对别名字段可排序</li><li>对函数结果可排序</li><li>支持多列表排序</li><li>排序受校对规则影响</li></ul><h3 id="排序实例"><a href="#排序实例" class="headerlink" title="排序实例"></a>排序实例</h3><h5 id="从男到女排序"><a href="#从男到女排序" class="headerlink" title="从男到女排序"></a>从男到女排序</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM stu ORDER BY sex ASC;</span><br></pre></td></tr></table></figure><h5 id="从男到女排序年龄从小到大排序"><a href="#从男到女排序年龄从小到大排序" class="headerlink" title="从男到女排序年龄从小到大排序"></a>从男到女排序年龄从小到大排序</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM stu ORDER BY sex ASC,birthday DESC;</span><br></pre></td></tr></table></figure><h5 id="随机获取学生"><a href="#随机获取学生" class="headerlink" title="随机获取学生"></a>随机获取学生</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM stu ORDER BY RAND() LIMIT 1;</span><br></pre></td></tr></table></figure><h5 id="按出生月份从小到大排序"><a href="#按出生月份从小到大排序" class="headerlink" title="按出生月份从小到大排序"></a>按出生月份从小到大排序</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT birthday,MONTH(birthday) AS m FROM stu ORDER BY m ASC;</span><br><span class="line"></span><br><span class="line"># 或使用字符串函数操作</span><br><span class="line">SELECT birthday,mid(birthday,6,2) AS m FROM stu ORDER BY m ASC;</span><br></pre></td></tr></table></figure><h3 id="自定义排序"><a href="#自定义排序" class="headerlink" title="自定义排序"></a>自定义排序</h3><p>field函数用于比较值在集合中的索引，利用这一特性可以自定义排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT FIELD(&#39;a&#39;,&#39;c&#39;,&#39;a&#39;,&#39;b&#39;);</span><br><span class="line"># 第一个a为比较字符，后面的c&#x2F;a&#x2F;b为集合，所以结果为2，如果在集合中不存在为0</span><br></pre></td></tr></table></figure><p>使用field进行自定义排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM stu ORDER BY FIELD(left(sname,1),&#39;何&#39;,&#39;赵&#39;);</span><br></pre></td></tr></table></figure><h2 id="COUNT"><a href="#COUNT" class="headerlink" title="COUNT"></a>COUNT</h2><h5 id="统计所有学生人数"><a href="#统计所有学生人数" class="headerlink" title="统计所有学生人数"></a>统计所有学生人数</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(*) FROM stu;</span><br></pre></td></tr></table></figure><h5 id="所有女生人数"><a href="#所有女生人数" class="headerlink" title="所有女生人数"></a>所有女生人数</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(*) FROM stu WHERE sex&#x3D;2;</span><br></pre></td></tr></table></figure><p>统计所有分配班级的学生（count(字段)不会统计null值，使用count(*)时会计算null），所以下面使用具体的字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(class_id) FROM stu;</span><br></pre></td></tr></table></figure><h2 id="MIN-MAX"><a href="#MIN-MAX" class="headerlink" title="MIN/MAX"></a>MIN/MAX</h2><h5 id="获取最小的学生出生年份"><a href="#获取最小的学生出生年份" class="headerlink" title="获取最小的学生出生年份"></a>获取最小的学生出生年份</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT year(MAX(birthday)) FROM stu;</span><br></pre></td></tr></table></figure><h5 id="最大的班级编号"><a href="#最大的班级编号" class="headerlink" title="最大的班级编号"></a>最大的班级编号</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT MAX(class_id) FROM stu;</span><br></pre></td></tr></table></figure><h5 id="获取点击数最少的文章"><a href="#获取点击数最少的文章" class="headerlink" title="获取点击数最少的文章"></a>获取点击数最少的文章</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM srticle WHERE click &#x3D; (SELECT MIN(click) FROM article);</span><br></pre></td></tr></table></figure><h2 id="SUM-AVG"><a href="#SUM-AVG" class="headerlink" title="SUM/AVG"></a>SUM/AVG</h2><h5 id="获取所有文章总点击数"><a href="#获取所有文章总点击数" class="headerlink" title="获取所有文章总点击数"></a>获取所有文章总点击数</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT SUM(click) FROM article;</span><br></pre></td></tr></table></figure><h5 id="获取平均点击数"><a href="#获取平均点击数" class="headerlink" title="获取平均点击数"></a>获取平均点击数</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT AVG(click) FROM article;</span><br></pre></td></tr></table></figure><h5 id="获取低于平均点击数据的文章"><a href="#获取低于平均点击数据的文章" class="headerlink" title="获取低于平均点击数据的文章"></a>获取低于平均点击数据的文章</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM article WHERE click &lt; (SELECT AVG(click) FROM article);</span><br></pre></td></tr></table></figure><h5 id="获取学生的平均年龄"><a href="#获取学生的平均年龄" class="headerlink" title="获取学生的平均年龄"></a>获取学生的平均年龄</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT ROUND(AVG(TIMESTAMPDIFF(YEAR,birthday,now()))) FROM stu;</span><br></pre></td></tr></table></figure><h2 id="DISTINCT"><a href="#DISTINCT" class="headerlink" title="DISTINCT"></a>DISTINCT</h2><p>distinct用于去除结果集中的重复记录</p><h5 id="获取所有班级编号"><a href="#获取所有班级编号" class="headerlink" title="获取所有班级编号"></a>获取所有班级编号</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT class_id AS class FROM stu WHERE class_id IS NOT NULL;</span><br></pre></td></tr></table></figure><h5 id="获取学生数，同班同名算一个"><a href="#获取学生数，同班同名算一个" class="headerlink" title="获取学生数，同班同名算一个"></a>获取学生数，同班同名算一个</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(DISTINCT class_id,sname) FROM stu WHERE class_id IS NOT NULL;</span><br></pre></td></tr></table></figure><h2 id="GROUP"><a href="#GROUP" class="headerlink" title="GROUP"></a>GROUP</h2><h5 id="统计每个班级的人数"><a href="#统计每个班级的人数" class="headerlink" title="统计每个班级的人数"></a>统计每个班级的人数</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(*),class_id FROM stu WHERE class_id IS NOT NULL GROUP BY class_id;</span><br></pre></td></tr></table></figure><h5 id="每个班年龄最大的同学"><a href="#每个班年龄最大的同学" class="headerlink" title="每个班年龄最大的同学"></a>每个班年龄最大的同学</h5><p>执行下面查询会报错，因为mysql要求select中的列要在group中使用</p><p>可以通过更改查询模式，允许select的列不在group中出现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET sql_mode&#x3D;(SELECT REPLACE(@@sql_mode,&#39;ONLY_FULL_GROUP_BY&#39;,&#39;&#39;));</span><br></pre></td></tr></table></figure><h5 id="然后查询就可以得到结果"><a href="#然后查询就可以得到结果" class="headerlink" title="然后查询就可以得到结果"></a>然后查询就可以得到结果</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT MIN(birthday),sname FROM stu GROUP BY class_id;</span><br></pre></td></tr></table></figure><h5 id="也可以使用子查询"><a href="#也可以使用子查询" class="headerlink" title="也可以使用子查询"></a>也可以使用子查询</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM stu WHERE birthday IN(SELECT MIN(birthday) FROM stu GROUP BY class_id);</span><br></pre></td></tr></table></figure><h5 id="统计每班的男、女人数"><a href="#统计每班的男、女人数" class="headerlink" title="统计每班的男、女人数"></a>统计每班的男、女人数</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT CONCAT(class_id,&#39;班&#39;),IF(sex&#x3D;1,&#39;男&#39;,&#39;女&#39;) AS sex,</span><br><span class="line">COUNT(*) FROM stu</span><br><span class="line">WHERE class_id IS NOT NULL</span><br><span class="line">GROUP BY class_id,sex ORDER BY class_id;</span><br></pre></td></tr></table></figure><h5 id="查找超过两个同学的班级"><a href="#查找超过两个同学的班级" class="headerlink" title="查找超过两个同学的班级"></a>查找超过两个同学的班级</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT class_id FROM stu GROUP BY class_id HAVING count(*)&gt;2;</span><br></pre></td></tr></table></figure><h5 id="查找本周迟到超过两次的同学"><a href="#查找本周迟到超过两次的同学" class="headerlink" title="查找本周迟到超过两次的同学"></a>查找本周迟到超过两次的同学</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT stu_id FROM attendance </span><br><span class="line">WHERE date(created_at)&gt;date(DATE_ADD(NOW(),INTERVAL 0-WEEKDAY(NOW()) day))</span><br><span class="line">AND time(created_at)&gt;&#39;08:30:00&#39;</span><br><span class="line">GROUP BY stu_id</span><br><span class="line">HAVING COUNT(*)&gt;2;</span><br></pre></td></tr></table></figure><h5 id="本周哪个同学准时到校次数最多"><a href="#本周哪个同学准时到校次数最多" class="headerlink" title="本周哪个同学准时到校次数最多"></a>本周哪个同学准时到校次数最多</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT count(*) as c,stu_id FROM attendance</span><br><span class="line">WHERE date(created_at)&gt;&#x3D;date(date_add(now(),interval 0-WEEKDAY(now()) day))</span><br><span class="line">AND time(created_at)&lt;&#x3D;&#39;08:30:00&#39;</span><br><span class="line">GROUP BY stu_id</span><br><span class="line">ORDER by c desc</span><br><span class="line">limit 1;</span><br></pre></td></tr></table></figure><h5 id="本周那一天迟到的人数最少"><a href="#本周那一天迟到的人数最少" class="headerlink" title="本周那一天迟到的人数最少"></a>本周那一天迟到的人数最少</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT date(created_at) FROM attendance </span><br><span class="line">WHERE date(created_at)&gt;date(DATE_ADD(NOW(),INTERVAL 0-WEEKDAY(NOW()) day))</span><br><span class="line">AND time(created_at)&lt;&#x3D;&#39;08:30:00&#39;</span><br><span class="line">GROUP BY created_at</span><br><span class="line">ORDER BY COUNT(*) DESC</span><br><span class="line">LIMIT 1;</span><br></pre></td></tr></table></figure><h5 id="查找哪个姓的同学最多"><a href="#查找哪个姓的同学最多" class="headerlink" title="查找哪个姓的同学最多"></a>查找哪个姓的同学最多</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT left(sname,1) as s,count(*) AS c FROM stu</span><br><span class="line">GROUP BY s</span><br><span class="line">ORDER BY c DESC</span><br><span class="line">LIMIT 1;</span><br></pre></td></tr></table></figure><h5 id="查找超过两个同学的姓氏"><a href="#查找超过两个同学的姓氏" class="headerlink" title="查找超过两个同学的姓氏"></a>查找超过两个同学的姓氏</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT left(sname,1) as s,count(*) AS c FROM stu</span><br><span class="line">GROUP BY s</span><br><span class="line">HAVING c&gt;&#x3D;2;</span><br></pre></td></tr></table></figure><h2 id="表关联"><a href="#表关联" class="headerlink" title="表关联"></a>表关联</h2><h5 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h5><p>比如说会员表与个人资料（QQ，邮箱）表即为一对一关系。</p><h5 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h5><p>比如学生与班级表间即为一对多关系，一个班级有多个学生，一个学生属于一个班级</p><h5 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h5><p>粉丝表与用户表关系，一个粉丝可以关注多个用户，一个用户也可以有多个粉丝，像这种关系我们会使用一张表来记录关系。</p><h2 id="笛卡尔积"><a href="#笛卡尔积" class="headerlink" title="笛卡尔积"></a>笛卡尔积</h2><p>多个表的关联将会得到所有可能出现的行，即没有明确做两个表间的关联条件时，所有记录都将符合。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM stu,class;</span><br></pre></td></tr></table></figure><p>下面是添加条件后的结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM stu,class WHERE stu.class_id&#x3D;class.id;</span><br></pre></td></tr></table></figure><h2 id="INNER-JOIN"><a href="#INNER-JOIN" class="headerlink" title="INNER JOIN"></a>INNER JOIN</h2><p>所有多表操作都可以简单理解为，把多个表联系成一个表，最终思想层面上当成一个表对待</p><p>获取用户的资料信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM stu AS s INNER JOIN user_info AS i ON s.id &#x3D; i.stu_id;</span><br></pre></td></tr></table></figure><p>使用<code>INNER JOIN</code>多表关联的语义更清晰</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM stu INNER JOIN class </span><br><span class="line">ON stu.class_id &#x3D; class.id;</span><br></pre></td></tr></table></figure><p>查询一班的所有同学</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM stu INNER JOIN class</span><br><span class="line">ON stu.class_id &#x3D; class.id</span><br><span class="line">WHERE class_id &#x3D; 1;</span><br></pre></td></tr></table></figure><p>为了解决性能和多表字段重名覆盖的问题，有必要在查询时明确获取的列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT sname,class_id,stu.id AS stu_id,sex,cname FROM stu INNER JOIN class</span><br><span class="line">ON stu.class_id &#x3D; class.id</span><br><span class="line">WHERE class.id &#x3D; 1;</span><br></pre></td></tr></table></figure><p>每个班级发表的文章数量，来操作多张表的关联操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT c.id,COUNT(*) FROM stu AS s</span><br><span class="line">INNER JOIN class AS c</span><br><span class="line">INNER JOIN article as a</span><br><span class="line">ON s.class_id &#x3D; c.id AND s.id &#x3D; a.stu_id</span><br><span class="line">GROUP BY c.id;</span><br></pre></td></tr></table></figure><p>大学所有女生发表的文章</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT c.id,a.title FROM stu AS s</span><br><span class="line">INNER JOIN class AS c</span><br><span class="line">INNER JOIN article AS a</span><br><span class="line">ON s.class_id &#x3D; c.id AND s.id &#x3D; a.stu_id</span><br><span class="line">WHERE c.id&#x3D;1 AND s.sex &#x3D; &#39;女&#39;;</span><br></pre></td></tr></table></figure><p>每个班级发表的文章数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(a.id) AS article_sum,c.id FROM stu AS s</span><br><span class="line">INNER JOIN class AS c</span><br><span class="line">INNER JOIN article AS a</span><br><span class="line">ON s.class_id &#x3D; c.id AND s.id &#x3D; a.stu_id</span><br><span class="line">GROUP BY c.id;</span><br></pre></td></tr></table></figure><p>哪个班级发表的文章超过两篇</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT c.id,COUNT(*) AS total FROM stu AS s</span><br><span class="line">INNER JOIN class AS c</span><br><span class="line">INNER JOIN article AS a</span><br><span class="line">ON s.class_id &#x3D; c.id AND s.id &#x3D; a.stu_id</span><br><span class="line">GROUP BY c.id</span><br><span class="line">HAVING total &gt;&#x3D; 2;</span><br></pre></td></tr></table></figure><p>每个班级文章的总点击数与平均点击数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT SUM(a.click) AS class_sum,AVG(a.click),c.id FROM stu AS s</span><br><span class="line">INNER JOIN class as c</span><br><span class="line">INNER JOIN article as a</span><br><span class="line">ON s.class_id &#x3D; c.id AND s.id &#x3D; a.stu_id</span><br><span class="line">GROUP BY c.id</span><br><span class="line">ORDER BY class_sum DESC;</span><br></pre></td></tr></table></figure><p>每个班级有多少同学</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(*),c.cname FROM stu AS s INNER JOIN class AS c</span><br><span class="line">ON s.class_id &#x3D; c.id</span><br><span class="line">GROUP BY c.cname;</span><br></pre></td></tr></table></figure><p>学生数大于两个的班级名称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(*) AS total,c.cname FROM stu AS s</span><br><span class="line">INNER JOIN class AS c</span><br><span class="line">ON s.class_id &#x3D; c.id</span><br><span class="line">GROUP BY c.cname</span><br><span class="line">HAVING total &gt;&#x3D; 2;</span><br></pre></td></tr></table></figure><h2 id="OUTER-JOIN"><a href="#OUTER-JOIN" class="headerlink" title="OUTER JOIN"></a>OUTER JOIN</h2><p>外链接包括<code>LEFT JOIN</code>与<code>RIGHT JOIN</code>，可以简单理解为<code>LEFT JOIN</code>会包含左侧所有表记录，<code>RIGHT JOIN</code>会包含右侧表全部记录。</p><p>获取没有设置QQ的用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT s.sname FROM stu AS s LEFT JOIN user_info AS i</span><br><span class="line">ON s.id &#x3D; i.stu_id</span><br><span class="line">WHERE i.qq IS NULL;</span><br></pre></td></tr></table></figure><p>查找所有没有发表文章的同学</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT s.id,s.sname FROM stu AS s LEFT JOIN article AS a</span><br><span class="line">ON s.id &#x3D; a.stu_id</span><br><span class="line">WHERE a.id IS NULL;</span><br></pre></td></tr></table></figure><p>哪个班级没有学生</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT sname,c.id,c.cname FROM stu AS s RIGHT JOIN class AS c</span><br><span class="line">ON s.class_id &#x3D; c.id</span><br><span class="line">WHERE s.id IS NULL;</span><br></pre></td></tr></table></figure><p>每个班级的平均年龄</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT c.cname,AVG(TIMESTAMPDIFF(year,s.birthday,now())) AS t</span><br><span class="line">FROM stu AS s INNER JOIN class as c</span><br><span class="line">ON s.class_id &#x3D; c.id</span><br><span class="line">GROUP BY c.cname;</span><br></pre></td></tr></table></figure><p>查找学生所有班级，没有班级的学生显示无</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT sname,IFNULL(s.class_id,&#39;无&#39;) FROM stu AS s LEFT JOIN class AS c</span><br><span class="line">ON s.class_id &#x3D; c.id;</span><br></pre></td></tr></table></figure><h2 id="SELF-JOIN"><a href="#SELF-JOIN" class="headerlink" title="SELF JOIN"></a>SELF JOIN</h2><p><code>SELF JOIN</code>为自连接即表与自身进行关联，虽然自连接的两张表都是同一张表，但也把它按两张表对待，这样理解就会容易些。</p><h5 id="查找后盾人的同班同学"><a href="#查找后盾人的同班同学" class="headerlink" title="查找后盾人的同班同学"></a>查找后盾人的同班同学</h5><p>使用子查询操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM stu WHERE class_id &#x3D;</span><br><span class="line">(SELECT class_id FROM stu WHERE sname &#x3D; &#39;后盾人&#39;)</span><br><span class="line">AND stu.sname !&#x3D; &#39;后盾人&#39;;</span><br></pre></td></tr></table></figure><p>使用自连接查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT s1.sname,s2.sname FROM stu AS s1</span><br><span class="line">INNER JOIN stu AS s2</span><br><span class="line">ON s1.class_id &#x3D; s2.class_id</span><br><span class="line">WHERE s1.sname &#x3D; &#39;后盾人&#39; AND s2.sname !&#x3D; &#39;后盾人&#39;;</span><br></pre></td></tr></table></figure><h5 id="查找与后盾人同年出生的学生"><a href="#查找与后盾人同年出生的学生" class="headerlink" title="查找与后盾人同年出生的学生"></a>查找与后盾人同年出生的学生</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT s2.* FROM stu AS s1 INNER JOIN stu AS s2</span><br><span class="line">ON YEAR(s1.birthday) &#x3D; YEAR(s2.birthday)</span><br><span class="line">WHERE s1.sname &#x3D; &#39;后盾人&#39; AND s2.sname !&#x3D; &#39;后盾人&#39;;</span><br></pre></td></tr></table></figure><h5 id="查找比后盾人大的同学"><a href="#查找比后盾人大的同学" class="headerlink" title="查找比后盾人大的同学"></a>查找比后盾人大的同学</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT s2.sname,s2.birthday FROM stu AS s1</span><br><span class="line">INNER JOIN stu AS s2</span><br><span class="line">ON YEAR(s1.birthday) &gt; YEAR(s2.birthday)</span><br><span class="line">WHERE s1.sname &#x3D; &#39;后盾人&#39;;</span><br></pre></td></tr></table></figure><h2 id="多对多-1"><a href="#多对多-1" class="headerlink" title="多对多"></a>多对多</h2><p>比如学生可以学习多个课程，一个课程也可以被多个学生学习，这种情况就是多对多的关系。需要创建一张中间表把这种关系联系起来。</p><h5 id="查找后盾人学习的课程"><a href="#查找后盾人学习的课程" class="headerlink" title="查找后盾人学习的课程"></a>查找后盾人学习的课程</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT sname,l.name FROM stu AS s</span><br><span class="line">INNER JOIN user_lesson AS ul</span><br><span class="line">ON s.id &#x3D; ul.stu_id</span><br><span class="line">INNER JOIN lesson AS l</span><br><span class="line">ON ul.lesson_id &#x3D; l.id</span><br><span class="line">WHERE s.sname &#x3D; &#39;后盾人&#39;;</span><br></pre></td></tr></table></figure><h5 id="哪个班级的同学最爱学习JAVA"><a href="#哪个班级的同学最爱学习JAVA" class="headerlink" title="哪个班级的同学最爱学习JAVA"></a>哪个班级的同学最爱学习JAVA</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SELECT c.cname,COUNT(*) AS total FROM stu AS s</span><br><span class="line">INNER JOIN user_lesson AS ul</span><br><span class="line">INNER JOIN lesson AS l</span><br><span class="line">ON s.id &#x3D; ul.stu_id AND ul.lesson_id &#x3D; l.id</span><br><span class="line">INNER JOIN class AS c</span><br><span class="line">ON c.id &#x3D; s.class_id</span><br><span class="line">WHERE l.name &#x3D; &#39;JAVA&#39;</span><br><span class="line">GROUP BY c.cname</span><br><span class="line">ORDER BY total</span><br><span class="line">LIMIT 1;</span><br></pre></td></tr></table></figure><h2 id="UNION"><a href="#UNION" class="headerlink" title="UNION"></a>UNION</h2><p><code>UNION</code>用于连接多个查询结果，要保证每个查询返回的列数与顺序要一样。</p><ul><li>UNION会过滤重复的结果</li><li>UNION ALL 不过滤重复结果</li><li>列表字段由第一个查询的字段</li></ul><h5 id="查询年龄最大与最小的同学"><a href="#查询年龄最大与最小的同学" class="headerlink" title="查询年龄最大与最小的同学"></a>查询年龄最大与最小的同学</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(SELECT sname,birthday FROM stu ORDER BY birthday DESC LIMIT 1)</span><br><span class="line">UNION</span><br><span class="line">(SELECT sname,birthday FROM stu ORDER BY birthday ASC LIMIT 1)</span><br><span class="line">ORDER BY birthday DESC;</span><br></pre></td></tr></table></figure><h5 id="最新发表的文章和学习的课程组成动态数据"><a href="#最新发表的文章和学习的课程组成动态数据" class="headerlink" title="最新发表的文章和学习的课程组成动态数据"></a>最新发表的文章和学习的课程组成动态数据</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(SELECT CONCAT(s.sname,&#39;发表了文章&#39;,a.title) FROM article AS a</span><br><span class="line">INNER JOIN stu AS s</span><br><span class="line">ON s.id &#x3D; a.stu_id</span><br><span class="line">LIMIT 2)</span><br><span class="line">UNION</span><br><span class="line">(SELECT CONCAT(s.sname,&#39;正在学习&#39;,l.name) FROM stu AS s</span><br><span class="line">INNER JOIN user_lesson AS ul</span><br><span class="line">INNER JOIN lesson AS l</span><br><span class="line">ON s.id &#x3D; ul.stu_id AND ul.lesson_id &#x3D; l.id</span><br><span class="line">LIMIT 2);</span><br></pre></td></tr></table></figure><h2 id="多表删除"><a href="#多表删除" class="headerlink" title="多表删除"></a>多表删除</h2><p>删除所有没有学习任何课程的同学</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DELETE s FROM stu AS s</span><br><span class="line">LEFT JOIN user_lesson AS ul</span><br><span class="line">ON s.id &#x3D; ul.stu_id</span><br><span class="line">WHERE ul.lesson_id IS NULL;</span><br></pre></td></tr></table></figure><p>使用子查询操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM stu WHERE id IN(</span><br><span class="line">SELECT id FROM</span><br><span class="line">(SELECT s.id FROM stu AS s</span><br><span class="line">LEFT JOIN user_lesson AS ul</span><br><span class="line">ON s.id &#x3D; ul.stu_id</span><br><span class="line">WHERE ul.lesson_id IS NULL)</span><br><span class="line">AS s</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="事务处理"><a href="#事务处理" class="headerlink" title="事务处理"></a>事务处理</h2><p>事务值保证多个SQL操作的一致性，如果一条失败全部SQL也将失效。</p><blockquote><p>学习事务时建议开启两个客户端（或GUI软件）来体验</p></blockquote><h3 id="业务分析"><a href="#业务分析" class="headerlink" title="业务分析"></a>业务分析</h3><ul><li>事务是保证多个SQL操作的一致性，如果一条失败全部SQL也将失效</li><li>实际业务中大多数是对多个表操作，比如当发表文章时需要将文章的基本信息发到文章基础表和文章内容添加到文章内容表，这种情况不适用事务也没有关系，如果出现数据异常重新添加就可以了。</li><li>但牵涉到货币的情况就必须使用事务了，必须保证货币处理是准确的。</li><li>当然有些公司要求所有查询都使用事务，这就遵照公司要求完成就可以了。</li></ul><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><p>查看引擎</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW ENGINES;</span><br></pre></td></tr></table></figure><p>最新版本的mysql中已经不建议使用<code>MyISAM</code>引擎了，所以我们也不用讨论他了。</p><h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><p>支持事务的引擎建议使用<code>InnoDB</code>。如果旧表是其他引擎，使用下面语句更改为<code>InnoDB</code>引擎。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE stu ENGINE&#x3D;InnoDB;</span><br></pre></td></tr></table></figure><h2 id="提交模式"><a href="#提交模式" class="headerlink" title="提交模式"></a>提交模式</h2><h3 id="自动提交"><a href="#自动提交" class="headerlink" title="自动提交"></a>自动提交</h3><p>mysql的提交默认是自动提交，即发送一条执行一条。</p><p>在<code>DBeaver</code>执行以下SQL后，在另一个<code>Sequel Pro(GUI软件)</code>会立刻看到结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO stu(class_id,sname,sex)VALUES(2,&#39;张帝&#39;,&#39;女&#39;);</span><br></pre></td></tr></table></figure><p>在<code>Sequel Pro</code>里即可看到结果，这为自动提交。</p><h3 id="事务提交"><a href="#事务提交" class="headerlink" title="事务提交"></a>事务提交</h3><h5 id="事务单独开启"><a href="#事务单独开启" class="headerlink" title="事务单独开启"></a>事务单独开启</h5><p>执行<code>START TRANSACTION</code>或<code>BEGIN</code>语句后，表示要开启一项事务处理。</p><ul><li>COMMIT提交事务</li><li>ROLLBACK回滚事务</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">START TRANSACTION;</span><br><span class="line">INSERT INTO stu(class_id,sname,sex)VALUES(2,&#39;张帝&#39;,&#39;女&#39;);</span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></figure><h5 id="开启全局事务"><a href="#开启全局事务" class="headerlink" title="开启全局事务"></a>开启全局事务</h5><p>如果所有SQL都使用事务操作，我们可以通过<code>SET AUTOCOMMIT=0</code>关闭自动提交来开启事务机制，这样所有语句都是事务类型。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 关闭自动提交</span><br><span class="line">SET AUTOCOMMIT &#x3D; 0;</span><br><span class="line"></span><br><span class="line">INSERT INTO stu(class_id,sname,sex)VALUES(2,&#39;李清&#39;,&#39;女&#39;);</span><br><span class="line">COMMIT;</span><br><span class="line"></span><br><span class="line">-- 开启自动提交</span><br><span class="line">SET AUTOCOMMIT &#x3D; 1;</span><br></pre></td></tr></table></figure><h2 id="程序控制"><a href="#程序控制" class="headerlink" title="程序控制"></a>程序控制</h2><p>程序语言基本上都支持事务的处理。</p><h2 id="事务隔离"><a href="#事务隔离" class="headerlink" title="事务隔离"></a>事务隔离</h2><h3 id="并发问题"><a href="#并发问题" class="headerlink" title="并发问题"></a>并发问题</h3><p>当高并发访问会遇到多个事务的隔离问题，可能会出现以下：</p><p>1.脏读：事务A读取了事务B更新的数据，然后B回滚操作，那么A读取到的数据是脏数据</p><p>2.不可重复读：事务A多次读取同一数据，事务B在事务A多次读取的过程中，对数据作了更新并提交，导致事务A多次读取同一数据时，结果不一致。</p><p>3.幻读：系统管理员A将数据库中所有学生的成绩从具体分数改为ABCDE等级，但是系统管理员B就在这个时候插入了一条具体分数的记录，当系统管理员A改结束后发现还有一条记录没有改过来，就好像发生了幻觉一样，这就叫幻读。</p><blockquote><p>不可重复读和幻读很容易混淆，不可重复读侧重于修改，幻读侧重于新增或删除。解决不可重复读的问题只需要锁住满足条件的行，解决幻读需要锁表。</p></blockquote><h3 id="隔离等级"><a href="#隔离等级" class="headerlink" title="隔离等级"></a>隔离等级</h3><table><thead><tr><th>事务隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th><th>说明</th></tr></thead><tbody><tr><td>读未提交(read-uncommitted)</td><td>是</td><td>是</td><td>是</td><td>最低的事务隔离级别，一个事务还没提交时，它做的变更就能被别的事务看到。</td></tr><tr><td>不可重复读(read-committed)</td><td>否</td><td>是</td><td>是</td><td>保证一个事物提交后才能被另外一个事务读取。另外一个事务不能读取该事物未提交的数据。</td></tr><tr><td>可重复读(repeatable-read)</td><td>否</td><td>否</td><td>是</td><td>多次读取同一范围的数据会返回第一次查询的快照，即使其他事务对该数据做了更新修改。事务在执行期间看到的数据前后必须是一致的。</td></tr><tr><td>串行化(serializable)</td><td>否</td><td>否</td><td>否</td><td>事务 100% 隔离，可避免脏读、不可重复读、幻读的发生。花费最高代价但最可靠的事务隔离级别。</td></tr></tbody></table><h3 id="查询与设置"><a href="#查询与设置" class="headerlink" title="查询与设置"></a>查询与设置</h3><p>查询隔离级别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT @@tx_isolation;</span><br></pre></td></tr></table></figure><p>设置隔离级别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;</span><br></pre></td></tr></table></figure><h3 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h3><p>为了演示效果将隔离级别设置为最低级<code>read uncommitted</code>。脏读是一个事务没有提交时可被其他事务读取到。</p><p>1.事务A执行更新操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;</span><br><span class="line">BEGIN;</span><br><span class="line">UPDATE stu SET sname &#x3D; &#39;后盾人&#39; WHERE id &#x3D; 1;</span><br></pre></td></tr></table></figure><p>2.因为使用了最低级别<code>read uncommitted</code>，事务B在事务A没有提交时就可以看到更新的数据，如果事务A执行<code>ROLLBACK</code>事务B读到的数据就为脏数据。</p><p>3.将隔离级别设置为<code>read uncommitted</code>以外的，再重复上面的例子，都可以有效避免脏读的问题。</p><h3 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h3><p>为了演示效果将隔离级别设置为<code>read committed</code>。</p><p>事务A在执行过程中更新数据，事务B同时读取的数据没有脏数据。但当事务A提交了事务后，事务B再读取时得到了最新的数据，这种情况为不可重复读，要保证事务过程中的数据时一致的，不受其他事务影响。</p><p>1.事务A执行以下代码，但没有提交</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED;</span><br><span class="line">BEGIN;</span><br><span class="line">UPDATE stu SET sname &#x3D; &#39;后盾人&#39; WHERE id &#x3D; 1;</span><br></pre></td></tr></table></figure><p>2.因为使用了<code>read committed</code>级别，所有事务B不会读到脏数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SET SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED;</span><br><span class="line">BEGIN;</span><br><span class="line">SELECT * FROM stu;</span><br></pre></td></tr></table></figure><p>3.事务A提交事务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">commit</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>4.此时事务B可以读取到事务A提交的数据，这就是不能重复读取到同一个数据，即事务B读取结果受事务A影响。</p><p>5.将隔离机制设置为<code>repeatable-read</code>就可以解决这类不可重复读的问题。</p><h3 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h3><p>幻读和不可重复读都是读取了另一条已经提交的事务（这点就脏读不同），所不同的是不可重复读查询的都是同一个数据项，而幻读针对的是一批数据整体。</p><p>1.事务A执行查询，加入查询结果是6条</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SET SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;</span><br><span class="line">BEGIN;</span><br><span class="line">SELECT * FROM stu;</span><br></pre></td></tr></table></figure><p>2.事务B执行添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SET SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;</span><br><span class="line">INSERT INTO stu(class_id,sname,sex)VALUES(2,&#39;后盾人&#39;,1);</span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></figure><p>3.事务A执行更新，发现更新了7条（刚才查询时6条，但更新了7条，感觉像出现了幻觉）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">UPDATE stu SET balance &#x3D; 200;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>4.切换隔离级别为<code>serializable</code>后，在事务A没有提交时，事务B是不能插入数据的（表现形式为等待）。</p><h2 id="锁机制"><a href="#锁机制" class="headerlink" title="锁机制"></a>锁机制</h2><p>因为mysql支持多线程方式，所以可以同时处理多个客户端请求。有时为了防止客户端同时修改数据，我们使用锁操作完成。</p><p>比如一个用户在修改数据，另一个用户也要修改该条数据，我们可以让第一个用户独占这个表记录，等他操作完再让第二个用户操作。</p><h2 id="存储引擎-1"><a href="#存储引擎-1" class="headerlink" title="存储引擎"></a>存储引擎</h2><p><code>InnoDB</code>是主流存储引擎并支持行级锁的，有更高的并发处理性能，下面来演示行锁的运行过程。<code>MyIsam</code>引擎在最新版本的mysql中已经废弃所有不过多讨论了。</p><ul><li>行锁开销大，锁表慢</li><li>行锁高并发下可并行处理，性能更高</li><li>行锁是针对索引加的锁，在通过索引检索时才会应用行锁，否则使用表锁</li><li>在事务执行过程中，随时都可以执行锁定，锁在执行COMMIT或者ROLLBACK的时候释放</li></ul><h2 id="事务处理-1"><a href="#事务处理-1" class="headerlink" title="事务处理"></a>事务处理</h2><p>1.A事务执行以下代码但不提交</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BEGIN;</span><br><span class="line">UPDATE stu SET sname &#x3D; &#39;hdcms&#39; WHERE id &#x3D; 1;</span><br></pre></td></tr></table></figure><p>2.B事务执行以下代码，可以正常执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BEGIN;</span><br><span class="line">UPDATE stu SET sname &#x3D; &#39;后盾人&#39; WHERE id &#x3D; 3;</span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></figure><p>3.但B事务更新与A事务相同的记录则无法操作，执行过程发生阻塞</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BEGIN;</span><br><span class="line">UPDATE stu SET sname &#x3D; &#39;hdcms&#39; WHERE id &#x3D; 1;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>4.当A执行<code>COMMIT</code>提交后，解锁记录行这时B事务继续执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">COMMIT</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="非索引阻塞"><a href="#非索引阻塞" class="headerlink" title="非索引阻塞"></a>非索引阻塞</h3><p>使用非索引字段筛选时，将造成全表锁定即表级锁，应该避免这种情况发生，提升数据库的并发性能。</p><p>1.事务A执行以下代码，因为<code>sname</code>字段没有添加索引，造成锁定整个表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BEGIN;</span><br><span class="line">UPDATE stu SET sname &#x3D; &#39;hdcms&#39; WHERE sname &#x3D; &#39;后盾人&#39;;</span><br></pre></td></tr></table></figure><p>2.现在事务B更新任何一条记录都会造成阻塞，因为现在是表锁状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BEGIN;</span><br><span class="line">UPDATE stu SET sname &#x3D; &#39;小明&#39; WHERE id &#x3D; 1;</span><br><span class="line">-- 阻塞中...</span><br></pre></td></tr></table></figure><p>3.将<code>sname</code>字段添加索引后，行锁功能就又有效了</p><h3 id="范围锁"><a href="#范围锁" class="headerlink" title="范围锁"></a>范围锁</h3><p>查询没有指定明确范围时也会造成大量记录的锁定</p><p>1.事务A筛选时使用了范围区间，将会造成表锁</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BEGIN;</span><br><span class="line">UPDATE goods SET num &#x3D; 200 WHERE id &gt; 1 AND id &lt; 3;</span><br></pre></td></tr></table></figure><p>2.事务B将不能修改表中的ID大于2的记录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BEGIN;</span><br><span class="line">UPDATE goods SET num &#x3D; 1 WHERE id &#x3D; 2;</span><br><span class="line">-- 阻塞中...</span><br></pre></td></tr></table></figure><p>但可以更改ID为1的记录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE goods SET num &#x3D; 1 WHERE id &#x3D; 1;</span><br></pre></td></tr></table></figure><p>3.执行添加时因为不在id为1~3的范围内所有可以添加，但如果添加时指定ID为2将会阻塞</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO goods(name,num)VALUES(&#39;西瓜&#39;,200);</span><br></pre></td></tr></table></figure><h2 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h2><p>非观锁指对数据被外界修改持保守态度，在整个数据处理过程中，将数据处于锁定状态，可以很好地解决并发事务的更新丢失问题。</p><p>下面演示商城下单情况，要用户购买商品后我们要减少库存，如果在高并发情况下多个用户同时修改库存表，会造成库存数据异常，使用悲观锁可以解决这个问题。</p><p>1.事务A执行悲观锁操作后，其他事务执行同一代码时将阻塞</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BEGIN;</span><br><span class="line">SELECT * FROM goods WHERE id &#x3D; 1 FOR UPDATE;</span><br><span class="line">UPDATE goods SET num&#x3D;num-2 WHERE id &#x3D; 1;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>2.事务B执行以下代码将不能查询数据库，必须等待事务A提交或滚回事务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BEGIN;</span><br><span class="line">SELECT * FROM goods WHERE id &#x3D; 1 FOR UPDATE;</span><br><span class="line">-- 阻塞中...</span><br></pre></td></tr></table></figure><p>3.事务A提交后，事务B会得到事务A操作后的结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">COMMIT</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h2><p>在每次去拿数据的时候认为别人不会修改，不对数据上锁，但是在提交更新的时候会判断在此期间数据是否被更改，如果被更改则提交失败。</p><p>下面使用版本字段来实现乐观锁操作，并实现更改商品库存的案例。</p><p>1.事务A查询商品库存，获取了商品记录，记录中有VERSION字段用于记录版本号（目前为0）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BEGIN;</span><br><span class="line">SELECT * FROM goods WHERE id &#x3D; 1;</span><br></pre></td></tr></table></figure><p>2.事务B同时查询，也获取了版本号为0的记录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BEGIN;</span><br><span class="line">SELECT * FROM goods WHERE id &#x3D; 1;</span><br></pre></td></tr></table></figure><p>3.事务A更改库存，并增加版本号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE goods SET num&#x3D;num-10,VERSION&#x3D;VERSION+1 WHERE VERSION&#x3D;0;</span><br></pre></td></tr></table></figure><p>4.事务B更改数据，但使用的是事务B查询到的0号版本，因为事务A已经提交版本号为1，造成事务B修改失败，保证了数据的完整性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE goods SET num&#x3D;num-10,VERSION&#x3D;VERSION+1 WHERE VERSION&#x3D;0;</span><br></pre></td></tr></table></figure><h2 id="表锁机制"><a href="#表锁机制" class="headerlink" title="表锁机制"></a>表锁机制</h2><p>针对一些不支持事务的处理引擎可以使用锁表的方式控制事务。</p><h3 id="读锁"><a href="#读锁" class="headerlink" title="读锁"></a>读锁</h3><p>为表设置读锁后，当前会话和其他会话都不可以修改数据。</p><p>1.会话A对表goods设置了读锁，将不能修改该表，也不能操作其他表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LOCK TABLE goods READ;</span><br><span class="line">UPDATE goods SET num&#x3D;300 WHERE id&#x3D;1;</span><br><span class="line">SELECT * FROM stu;</span><br></pre></td></tr></table></figure><p>2.因为会话A对表<code>goods</code>设置了读锁，所以会话B也不能修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UPDATE goods SET num&#x3D;200 WHERE id&#x3D;1;</span><br><span class="line">-- 阻塞</span><br></pre></td></tr></table></figure><p>3.会话A解锁表后，其他会话又可以继续操作表了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UNLOCK TABLES;</span><br></pre></td></tr></table></figure><h3 id="写锁"><a href="#写锁" class="headerlink" title="写锁"></a>写锁</h3><p>为表设置了写锁后，当前会话可以修改，查询表，其他会话将无法操作</p><p>1.会话A对表goods设置写锁，本会话可以正常操作表，并不能操作其他表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LOCK TABLE goods WRITE;</span><br><span class="line">INSERT INTO goods(name,num)VALUES(&#39;后盾人教程&#39;,300);</span><br></pre></td></tr></table></figure><p>2.会话B读取/写入/写入表数据都将阻塞</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM goods;</span><br><span class="line">-- 阻塞</span><br></pre></td></tr></table></figure><p>3.会话A解锁表数据后，其他会话都可以正常操作了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UNLOCK TABLES;</span><br></pre></td></tr></table></figure><h2 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h2><p>外键表示一个表中的字段被另一个表中的一个字段引用。外键对相关表中的数据造成了限制，使mysql能够保持参照完整性。</p><p>比如学生和班级表，学生表完全依赖班级表，我们可以通过外键约束让学生表与班级表产生关联，当班级表数据变化时影响学生表。</p><ul><li>父表和子表存储引擎要一致</li><li>使用InnoDB引擎支持外键约束</li><li>外键表与主表列类型一致</li><li>外键列使用索引（数据库会自动添加索引）</li></ul><h2 id="创建外键"><a href="#创建外键" class="headerlink" title="创建外键"></a>创建外键</h2><p>下面我们先创建表关联后，再详细解释里面的参数选项。</p><h3 id="新建表"><a href="#新建表" class="headerlink" title="新建表"></a>新建表</h3><p>下面创建班级表与学生表，并定义学生表与班级表建立外键约束。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-- 班级表</span><br><span class="line">CREATE TABLE class (id int PRIMARY KEY AUTO_INCREMENT,name varchar(50));</span><br><span class="line"></span><br><span class="line">-- 学生表</span><br><span class="line">CREATE TABLE stu (</span><br><span class="line">  &#39;id&#39; int(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">  &#39;sname&#39; varchar(30) DEFAULT NULL,</span><br><span class="line">  &#39;class_id&#39; int(11) DEFAULT NULL,</span><br><span class="line">  CONSTRAINT &#39;stu_class&#39;</span><br><span class="line">  FOREIGN KEY (&#39;class_id&#39;) </span><br><span class="line">  REFERENCES &#39;class&#39; (&#39;id&#39;) </span><br><span class="line">  ON DELETE CASCADE </span><br><span class="line">  ON UPDATE CASCADE</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8</span><br></pre></td></tr></table></figure><h3 id="修改表-1"><a href="#修改表-1" class="headerlink" title="修改表"></a>修改表</h3><p>下面是对学生表添加班级表的外键约束</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE stu ADD </span><br><span class="line">CONSTRAINT stu_class</span><br><span class="line">FOREIGN KEY (class_id) </span><br><span class="line">REFERENCES class(id) </span><br><span class="line">ON DELETE SET NULL</span><br><span class="line">ON UPDATE CASCADE;</span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE stu DROP FOREIGN KEY stu_class;</span><br></pre></td></tr></table></figure><h2 id="选项说明"><a href="#选项说明" class="headerlink" title="选项说明"></a>选项说明</h2><p>下面列出外键关联用到的关键词</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>CONSTRAINT</td><td>为外键约束定义名称</td></tr><tr><td>FOREIGN KEY</td><td>子表与父表关联的列</td></tr><tr><td>REFERENCES</td><td>子表关联的父表字段</td></tr><tr><td>ON DELETE</td><td>父表删除时的处理方式</td></tr><tr><td>ON UPDATE</td><td>父表更新时的处理方式</td></tr></tbody></table><h2 id="处理动作"><a href="#处理动作" class="headerlink" title="处理动作"></a>处理动作</h2><h3 id="ON-DELETE"><a href="#ON-DELETE" class="headerlink" title="ON DELETE"></a>ON DELETE</h3><p>ON DELETE指在删除时的处理方式，常用的处理方式包括以下几种。</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>ON DELETE CASCADE</td><td>删除父表记录时，子表记录同时删除</td></tr><tr><td>ON DELETE SET NULL</td><td>删除父表记录时，子表记录设置为NULL（子表字段要允许NULL）</td></tr><tr><td>ON DELETE ON ACTION ON DELETE RESTRICT</td><td>删除父表记录时，子表不作任何处理，必须把子表处理完才可以删除主表</td></tr></tbody></table><h3 id="ON-UPDATE"><a href="#ON-UPDATE" class="headerlink" title="ON UPDATE"></a>ON UPDATE</h3><p>ON UPDATE指在更新时的处理方式，常用的处理方式包括以下几种。</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>ON UPDATE CASCADE</td><td>更新父表记录时，比如更改主表的主键时，子表记录同时更新</td></tr><tr><td>ON UPDATE SET NULL</td><td>更新父表记录时，比如更改主表的主键时，子表记录设置为NULL</td></tr><tr><td>ON UPDATE NO ACTION ON UPDATE RESTRICT</td><td>更新父表记录时，子表不做任何处理，必须把子表处理完才可以更新主表</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;MySQL是一个关系型数据库管理系统，由瑞典MySQL AB 公司开发，属于 Oracle 旗下产品。MySQL 是最流行的关系型数据库管理系统之一，在 WEB 应用方面，MySQL是最好的 RDBMS (Relational Database Management System，关系数据库管理系统) 应用软件之一。&lt;/p&gt;
&lt;p&gt;MySQL是一种关系型数据库管理系统，关系数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。&lt;/p&gt;</summary>
    
    
    
    
    <category term="工具" scheme="http://example.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
    <category term="关系型数据库" scheme="http://example.com/tags/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>IntelliJ IDEA的使用技巧</title>
    <link href="http://example.com/2019/09/12/IntelliJ-IDEA%E7%9A%84%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <id>http://example.com/2019/09/12/IntelliJ-IDEA%E7%9A%84%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</id>
    <published>2019-09-12T12:44:44.000Z</published>
    <updated>2021-02-22T14:52:15.831Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>IDEA 全称 IntelliJ IDEA，是java编程语言开发的集成环境。IntelliJ在业界被公认为最好的java开发工具，尤其在智能代码助手、代码自动提示、重构、JavaEE支持、各类版本工具(git、svn等)、JUnit、CVS整合、代码分析、 创新的GUI设计等方面的功能可以说是超常的。</p><a id="more"></a><h2 id="1-代码模板"><a href="#1-代码模板" class="headerlink" title="1.代码模板"></a>1.代码模板</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 模板一: psvm</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 模板二: sout</span><br><span class="line">System.out.println();</span><br><span class="line">&#x2F;&#x2F; 变形: soutp&#x2F;soutm&#x2F;soutv&#x2F;xxx.sout</span><br><span class="line">System.out.println(&quot;args &#x3D; &quot; + Arrays.deepToString(args));</span><br><span class="line">System.out.println(&quot;TemplateTest.main&quot;);</span><br><span class="line">int num &#x3D; 10;</span><br><span class="line">System.out.println(&quot;num &#x3D; &quot; + num);</span><br><span class="line">System.out.println(num);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 模板三: fori</span><br><span class="line">for (int i &#x3D; 0; i &lt; ; i++) &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 变形: iter</span><br><span class="line">String[] arr &#x3D; new String[]&#123;&quot;Tom&quot;, &quot;Jerry&quot;&#125;;</span><br><span class="line">for (String s : arr) &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 变形: itar</span><br><span class="line">for (int i &#x3D; 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">    String s &#x3D; arr[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 模板四: list.for</span><br><span class="line">ArrayList list &#x3D; new ArrayList();</span><br><span class="line">list.add(1);</span><br><span class="line">list.add(2);</span><br><span class="line">list.add(3);</span><br><span class="line">for (Object o : list) &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 变形: list.fori</span><br><span class="line">for (int i &#x3D; 0; i &lt; list.size(); i++) &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 变形: list.forr</span><br><span class="line">for (int i &#x3D; list.size() - 1; i &gt;&#x3D; 0; i--) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 模板五: ifn</span><br><span class="line">ArrayList list &#x3D; new ArrayList();</span><br><span class="line">list.add(1);</span><br><span class="line">if (list &#x3D;&#x3D; null) &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 变形: inn</span><br><span class="line">if (list !&#x3D; null) &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 变形: xxx.nn&#x2F;xxx.null</span><br><span class="line">if (list !&#x3D; null) &#123;</span><br><span class="line">&#125;</span><br><span class="line">if (list &#x3D;&#x3D; null) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 模板六: prsf(用户自定义)</span><br><span class="line">private static final</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;IDEA 全称 IntelliJ IDEA，是java编程语言开发的集成环境。IntelliJ在业界被公认为最好的java开发工具，尤其在智能代码助手、代码自动提示、重构、JavaEE支持、各类版本工具(git、svn等)、JUnit、CVS整合、代码分析、 创新的GUI设计等方面的功能可以说是超常的。&lt;/p&gt;</summary>
    
    
    
    
    <category term="工具" scheme="http://example.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="IDEA" scheme="http://example.com/tags/IDEA/"/>
    
    <category term="IDE" scheme="http://example.com/tags/IDE/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat的下载与使用</title>
    <link href="http://example.com/2019/09/12/Tomcat%E7%9A%84%E4%B8%8B%E8%BD%BD%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2019/09/12/Tomcat%E7%9A%84%E4%B8%8B%E8%BD%BD%E4%B8%8E%E4%BD%BF%E7%94%A8/</id>
    <published>2019-09-12T12:44:09.000Z</published>
    <updated>2021-02-22T14:50:50.472Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，由Apache、Sun 和其他一些公司及个人共同开发而成。由于有了Sun 的参与和支持，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现，Tomcat 5支持最新的Servlet 2.4 和JSP 2.0 规范。因为Tomcat 技术先进、性能稳定，而且免费，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。</p><a id="more"></a><h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><p>MacOS</p><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><p>1.进入Tomcat官网,在下载页面选中Core目录下的zip(pgp,sha512)文件进行下载</p><p>2.下载文件解压后进入解压后文件的bin目录,终端执行命令: <code>chmod 755 *.sh</code>赋予脚本文件权限</p><p>3.运行启动脚本文件: <code>./startup.sh</code>启动tomcat服务</p><p>4.在浏览器中输入: <code>localhost:8080</code>进行测试</p><p>5.运行关闭脚本文件: <code>./shutdown.sh</code>关闭tomcat服务</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，由Apache、Sun 和其他一些公司及个人共同开发而成。由于有了Sun 的参与和支持，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现，Tomcat 5支持最新的Servlet 2.4 和JSP 2.0 规范。因为Tomcat 技术先进、性能稳定，而且免费，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。&lt;/p&gt;</summary>
    
    
    
    
    <category term="工具" scheme="http://example.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="Tomcat" scheme="http://example.com/tags/Tomcat/"/>
    
    <category term="服务器" scheme="http://example.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Maven的下载与配置</title>
    <link href="http://example.com/2019/09/12/Maven%E7%9A%84%E4%B8%8B%E8%BD%BD%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2019/09/12/Maven%E7%9A%84%E4%B8%8B%E8%BD%BD%E4%B8%8E%E9%85%8D%E7%BD%AE/</id>
    <published>2019-09-12T12:43:54.000Z</published>
    <updated>2021-02-22T14:56:05.425Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Maven项目对象模型(POM)，可以通过一小段描述信息来管理项目的构建，报告和文档的项目管理工具软件。</p><p>Maven 除了以程序构建能力为特色之外，还提供高级项目管理工具。由于 Maven 的缺省构建规则有较高的可重用性，所以常常用两三行 Maven 构建脚本就可以构建简单的项目。由于 Maven 的面向项目的方法，许多 Apache Jakarta 项目发文时使用 Maven，而且公司项目采用 Maven 的比例在持续增长。</p><a id="more"></a><h2 id="1-Maven下载"><a href="#1-Maven下载" class="headerlink" title="1.Maven下载"></a>1.Maven下载</h2><p>登录maven官网进行下载：<code>http://maven.apache.org/download.cgi?utm_source=so&amp;utm_source=so</code></p><p>在下载信息中：</p><p>Binary tar.gz archive：是安装在Mac和Linux上的</p><p>Binary zip archive：是安装在Windows上的</p><h2 id="2-Maven安装"><a href="#2-Maven安装" class="headerlink" title="2.Maven安装"></a>2.Maven安装</h2><ul><li><p>选择apache-maven-3.6.2-bin.tar.gz解压，并拷贝到想要的位置</p></li><li><p>配置环境变量，编辑.bash_profile文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export MAVEN_HOME&#x3D;&#x2F;Users&#x2F;liuze&#x2F;Documents&#x2F;java-tools&#x2F;apache-maven-3.6.2</span><br><span class="line">export PATH&#x3D;$PATH:$MAVEN_HOME&#x2F;bin</span><br><span class="line">export M2_HOME&#x3D;&#x2F;Users&#x2F;liuze&#x2F;Documents&#x2F;java-tools&#x2F;apache-maven-3.6.2&#x2F;bin</span><br></pre></td></tr></table></figure><p>在bash终端中运行<code>mvn -v</code>验证maven是否安装成功</p></li><li><p>更改本地仓库地址，编辑conf文件夹中的<code>settings.xml</code>文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- localRepository</span><br><span class="line">   | The path to the local repository maven will use to store artifacts.</span><br><span class="line">   |</span><br><span class="line">   | Default: $&#123;user.home&#125;&#x2F;.m2&#x2F;repository</span><br><span class="line">  --&gt;</span><br><span class="line">  &lt;!-- 本地仓库地址 --&gt;</span><br><span class="line">  &lt;localRepository&gt;&#x2F;Users&#x2F;liuze&#x2F;Documents&#x2F;java-tools&#x2F;.m2&#x2F;repository&lt;&#x2F;localRepository&gt;</span><br></pre></td></tr></table></figure></li><li><p>更改中央仓库地址为阿里云镜像地址，编辑conf文件夹中的<code>settings.xml</code>文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;mirrors&gt;</span><br><span class="line">    &lt;!-- 阿里云镜像配置 --&gt;</span><br><span class="line">    &lt;mirror&gt;</span><br><span class="line">        &lt;id&gt;alimaven&lt;&#x2F;id&gt;</span><br><span class="line">        &lt;mirrorOf&gt;central&lt;&#x2F;mirrorOf&gt;</span><br><span class="line">        &lt;name&gt;aliyun maven&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;url&gt;http:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">    &lt;&#x2F;mirror&gt;</span><br><span class="line">&lt;&#x2F;mirrors&gt;</span><br></pre></td></tr></table></figure><h2 id="3-在IDEA上配置MAVEN"><a href="#3-在IDEA上配置MAVEN" class="headerlink" title="3.在IDEA上配置MAVEN"></a>3.在IDEA上配置MAVEN</h2></li></ul><p>1.点击首页右下角Configure键，选择preference中的Maven栏进行配置</p><p>2.runner栏,更改VM Options:-DarchetypeCatalog=internal</p><h2 id="4-MAVEN命令"><a href="#4-MAVEN命令" class="headerlink" title="4.MAVEN命令"></a>4.MAVEN命令</h2><p>1.mvn clean 清除项目编译信息</p><p>2.mvn compile 编译</p><p>3.mvn test 测试</p><p>4.mvn package 打包</p><p>5.mvn install 安装</p><p>6.mvn deploy 发布</p><h2 id="5-MAVEN框架"><a href="#5-MAVEN框架" class="headerlink" title="5.MAVEN框架"></a>5.MAVEN框架</h2><p>1.创建maven的java工程的骨架:quickstart</p><p>2.创建maven的web工程的骨架:maven-archetype-webapp</p><p>让java目录能够创建web文件:选择File的Project Structure,在Modules块Web Resource Directory中添加java文件目录</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;Maven项目对象模型(POM)，可以通过一小段描述信息来管理项目的构建，报告和文档的项目管理工具软件。&lt;/p&gt;
&lt;p&gt;Maven 除了以程序构建能力为特色之外，还提供高级项目管理工具。由于 Maven 的缺省构建规则有较高的可重用性，所以常常用两三行 Maven 构建脚本就可以构建简单的项目。由于 Maven 的面向项目的方法，许多 Apache Jakarta 项目发文时使用 Maven，而且公司项目采用 Maven 的比例在持续增长。&lt;/p&gt;</summary>
    
    
    
    
    <category term="工具" scheme="http://example.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="Maven" scheme="http://example.com/tags/Maven/"/>
    
    <category term="项目管理软件" scheme="http://example.com/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>MacOS系统使用技巧</title>
    <link href="http://example.com/2019/09/04/MacOS%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <id>http://example.com/2019/09/04/MacOS%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</id>
    <published>2019-09-04T12:38:23.000Z</published>
    <updated>2021-02-22T14:41:43.129Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>MacOS是一个类Unix系统，与Linux系统具有很多相同的特性，在方便开发者进行开发的同时还具有非常精美的交互界面，非常适合程序员使用，本博客将长期分享一些在MacOS使用过程中产生的心得和发现的技巧。</p><a id="more"></a><h3 id="适用对象"><a href="#适用对象" class="headerlink" title="适用对象"></a>适用对象</h3><p>装有MacOS的计算机</p><h2 id="技巧分享"><a href="#技巧分享" class="headerlink" title="技巧分享"></a>技巧分享</h2><h3 id="安装Homebrew"><a href="#安装Homebrew" class="headerlink" title="安装Homebrew"></a>安装Homebrew</h3><p>1.安装Xcode（开发者必备软件，会自动安装很多插件）</p><p>2.百度搜索brew进入官网，按照官网指令进行下载</p><h3 id="Mac系统Finder文稿的名字变成document解决办法"><a href="#Mac系统Finder文稿的名字变成document解决办法" class="headerlink" title="Mac系统Finder文稿的名字变成document解决办法"></a>Mac系统Finder文稿的名字变成document解决办法</h3><p>1.启动终端：<code>touch ~/Documents/.localized</code></p><p>2.输入：<code>chmod 600 ~/Documents/.localized</code></p><h3 id="Mac上必装的软件"><a href="#Mac上必装的软件" class="headerlink" title="Mac上必装的软件"></a>Mac上必装的软件</h3><p>1.电脑管家：腾讯柠檬、clean my mac X</p><p>2.聊天软件：QQ、微信</p><p>3.音乐播放器：网易云音乐</p><p>4.浏览器：Google浏览器</p><p>5.压缩软件：KeKa、The Unarchiver</p><p>6.分屏插件：Magnet</p><p>7.输入法：搜狗输入法</p><p>8.网盘：百度云盘</p><p>9.字典：网易有道词典、欧陆字典</p><p>10.办公软件：Office三件套</p><p>11.终端：iTerm2</p><p>12.常用IDE：IDEA、Pycharm</p><p>13.辅助IDE：Xcode、VSCode</p><p>14.虚拟机：VMware Fusion</p><p>15.驱动：罗技鼠标驱动</p><h3 id="Mac上好用的软件"><a href="#Mac上好用的软件" class="headerlink" title="Mac上好用的软件"></a>Mac上好用的软件</h3><p>1.视频播放器：IINA</p><p>2.日历：Itsycal</p><p>3.机器不休眠：Amphetamine</p><p>4.截图软件：Snip</p><p>5.屏蔽网页广告：AdGuard（plus）</p><p>6.屏保软件：Aerial</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>原创不易，转载请注明出处。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>10个Mac必装的免费软件，既个性又好用：<a href="https://www.bilibili.com/video/av61254157">https://www.bilibili.com/video/av61254157</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;MacOS是一个类Unix系统，与Linux系统具有很多相同的特性，在方便开发者进行开发的同时还具有非常精美的交互界面，非常适合程序员使用，本博客将长期分享一些在MacOS使用过程中产生的心得和发现的技巧。&lt;/p&gt;</summary>
    
    
    
    
    <category term="操作系统" scheme="http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="MacOS" scheme="http://example.com/tags/MacOS/"/>
    
  </entry>
  
  <entry>
    <title>Linux系统使用技巧</title>
    <link href="http://example.com/2019/09/04/Linux%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <id>http://example.com/2019/09/04/Linux%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</id>
    <published>2019-09-04T12:38:13.000Z</published>
    <updated>2021-02-22T14:41:03.379Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Linux是一套免费使用和自由传播的类Unix操作系统，是一个基于POSIX和Unix的多用户、多任务、支持多线程和多CPU的操作系统。使用者不仅可以直观地获取该操作系统的实现机制，而且可以根据自身的需要来修改完善这个操作系统，使其最大化地适应用户的需要。</p><p>本博客基于Linux的发行版CentOS系统，长期分享一些在Linux使用过程中产生的心得和发现的技巧。</p><a id="more"></a><h3 id="适用对象"><a href="#适用对象" class="headerlink" title="适用对象"></a>适用对象</h3><p>装有CentOS 7的计算机</p><h2 id="技巧分享"><a href="#技巧分享" class="headerlink" title="技巧分享"></a>技巧分享</h2><h3 id="CentOS-7更换软件源为阿里源"><a href="#CentOS-7更换软件源为阿里源" class="headerlink" title="CentOS 7更换软件源为阿里源"></a>CentOS 7更换软件源为阿里源</h3><p>1.把原来的源文件备份：<code>mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</code></p><p>2.从阿里下载源文件：<code>wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</code></p><p>3.清除缓存：<code>yum clean all</code></p><p>4.生成新缓存：<code>yum makecache</code></p><h3 id="将Linux中文目录改为英文目录"><a href="#将Linux中文目录改为英文目录" class="headerlink" title="将Linux中文目录改为英文目录"></a>将Linux中文目录改为英文目录</h3><p>1.打开终端，在终端中输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export LANG&#x3D;en_US</span><br><span class="line">xdg-user-dirs-gtk-update</span><br></pre></td></tr></table></figure><p>2.输入命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export LANG&#x3D;zh_CN</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>原创不易，转载请注明出处。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>鸟哥的Linux私房菜。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;Linux是一套免费使用和自由传播的类Unix操作系统，是一个基于POSIX和Unix的多用户、多任务、支持多线程和多CPU的操作系统。使用者不仅可以直观地获取该操作系统的实现机制，而且可以根据自身的需要来修改完善这个操作系统，使其最大化地适应用户的需要。&lt;/p&gt;
&lt;p&gt;本博客基于Linux的发行版CentOS系统，长期分享一些在Linux使用过程中产生的心得和发现的技巧。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
    <category term="操作系统" scheme="http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Git版本控制系统命令介绍</title>
    <link href="http://example.com/2019/09/03/Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4%E4%BB%8B%E7%BB%8D/"/>
    <id>http://example.com/2019/09/03/Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4%E4%BB%8B%E7%BB%8D/</id>
    <published>2019-09-03T12:17:48.000Z</published>
    <updated>2021-02-22T14:21:35.666Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Git是一个免费的开源分布式版本控制系统，旨在快速高效地处理从小型到大型项目的所有事务。</p><p>Git易于学习，占地面积小，具有闪电般快速的性能。它超越了Subversion等SCM工具，具有廉价本地分支，便捷的临时区域和多个工作流程等功能。</p><a id="more"></a><h3 id="Git使用环境"><a href="#Git使用环境" class="headerlink" title="Git使用环境"></a>Git使用环境</h3><p>MacOS或者Linux系统中的shell、bash、zsh等终端中</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="基本信息设置"><a href="#基本信息设置" class="headerlink" title="基本信息设置"></a>基本信息设置</h3><p>1.设置提交者用户名（全局）：<code>git config --global user.name &quot;用户名&quot;</code></p><p>2.设置提交者邮箱（全局）：<code>git config --global user.email &quot;邮箱&quot;</code></p><p>注：非全局设置不加：<code>--global</code></p><p>3.查看并修改配置信息：<code>vim ~/.gitconfig</code></p><h3 id="初始化本地Git仓库并完成提交"><a href="#初始化本地Git仓库并完成提交" class="headerlink" title="初始化本地Git仓库并完成提交"></a>初始化本地Git仓库并完成提交</h3><p>1.进入工作目录：<code>cd project</code></p><p>2.创建git仓库：<code>git init</code></p><p>注：会生成隐藏文件.git</p><p>3.向工作目录中添加源文件：<code>touch 源文件</code></p><p>4.将源文件添加到暂存区：<code>git add 源文件</code></p><p>5.将暂存区文件提交到仓库：<code>git commit -m &quot;描述本次提交的文字&quot;</code></p><p>6.若不想让git跟踪某些文件，需要创建文件：<code>vim .gitignore</code></p><p>注：把不需要跟踪的文件名称写入</p><h3 id="修改仓库文件"><a href="#修改仓库文件" class="headerlink" title="修改仓库文件"></a>修改仓库文件</h3><p>1.修改源文件</p><p>2.上传到暂存区</p><p>3.提交到仓库</p><p>4.修改仓库某文件名字：<code>git mv 原名 改后名</code></p><h3 id="删除仓库文件"><a href="#删除仓库文件" class="headerlink" title="删除仓库文件"></a>删除仓库文件</h3><p>1.从仓库直接删除文件：<code>git rm 源文件</code></p><p>注：此方法本地对应源文件也被删除</p><p>2.提交操作：<code>git commit -m &quot;描述本次删除的文字&quot;</code></p><p>3.若只删除仓库中源文件，不删除本地源文件：<code>git rm --cached 源文件</code></p><h3 id="查看仓库的各项信息"><a href="#查看仓库的各项信息" class="headerlink" title="查看仓库的各项信息"></a>查看仓库的各项信息</h3><p>1.查看仓库中源文件：<code>git checkout --源文件</code></p><p>2.查看仓库某源文件的修改信息：<code>git diff 源文件</code></p><p>3.查看当前仓库状态：<code>git status</code></p><p>4.查看仓库提交的历史记录：<code>git log</code></p><p>5.查看仓库提交的详细信息：<code>git log -p</code></p><p>6.只查看上一个提交的详细信息：<code>git log -p -1</code></p><p>7.若嫌信息太多，可以用：<code>git log --oneline</code></p><p>8.查看文件修改：<code>git log --name-only</code>和<code>git log --name-status</code></p><p>9.综合：<code>git log -p -2 --oneline --name-only --name-status</code></p><h3 id="Git分支"><a href="#Git分支" class="headerlink" title="Git分支"></a>Git分支</h3><p>1.查看git分支：<code>git branch</code></p><p>2.新建git分支：<code>git branch 新分支名</code></p><p>3.切换工作分支：<code>git checkout 分支名</code></p><p>4.创建并转向新分支快捷命令：<code>git checkout -b 新分支名</code></p><p>5.合并分支：<code>git merge 分支名</code></p><p>注：当开发分支的时候，主分支发生变化，需要replace base主分支：<code>git rebase master</code></p><p>6.删除分支：<code>git branch -d 分支名</code></p><p>7.删除作废工作的分支：<code>git branch -D 分支名</code></p><p>8.处理分支冲突：<code>vim 冲突文件</code></p><p>9.查看已合并分支：<code>git branch --merged</code></p><p>10.查看未合并分支：<code>git branch --no-merged</code></p><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><p>1.回退到上一个版本：<code>git reset --hard HEAD^</code></p><p>2.回退到上上个版本：<code>git reset --hard HEAD^^</code></p><p>注：以此类推，回退版本过多：<code>git reset --hard HEAD~100</code></p><p>3.恢复后查看各版本号：<code>git reflog</code></p><p>4.按版本号恢复：<code>git reset --hard 版本号</code></p><h3 id="暂存工作文件"><a href="#暂存工作文件" class="headerlink" title="暂存工作文件"></a>暂存工作文件</h3><p>1.暂存：<code>git stash</code></p><p>2.恢复：<code>git stash apply</code></p><p>3.恢复并删除：<code>git stash pop</code></p><p>4.删除暂存区：<code>git stash drop stash&#123;0&#125;</code></p><p>注：0表示是第一个暂存区</p><p>5.查看缓存区列表：<code>git stash list</code></p><h3 id="修改过去的提交信息"><a href="#修改过去的提交信息" class="headerlink" title="修改过去的提交信息"></a>修改过去的提交信息</h3><p>1.查看之前提交的版本号：<code>git log</code></p><p>2.将当前分支无关的工作状态进行暂存：<code>git stash</code></p><p>3.将HEAD指针指向需要修改的commit上（第2个commit开始）：<code>git rebase -i master^^</code></p><p>注：有几个^回退几个提交点，也可用~加数字，偏移量即为数字，master也可换成commit版本号</p><p>4.将HEAD指针指向需要修改的第一个commit上：<code>git rebase -i --root</code></p><p>5.找到需要修改的commit，将前方的<code>pick</code>改成<code>edit</code>后保存</p><p>6.修改HEAD指针所指的提交信息：<code>git commit --amend</code></p><p>7.移动HEAD指针回到最新的commit：<code>git rebase --continue</code></p><p>8.恢复之前的工作状态：<code>git stash pop</code></p><h3 id="修改命令键"><a href="#修改命令键" class="headerlink" title="修改命令键"></a>修改命令键</h3><p>1.使用git自带配置来修改：<code>git config --global alias.a add</code></p><p>2.查看修改后的配置文件：<code>vim ~/.gitconfig</code></p><p>3.使用系统别名定义git全局指令（bash）：<code>vim ~/.bash_profile</code></p><p>4.在./bash_profile中定制别名：<code>alias gs=&quot;git status&quot;</code></p><h3 id="版本标签"><a href="#版本标签" class="headerlink" title="版本标签"></a>版本标签</h3><p>1.打版本标签：<code>git tag v1.0</code></p><p>2.查看版本标签：<code>git tag</code></p><h3 id="开发完成生成代码压缩包"><a href="#开发完成生成代码压缩包" class="headerlink" title="开发完成生成代码压缩包"></a>开发完成生成代码压缩包</h3><p>命令：<code>git archive master —prefix=‘result/’ --forma=zip &gt; result.zip</code></p><p>注：master是分支名，result/是文件名，result.zip是压缩包名</p><h3 id="使用SSH和Github建立连接并下载源文件"><a href="#使用SSH和Github建立连接并下载源文件" class="headerlink" title="使用SSH和Github建立连接并下载源文件"></a>使用SSH和Github建立连接并下载源文件</h3><p>1.生成ssh秘钥：<code>ssh-keygen -t rsa</code></p><p>2.转向.ssh文件夹：<code>cd ~/.ssh</code></p><p>3.查看公钥并复制：<code>vim id_rsa.pub</code></p><p>4.打开github用户设置，选择SSH and GPG keys选项中的New SSH key进行添加</p><p>注：若连接失败，可尝试清理.ssh/known_hosts内容即可</p><p>5.从Github上下载源文件：<code>git clone ssh路径</code></p><h3 id="远程关联仓库并提交源文件"><a href="#远程关联仓库并提交源文件" class="headerlink" title="远程关联仓库并提交源文件"></a>远程关联仓库并提交源文件</h3><p>1.初始化仓库，完成代码并且提交本地版本库</p><p>2.关联远程仓库：<code>git remote add origin ssh路径</code></p><p>注：取消远程分支关联：<code>git remote remove origin</code></p><p>3.查看远程库：<code>git remote -v</code></p><p>4.推送源文件：<code>git push -u origin master</code></p><p>注：通过clone的仓库，本地与远程已自动关联，上几步可以省略</p><h3 id="关于Github上的一些操作"><a href="#关于Github上的一些操作" class="headerlink" title="关于Github上的一些操作"></a>关于Github上的一些操作</h3><p>1.查看远程分支：<code>git branch -a</code></p><p>2.关联master外分支：<code>git push --set-upstream origin 分支名</code></p><p>注：一般有提示</p><p>3.下载源文件时一般只有主分支，如何下载其他分支：<code>git pull origin 分支名:分支名</code></p><h3 id="合并Github远程分支"><a href="#合并Github远程分支" class="headerlink" title="合并Github远程分支"></a>合并Github远程分支</h3><p>1.分支状态下调整分支基点：<code>git rebase master</code></p><p>2.进入主分支：<code>git checkout master</code></p><p>3.合并分支：<code>git merge 分支名</code></p><p>4.推送master分支：<code>git push</code></p><h3 id="删除Github远程分支"><a href="#删除Github远程分支" class="headerlink" title="删除Github远程分支"></a>删除Github远程分支</h3><p>1.直接删除远程分支：<code>git push origin --delete 分支名</code></p><p>2.删除本地分支：<code>git branch -d 分支名</code></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>原创不易，转载请注明出处。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>后盾人教程，GIT版本控制从入门到实践，程序员看这个就够了：<a href="https://www.bilibili.com/video/av56582999">https://www.bilibili.com/video/av56582999</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;Git是一个免费的开源分布式版本控制系统，旨在快速高效地处理从小型到大型项目的所有事务。&lt;/p&gt;
&lt;p&gt;Git易于学习，占地面积小，具有闪电般快速的性能。它超越了Subversion等SCM工具，具有廉价本地分支，便捷的临时区域和多个工作流程等功能。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Git" scheme="http://example.com/tags/Git/"/>
    
    <category term="版本控制" scheme="http://example.com/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
    <category term="工具" scheme="http://example.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客搭建</title>
    <link href="http://example.com/2019/08/08/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <id>http://example.com/2019/08/08/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</id>
    <published>2019-08-08T14:06:39.000Z</published>
    <updated>2021-02-22T14:19:21.035Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>hexo是基于node.js制作的一个博客框架。</p><p>正常来说，hexo不需要部署到我们的服务器上，我们服务器上保存的，其实是基于在hexo通过Markdown编写的文章，然后hexo帮我们生成静态的html页面，并将其上传到我们的服务器。简而言之：hexo是一个静态页面生成、上传的博客工具。</p><a id="more"></a><h3 id="博客搭建工具"><a href="#博客搭建工具" class="headerlink" title="博客搭建工具"></a>博客搭建工具</h3><p>Node.js、hexo和git</p><h3 id="博客搭建环境"><a href="#博客搭建环境" class="headerlink" title="博客搭建环境"></a>博客搭建环境</h3><p>MacOS</p><h2 id="一、博客搭建过程"><a href="#一、博客搭建过程" class="headerlink" title="一、博客搭建过程"></a>一、博客搭建过程</h2><h3 id="1-下载node-js"><a href="#1-下载node-js" class="headerlink" title="1.下载node.js"></a>1.下载node.js</h3><p>Node.js是构建在Chrome v8引擎上的一个javascript运行环境。hexo博客框架是基于node.js制作而成，故首先要下载node.js工具。</p><p>下载地址：<a href="http://nodejs.org/">node.js</a></p><p>下载长期支持版（LTS）并安装。</p><p>安装成功后会显示成功安装node和npm（Node Package Manager）工具。</p><h3 id="2-利用npm安装cnpm-用来加速下载，有时会出现bug，可不用"><a href="#2-利用npm安装cnpm-用来加速下载，有时会出现bug，可不用" class="headerlink" title="2.利用npm安装cnpm(用来加速下载，有时会出现bug，可不用)"></a>2.利用npm安装cnpm(用来加速下载，有时会出现bug，可不用)</h3><p>因为npm安装插件是从国外服务器下载的，受网络影响大，而cnpm的服务器在中国，是淘宝团队分享的完整npmjs.org镜像，故用npm安装cnpm以完成后续操作。</p><p>在终端下首先要切换到root用户：<code>sudo su</code></p><p>安装cnpm：npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org`/">https://registry.npm.taobao.org`</a></p><h3 id="3-利用cnpm安装hexo"><a href="#3-利用cnpm安装hexo" class="headerlink" title="3.利用cnpm安装hexo"></a>3.利用cnpm安装hexo</h3><p>安装hexo：<code>cnpm install -g hexo-cli</code></p><h3 id="4-创建工作目录并利用hexo生成博客"><a href="#4-创建工作目录并利用hexo生成博客" class="headerlink" title="4.创建工作目录并利用hexo生成博客"></a>4.创建工作目录并利用hexo生成博客</h3><p>创建工作目录：<code>mkdir blog</code> <code>cd blog</code></p><p>利用hexo初始化博客：<code>sudo hexo init</code></p><h3 id="5-初识hexo博客目录"><a href="#5-初识hexo博客目录" class="headerlink" title="5.初识hexo博客目录"></a>5.初识hexo博客目录</h3><table><thead><tr><th>文件/文件夹</th><th>说明</th></tr></thead><tbody><tr><td>_config.yml</td><td>配置文件</td></tr><tr><td>scaffolds</td><td>一些通用的Markdown模板</td></tr><tr><td>source</td><td>编写的Markdown文件</td></tr><tr><td>themes</td><td>博客的模板</td></tr><tr><td>(public)</td><td>生成的静态文件，这个目录最终会发布到服务器</td></tr></tbody></table><p>我们正常使用，修改最多的源码是_config.yml文件，不管是博客的基础配置，还是模板，都是修改这个文件。</p><p>source是我们日常写文章要用的目录，是我们日常操作的文件夹，其中：</p><p>_drafts是草稿文件</p><p>_posts是发布的文章</p><p>如果针对下载的模板修改，那么就需要操作themes了。</p><h3 id="6-修改博客基本配置"><a href="#6-修改博客基本配置" class="headerlink" title="6.修改博客基本配置"></a>6.修改博客基本配置</h3><p>修改_config.yml文件：<code>sudo vim _config.yml</code></p><p>修改如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># site</span><br><span class="line">title: 站点名称</span><br><span class="line">subtitle: 主页副标题</span><br><span class="line">description: 个人描述</span><br><span class="line">keywords:</span><br><span class="line">author: 作者名称</span><br><span class="line">language: 语言</span><br><span class="line">timezone:</span><br></pre></td></tr></table></figure><h2 id="二、博客主题配置"><a href="#二、博客主题配置" class="headerlink" title="二、博客主题配置"></a>二、博客主题配置</h2><h3 id="1-从github上下载yilia主题文件"><a href="#1-从github上下载yilia主题文件" class="headerlink" title="1.从github上下载yilia主题文件"></a>1.从github上下载yilia主题文件</h3><p>yilia开源网站：<a href="github.com/litten/hexo-theme-yilia">yilia主题</a></p><p>转至blog工作目录，运行命令：<code>sudo git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</code></p><h3 id="2-配置主题"><a href="#2-配置主题" class="headerlink" title="2.配置主题"></a>2.配置主题</h3><p>修改_config.yml文件：<code>sudo vim _config.yml</code></p><p>把主题的配置修改为yilia。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;</span><br><span class="line">## Themes: https:&#x2F;&#x2F;hexo.io&#x2F;themes&#x2F;</span><br><span class="line">theme: yilia</span><br></pre></td></tr></table></figure><h3 id="3-清理生成博客，主题修改成功"><a href="#3-清理生成博客，主题修改成功" class="headerlink" title="3.清理生成博客，主题修改成功"></a>3.清理生成博客，主题修改成功</h3><p><code>sudo hexo clean</code></p><p><code>sudo hexo g</code></p><p><code>sudo hexo d</code></p><h2 id="三、博客的使用"><a href="#三、博客的使用" class="headerlink" title="三、博客的使用"></a>三、博客的使用</h2><h3 id="1-启动与结束hexo服务"><a href="#1-启动与结束hexo服务" class="headerlink" title="1.启动与结束hexo服务"></a>1.启动与结束hexo服务</h3><p>转到blog工作目录，运行命令：<code>sudo hexo s</code></p><p>运行hexo博客时必须获取root权限。</p><p>运行成功终端会给你返回一个端口号，如通过：<code>localhost:4000</code>进行本地访问</p><p>在终端可通过<code>ctrl+c</code>结束服务。</p><h3 id="2-创建博客文章"><a href="#2-创建博客文章" class="headerlink" title="2.创建博客文章"></a>2.创建博客文章</h3><p>转到blog工作目录，运行命令：<code>sudo hexo n &quot;文章名&quot;</code></p><p>转向_posts目录对文章进行编辑：</p><p><code>cd ./source/_posts/</code></p><p><code>vim &quot;文章名&quot;</code></p><h3 id="3-清理并生成博客文章"><a href="#3-清理并生成博客文章" class="headerlink" title="3.清理并生成博客文章"></a>3.清理并生成博客文章</h3><p>转到blog工作目录，运行清理命令：<code>sudo hexo clean</code></p><p>运行生成命令：<code>sudo hexo g</code></p><h2 id="四、博客的远程部署"><a href="#四、博客的远程部署" class="headerlink" title="四、博客的远程部署"></a>四、博客的远程部署</h2><h3 id="1-打开github，创建新仓库"><a href="#1-打开github，创建新仓库" class="headerlink" title="1.打开github，创建新仓库"></a>1.打开github，创建新仓库</h3><p>在创建新的仓库时，仓库名必须是“昵称.github.io”，这也是以后访问博客的地址。</p><h3 id="2-cnpm下载推送插件"><a href="#2-cnpm下载推送插件" class="headerlink" title="2.cnpm下载推送插件"></a>2.cnpm下载推送插件</h3><p>执行命令：<code>sudo cnpm install --save hexo-deployer-git</code></p><h3 id="3-修改配置文件"><a href="#3-修改配置文件" class="headerlink" title="3.修改配置文件"></a>3.修改配置文件</h3><p>修改主目录下_config.yml文件，执行：<code>sudo vim _config.yml</code></p><p>对最后一行进行如下修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: 仓库http地址</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>注意空格</p><h3 id="4-向github推送博客"><a href="#4-向github推送博客" class="headerlink" title="4.向github推送博客"></a>4.向github推送博客</h3><p>输入命令：<code>sudo hexo d</code></p><p>期间可能会让你输入github用户名和密码。</p><p>至此，已完成博客书写与推送功能。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>hexo博客基本操作逻辑还是很简单的，要好好熟练掌握。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>手把手教你从0开始搭建自己的个人博客：<a href="https://www.bilibili.com/video/av44544186">https://www.bilibili.com/video/av44544186</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;hexo是基于node.js制作的一个博客框架。&lt;/p&gt;
&lt;p&gt;正常来说，hexo不需要部署到我们的服务器上，我们服务器上保存的，其实是基于在hexo通过Markdown编写的文章，然后hexo帮我们生成静态的html页面，并将其上传到我们的服务器。简而言之：hexo是一个静态页面生成、上传的博客工具。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Hexo" scheme="http://example.com/tags/Hexo/"/>
    
    <category term="博客" scheme="http://example.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
